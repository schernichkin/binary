
==================== FINAL INTERFACE ====================
2019-05-22 17:18:01.923334327 UTC

interface binary-0.8.7.0-BLOwEKiKlD84pHPCNhnRK5:Data.Binary.Generic [orphan module] 8065
  interface hash: 718340e4d18b3121c5da6cb8c1131420
  ABI hash: a22fb7808ee5bea94f33f2d71d5d9f4e
  export-list hash: 87252c9e6dc8f1a2d500955439e4f13f
  orphan hash: 51d2d40c988cb02ca55fb674a413881c
  flag hash: f6cec7b5876ba5c89ff12c3b6b4995cb
  opt_hash: 5835274e0c52a5d281a4b935bfdb5c93
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
module dependencies: Data.Binary.Builder Data.Binary.Class
                     Data.Binary.FloatCast Data.Binary.Get Data.Binary.Get.Internal
                     Data.Binary.Internal Data.Binary.Put
package dependencies: array-0.5.3.0 base-4.12.0.0*
                      bytestring-0.10.8.2* containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0
orphans: bytestring-0.10.8.2:Data.ByteString.Builder
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
import safe base-4.12.0.0:Control.Applicative 2ae514eb141d45774730765c61bb41c0
import safe base-4.12.0.0:Data.Bits 64fdef6c05b11e33e007318d457467e9
import safe base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import safe base-4.12.0.0:Data.Kind 00b38651ebf0240c5dfe0fbba2e4e7c5
import safe base-4.12.0.0:Data.Word 6b968b6c7df442cfcad986e497aee095
import safe base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import safe base-4.12.0.0:GHC.Enum 87204abed08db8735fc0be5ab48689aa
import safe base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import safe base-4.12.0.0:GHC.Generics 2b3b2e72be66983021f8ad0c2edcf290
import safe base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import safe base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import safe base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import safe base-4.12.0.0:GHC.Word 36bd327b03ce8a144ab8e66a53975837
import safe base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import safe Data.Binary.Class b9531796075cf52210d660e03238719d
  exports: 3a5c73d9e292c3c39d7e814f98f1f5fb
  Binary 1e74ce561dbc2ee6a089ac9a6874bdf4
  GBinaryGet b5ef20ff2c01a09036d7b8fd896a0d17
  GBinaryPut f6d7ccb833dfe75ee08b778ac5c1a3b5
  get ac8578b64b4e6e200db820047e0c619c
  gget 4655f27706404aa03aa46d9f29e685cf
  gput b2ae1caa5cc2b294efb078ccfe3ac2b8
  put 8d8c38ee4e74960eb14d254347746014
import safe Data.Binary.Get ff9c2260189d4b12b1f075c0f0ce14c6
  exports: 8c4fc30bb8f08ebabe6c413e8ef3a3ba
import safe Data.Binary.Get.Internal 72d9f9f5cb4680e87b57f70e12a256ec
  Get a186c9537e26c2f269fcb2c351eb0f38
import safe Data.Binary.Put 61a573420501fe256acd718e92576610
  exports: 5058fc1ddc2527395c5542112755645b
  Put d58a34c7ddb8da4b063cc60b7ef9f490
import safe ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
addDependentFile "/home/schernichkin/.stack/programs/x86_64-linux/ghc-8.6.5/lib/ghc-8.6.5/include/ghcversion.h" 43db44f9bb88490c2fa995e5f5ec33f2
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.4.0.1/build/autogen/cabal_macros.h" e6f1f8b8bb6582b087a6681896f0d62a
addDependentFile "/usr/include/stdc-predef.h" b11071912035aeb144fe65c00cfe2168
4ef36e4c831be49fccdf822ccfe02546
  $fGBinaryGetTYPE:*: ::
    (Data.Binary.Class.GBinaryGet a, Data.Binary.Class.GBinaryGet b) =>
    Data.Binary.Class.GBinaryGet (a GHC.Generics.:*: b)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Binary.Generic.$fGBinaryGetTYPE:*:1
                  `cast`
                (forall (a :: <* -> *>_N) (b :: <* -> *>_N).
                 <Data.Binary.Class.GBinaryGet a>_R
                 ->_R <Data.Binary.Class.GBinaryGet b>_R
                 ->_R (forall (t :: <*>_N).
                       Sym (Data.Binary.Get.Internal.N:Get[0]
                                <(GHC.Generics.:*:)
                                   a b t>_R)) ; Sym (Data.Binary.Class.N:GBinaryGet[0]
                                                         <*>_N <a GHC.Generics.:*: b>_N)) -}
a7b3ac8fe84857b3091c54817c3e9e38
  $fGBinaryGetTYPE:*:1 ::
    (Data.Binary.Class.GBinaryGet a, Data.Binary.Class.GBinaryGet b) =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success ((GHC.Generics.:*:) a b t) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ a :: * -> *
                   @ b :: * -> *
                   ($dGBinaryGet :: Data.Binary.Class.GBinaryGet a)
                   ($dGBinaryGet1 :: Data.Binary.Class.GBinaryGet b)
                   @ t
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              ((GHC.Generics.:*:) a b t) r) ->
                 ($dGBinaryGet
                    `cast`
                  (Data.Binary.Class.N:GBinaryGet[0] <*>_N <a>_N)
                    @ t)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a t>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a t) ->
                    ($dGBinaryGet1
                       `cast`
                     (Data.Binary.Class.N:GBinaryGet[0] <*>_N <b>_N)
                       @ t)
                      `cast`
                    (Data.Binary.Get.Internal.N:Get[0] <b t>_R)
                      @ r
                      i'
                      (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b t) ->
                       eta1 i'1 (GHC.Generics.:*: @ * @ a @ b @ t a1 a2)))) -}
3d6e39187c1def63fa5b3644384182be
  $fGBinaryGetTYPE:+: ::
    (Data.Binary.Generic.GSumGet a, Data.Binary.Generic.GSumGet b,
     Data.Binary.Generic.SumSize a, Data.Binary.Generic.SumSize b) =>
    Data.Binary.Class.GBinaryGet (a GHC.Generics.:+: b)
  DFunId
  {- Arity: 6,
     Strictness: <L,C(C1(C1(C1(C1(C(C1(U)))))))><L,C(C1(C1(C1(C1(C(C1(U)))))))><S(S),1*U(U)><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)><L,U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (4, False, True)
                Data.Binary.Generic.$fGBinaryGetTYPE:+:1
                  `cast`
                (forall (a :: <* -> *>_N) (b :: <* -> *>_N).
                 <Data.Binary.Generic.GSumGet a>_R
                 ->_R <Data.Binary.Generic.GSumGet b>_R
                 ->_R <Data.Binary.Generic.SumSize a>_R
                 ->_R <Data.Binary.Generic.SumSize b>_R
                 ->_R (forall (t :: <*>_N).
                       Sym (Data.Binary.Get.Internal.N:Get[0]
                                <(GHC.Generics.:+:)
                                   a b t>_R)) ; Sym (Data.Binary.Class.N:GBinaryGet[0]
                                                         <*>_N <a GHC.Generics.:+: b>_N)) -}
671db954708f7d12ee57c36f8f32702b
  $fGBinaryGetTYPE:+:1 ::
    (Data.Binary.Generic.GSumGet a, Data.Binary.Generic.GSumGet b,
     Data.Binary.Generic.SumSize a, Data.Binary.Generic.SumSize b) =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success ((GHC.Generics.:+:) a b t) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <L,C(C1(C1(C1(C1(C(C1(U)))))))><L,C(C1(C1(C1(C1(C(C1(U)))))))><S(S),1*U(U)><S(S),1*U(U)><S(SLSS),1*U(U,U,U,U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (6, True, False)
                (\ @ a :: * -> *
                   @ b :: * -> *
                   (w :: Data.Binary.Generic.GSumGet a)
                   (w1 :: Data.Binary.Generic.GSumGet b)
                   (w2 :: Data.Binary.Generic.SumSize a)
                   (w3 :: Data.Binary.Generic.SumSize b)
                   @ t
                   @ r
                   (w4 :: Data.ByteString.Internal.ByteString)
                   (w5 :: Data.Binary.Get.Internal.Success
                            ((GHC.Generics.:+:) a b t) r) ->
                 case w2
                        `cast`
                      (Data.Binary.Generic.N:SumSize[0]
                           <a>_N ; Data.Binary.Generic.N:Tagged[0]
                                       <a>_P <GHC.Word.Word64>_R) of ww { GHC.Word.W64# ww1 ->
                 case w3
                        `cast`
                      (Data.Binary.Generic.N:SumSize[0]
                           <b>_N ; Data.Binary.Generic.N:Tagged[0]
                                       <b>_P <GHC.Word.Word64>_R) of ww2 { GHC.Word.W64# ww3 ->
                 case w4 of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                 Data.Binary.Generic.$w$cgget
                   @ a
                   @ b
                   w
                   w1
                   ww1
                   ww3
                   @ t
                   @ r
                   ww5
                   ww6
                   ww7
                   ww8
                   w5 } } }) -}
f8c8b7fb6f7c804c47568ecf8861af39
  $fGBinaryGetTYPEK1 ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.GBinaryGet (GHC.Generics.K1 i a)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Binary.Generic.$fGBinaryGetTYPEK2
                  `cast`
                (forall (a :: <*>_N) (i :: <*>_N).
                 <Data.Binary.Class.Binary a>_R
                 ->_R (forall (t :: <*>_N).
                       Sym (Data.Binary.Get.Internal.N:Get[0]
                                <GHC.Generics.K1
                                   i a t>_R)) ; Sym (Data.Binary.Class.N:GBinaryGet[0]
                                                         <*>_N <GHC.Generics.K1 i a>_N)) -}
ea09f50920c1605e23d622f0f6da6ea6
  $fGBinaryGetTYPEK2 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (GHC.Generics.K1 i a t) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ i
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ t
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (GHC.Generics.K1 i a t) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1
                      i'
                      a1 `cast` (Sym (GHC.Generics.N:K1[0] <*>_N <i>_P <a>_R <t>_P)))) -}
44fb17d13f9a224d3ff73088ee80b5c0
  $fGBinaryGetTYPEM1 ::
    Data.Binary.Class.GBinaryGet a =>
    Data.Binary.Class.GBinaryGet (GHC.Generics.M1 i c a)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Binary.Generic.$fGBinaryGetTYPEM2
                  `cast`
                (forall (a :: <*
                               -> *>_N) (i :: <*>_N) (c :: <GHC.Generics.Meta>_N).
                 <Data.Binary.Class.GBinaryGet a>_R
                 ->_R (forall (t :: <*>_N).
                       Sym (Data.Binary.Get.Internal.N:Get[0]
                                <GHC.Generics.M1
                                   i c a t>_R)) ; Sym (Data.Binary.Class.N:GBinaryGet[0]
                                                           <*>_N <GHC.Generics.M1 i c a>_N)) -}
c903907c3c42a92710956d8dd4bb1cdf
  $fGBinaryGetTYPEM2 ::
    Data.Binary.Class.GBinaryGet a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (GHC.Generics.M1 i c a t) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a :: * -> *
                   @ i
                   @ c :: GHC.Generics.Meta
                   ($dGBinaryGet :: Data.Binary.Class.GBinaryGet a)
                   @ t
                   @ r
                   (i1 :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success
                            (GHC.Generics.M1 i c a t) r) ->
                 ($dGBinaryGet
                    `cast`
                  (Data.Binary.Class.N:GBinaryGet[0] <*>_N <a>_N)
                    @ t)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a t>_R)
                   @ r
                   i1
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a t) ->
                    ks
                      i'
                      a1
                        `cast`
                      (Sym (GHC.Generics.N:M1[0] <*>_N <i>_P <c>_P <a>_R) <t>_N))) -}
dc31d13e0a2bfc0fdad629fb651ffeb8
  $fGBinaryGetTYPEU1 :: Data.Binary.Class.GBinaryGet GHC.Generics.U1
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(C(S)),1*C1(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Binary.Generic.$fGBinaryGetTYPEU2
                  `cast`
                ((forall (t :: <*>_N).
                  Sym (Data.Binary.Get.Internal.N:Get[0]
                           <GHC.Generics.U1 t>_R)) ; Sym (Data.Binary.Class.N:GBinaryGet[0]
                                                              <*>_N <GHC.Generics.U1>_N)) -}
03b6da97d1d1bd28a42017ac2dd78338
  $fGBinaryGetTYPEU2 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (GHC.Generics.U1 t) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(C(S)),1*C1(C1(U))>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   @ r
                   (s :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success (GHC.Generics.U1 t) r) ->
                 ks s (GHC.Generics.U1 @ * @ t)) -}
8a908030bd34b7559299594c3ecaadb6
  $fGBinaryGetTYPEV1 :: Data.Binary.Class.GBinaryGet GHC.Generics.V1
  DFunId
  {- Arity: 2, Strictness: <L,U><C(C(S)),1*C1(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Binary.Generic.$fGBinaryGetTYPEV2
                  `cast`
                ((forall (t :: <*>_N).
                  Sym (Data.Binary.Get.Internal.N:Get[0]
                           <GHC.Generics.V1 t>_R)) ; Sym (Data.Binary.Class.N:GBinaryGet[0]
                                                              <*>_N <GHC.Generics.V1>_N)) -}
353fa2309739561554c76ca37c5649b8
  $fGBinaryGetTYPEV2 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (GHC.Generics.V1 t) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <L,U><C(C(S)),1*C1(C1(U))>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   @ r
                   (s :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success (GHC.Generics.V1 t) r) ->
                 ks s (Data.Binary.Generic.$fGBinaryGetTYPEV3 @ t)) -}
212f2f37c3620b338d63629ab252d965
  $fGBinaryGetTYPEV3 :: GHC.Generics.V1 t
  {- Strictness: x -}
79e8353aa2045318ead5552540b4fb02
  $fGBinaryPutTYPE:*: ::
    (Data.Binary.Class.GBinaryPut a, Data.Binary.Class.GBinaryPut b) =>
    Data.Binary.Class.GBinaryPut (a GHC.Generics.:*: b)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,C(U)))><L,1*C1(U(A,C(U)))><S,1*U(U,U)>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Binary.Generic.$fGBinaryPutTYPE:*:_$cgput
                  `cast`
                (forall (a :: <* -> *>_N) (b :: <* -> *>_N).
                 <Data.Binary.Class.GBinaryPut a>_R
                 ->_R <Data.Binary.Class.GBinaryPut b>_R
                 ->_R Sym (Data.Binary.Class.N:GBinaryPut[0]
                               <*>_N <a GHC.Generics.:*: b>_N)) -}
09dd14771acb3be166ca8bb1d9ad59ba
  $fGBinaryPutTYPE:*:_$cgput ::
    (Data.Binary.Class.GBinaryPut a, Data.Binary.Class.GBinaryPut b) =>
    (GHC.Generics.:*:) a b t -> Data.Binary.Put.Put
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,C(U)))><L,1*C1(U(A,C(U)))><S,1*U(U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a :: * -> *
                   @ b :: * -> *
                   (w :: Data.Binary.Class.GBinaryPut a)
                   (w1 :: Data.Binary.Class.GBinaryPut b)
                   @ t
                   (w2 :: (GHC.Generics.:*:) a b t) ->
                 case w2 of ww { GHC.Generics.:*: ww1 ww2 ->
                 (Data.Binary.Put.PairS
                    @ ()
                    GHC.Tuple.()
                    (\ @ r ->
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (w1 `cast` (Data.Binary.Class.N:GBinaryPut[0] <*>_N <b>_N)
                                 @ t
                                 ww2)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds3 w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (w `cast` (Data.Binary.Class.N:GBinaryPut[0] <*>_N <a>_N)
                                 @ t
                                 ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds3 w3 ->
                         w3 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) -> f (g x))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
a04058060448f7c595da9cabb2f9093f
  $fGBinaryPutTYPE:+: ::
    (Data.Binary.Generic.GSumPut a, Data.Binary.Generic.GSumPut b,
     Data.Binary.Generic.SumSize a, Data.Binary.Generic.SumSize b) =>
    Data.Binary.Class.GBinaryPut (a GHC.Generics.:+: b)
  DFunId
  {- Arity: 5,
     Strictness: <L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><S(S),1*U(U)><S(S),1*U(U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (4, False, True)
                Data.Binary.Generic.$fGBinaryPutTYPE:+:_$cgput
                  `cast`
                (forall (a :: <* -> *>_N) (b :: <* -> *>_N).
                 <Data.Binary.Generic.GSumPut a>_R
                 ->_R <Data.Binary.Generic.GSumPut b>_R
                 ->_R <Data.Binary.Generic.SumSize a>_R
                 ->_R <Data.Binary.Generic.SumSize b>_R
                 ->_R Sym (Data.Binary.Class.N:GBinaryPut[0]
                               <*>_N <a GHC.Generics.:+: b>_N)) -}
30c59b8f3d56602c465c44224ea11427
  $fGBinaryPutTYPE:+:_$cgput ::
    (Data.Binary.Generic.GSumPut a, Data.Binary.Generic.GSumPut b,
     Data.Binary.Generic.SumSize a, Data.Binary.Generic.SumSize b) =>
    (GHC.Generics.:+:) a b t -> Data.Binary.Put.Put
  {- Arity: 5,
     Strictness: <L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><S(S),1*U(U)><S(S),1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ a :: * -> *
                   @ b :: * -> *
                   (w :: Data.Binary.Generic.GSumPut a)
                   (w1 :: Data.Binary.Generic.GSumPut b)
                   (w2 :: Data.Binary.Generic.SumSize a)
                   (w3 :: Data.Binary.Generic.SumSize b)
                   @ t
                   (w4 :: (GHC.Generics.:+:) a b t) ->
                 case w2
                        `cast`
                      (Data.Binary.Generic.N:SumSize[0]
                           <a>_N ; Data.Binary.Generic.N:Tagged[0]
                                       <a>_P <GHC.Word.Word64>_R) of ww { GHC.Word.W64# ww1 ->
                 case w3
                        `cast`
                      (Data.Binary.Generic.N:SumSize[0]
                           <b>_N ; Data.Binary.Generic.N:Tagged[0]
                                       <b>_P <GHC.Word.Word64>_R) of ww2 { GHC.Word.W64# ww3 ->
                 Data.Binary.Generic.$w$cgput @ a @ b w w1 ww1 ww3 @ t w4 } }) -}
d5c425837f353505de9af03a15002722
  $fGBinaryPutTYPEK1 ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.GBinaryPut (GHC.Generics.K1 i a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(S)LL),1*U(1*C1(U(U,U)),A,A)><L,U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Binary.Generic.$fGBinaryPutTYPEK1_$cgput
                  `cast`
                (forall (a :: <*>_N) (i :: <*>_N).
                 <Data.Binary.Class.Binary a>_R
                 ->_R Sym (Data.Binary.Class.N:GBinaryPut[0]
                               <*>_N <GHC.Generics.K1 i a>_N)) -}
e7874478f9d2328608ac45088aa1f796
  $fGBinaryPutTYPEK1_$cgput ::
    Data.Binary.Class.Binary a =>
    GHC.Generics.K1 i a t -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(S)LL),1*U(1*C1(U(U,U)),A,A)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   @ i
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ t
                   (eta :: GHC.Generics.K1 i a t) ->
                 Data.Binary.Class.put
                   @ a
                   $dBinary
                   eta `cast` (GHC.Generics.N:K1[0] <*>_N <i>_P <a>_R <t>_P)) -}
682cb06f5878d541491c9a8cf8b13f34
  $fGBinaryPutTYPEM1 ::
    Data.Binary.Class.GBinaryPut a =>
    Data.Binary.Class.GBinaryPut (GHC.Generics.M1 i c a)
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U(U,U))><L,U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                (\ @ a :: * -> *
                   @ i
                   @ c :: GHC.Generics.Meta
                   ($dGBinaryPut :: Data.Binary.Class.GBinaryPut a)
                   @ t
                   (x :: GHC.Generics.M1 i c a t) ->
                 $dGBinaryPut `cast` (Data.Binary.Class.N:GBinaryPut[0] <*>_N <a>_N)
                   @ t
                   x `cast` (GHC.Generics.N:M1[0] <*>_N <i>_P <c>_P <a>_R <t>_N))
                  `cast`
                (forall (a :: <*
                               -> *>_N) (i :: <*>_N) (c :: <GHC.Generics.Meta>_N).
                 <Data.Binary.Class.GBinaryPut a>_R
                 ->_R Sym (Data.Binary.Class.N:GBinaryPut[0]
                               <*>_N <GHC.Generics.M1 i c a>_N)) -}
5438e0483ec28f5412d31977993cf72c
  $fGBinaryPutTYPEU1 :: Data.Binary.Class.GBinaryPut GHC.Generics.U1
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Binary.Generic.$fGBinaryPutTYPEU1_$cgput
                  `cast`
                (Sym (Data.Binary.Class.N:GBinaryPut[0]
                          <*>_N <GHC.Generics.U1>_N)) -}
4662995b6f931fd4ac65d84894f8de29
  $fGBinaryPutTYPEU1_$cgput ::
    GHC.Generics.U1 t -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ t (ds3 :: GHC.Generics.U1 t) ->
                 case ds3 of wild { GHC.Generics.U1 ->
                 Data.Binary.Generic.$fGBinaryPutTYPEU2
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
9cb3e3ed8e748c08e1c094e75001db7b
  $fGBinaryPutTYPEU2 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Data.Binary.Generic.$fGBinaryPutTYPEU3
                     `cast`
                   (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
7faa0a84e88516d1f6095f75bc26b34d
  $fGBinaryPutTYPEU3 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
d65b20ca0a6e611e3b2e1ccc9a4ef61d
  $fGBinaryPutTYPEV1 :: Data.Binary.Class.GBinaryPut GHC.Generics.V1
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Binary.Generic.$fGBinaryPutTYPEV2
                  `cast`
                ((forall (t :: <*>_N).
                  <GHC.Generics.V1 t>_R
                  ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) ; Sym (Data.Binary.Class.N:GBinaryPut[0]
                                                                          <*>_N
                                                                          <GHC.Generics.V1>_N)) -}
a6ddac24eae5bf64994b1c2e5235d250
  $fGBinaryPutTYPEV2 :: GHC.Generics.V1 t -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ t (ds3 :: GHC.Generics.V1 t) ->
                 Data.Binary.Generic.$fGBinaryPutTYPEU2) -}
9d510686fc9c03f47a9046effff8babe
  $fGSumGet:+: ::
    (Data.Binary.Generic.GSumGet a, Data.Binary.Generic.GSumGet b) =>
    Data.Binary.Generic.GSumGet (a GHC.Generics.:+: b)
  DFunId
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*C1(C1(C1(C1(C1(C(C1(U)))))))><L,1*C1(C1(C1(C1(C1(C(C1(U)))))))><S(LLC(C(S))LLLLL),U(U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Binary.Generic.$fGSumGet:+:_$cgetSum
                  `cast`
                (forall (a :: <* -> *>_N) (b :: <* -> *>_N).
                 <Data.Binary.Generic.GSumGet a>_R
                 ->_R <Data.Binary.Generic.GSumGet b>_R
                 ->_R Sym (Data.Binary.Generic.N:GSumGet[0]
                               <a GHC.Generics.:+: b>_N)) -}
4de4580046f934dcc0fb02f58baf91ad
  $fGSumGet:+:1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
9d510686fc9c03f47a9046effff8babe
  $fGSumGet:+:_$cgetSum ::
    (Data.Binary.Generic.GSumGet a, Data.Binary.Generic.GSumGet b,
     GHC.Classes.Ord word, GHC.Num.Num word, Data.Bits.Bits word) =>
    word
    -> word -> Data.Binary.Get.Internal.Get ((GHC.Generics.:+:) a b a1)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*C1(C1(C1(C1(C1(C(C1(U)))))))><L,1*C1(C1(C1(C1(C1(C(C1(U)))))))><S(LLC(C(S))LLLLL),U(U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U>,
     Unfolding: (\ @ a :: * -> *
                   @ b :: * -> *
                   ($dGSumGet :: Data.Binary.Generic.GSumGet a)
                   ($dGSumGet1 :: Data.Binary.Generic.GSumGet b)
                   @ word
                   @ a1
                   ($dOrd :: GHC.Classes.Ord word)
                   ($dNum :: GHC.Num.Num word)
                   ($dBits :: Data.Bits.Bits word)
                   (code3 :: word)
                   (size :: word) ->
                 case code3 of code4 { DEFAULT ->
                 case size of size1 { DEFAULT ->
                 let {
                   sizeL :: word
                   = Data.Bits.shiftR
                       @ word
                       $dBits
                       size1
                       Data.Binary.Generic.$fGSumGet:+:1
                 } in
                 case GHC.Classes.< @ word $dOrd code4 sizeL of wild {
                   GHC.Types.False
                   -> let {
                        m :: Data.Binary.Get.Internal.Get (b a1)
                        = $dGSumGet1 `cast` (Data.Binary.Generic.N:GSumGet[0] <b>_N)
                            @ word
                            @ a1
                            $dOrd
                            $dNum
                            $dBits
                            (GHC.Num.- @ word $dNum code4 sizeL)
                            (GHC.Num.- @ word $dNum size1 sizeL)
                      } in
                      (\ @ r
                         (i :: Data.ByteString.Internal.ByteString)
                         (ks :: Data.Binary.Get.Internal.Success
                                  ((GHC.Generics.:+:) a b a1) r) ->
                       m `cast` (Data.Binary.Get.Internal.N:Get[0] <b a1>_R)
                         @ r
                         i
                         (\ (i' :: Data.ByteString.Internal.ByteString) (a2 :: b a1) ->
                          ks i' (GHC.Generics.R1 @ * @ a @ b @ a1 a2)))
                        `cast`
                      (Sym (Data.Binary.Get.Internal.N:Get[0]
                                <(GHC.Generics.:+:) a b a1>_R))
                   GHC.Types.True
                   -> let {
                        m :: Data.Binary.Get.Internal.Get (a a1)
                        = $dGSumGet `cast` (Data.Binary.Generic.N:GSumGet[0] <a>_N)
                            @ word
                            @ a1
                            $dOrd
                            $dNum
                            $dBits
                            code4
                            sizeL
                      } in
                      (\ @ r
                         (i :: Data.ByteString.Internal.ByteString)
                         (ks :: Data.Binary.Get.Internal.Success
                                  ((GHC.Generics.:+:) a b a1) r) ->
                       m `cast` (Data.Binary.Get.Internal.N:Get[0] <a a1>_R)
                         @ r
                         i
                         (\ (i' :: Data.ByteString.Internal.ByteString) (a2 :: a a1) ->
                          ks i' (GHC.Generics.L1 @ * @ a @ b @ a1 a2)))
                        `cast`
                      (Sym (Data.Binary.Get.Internal.N:Get[0]
                                <(GHC.Generics.:+:) a b a1>_R)) } } }) -}
9d510686fc9c03f47a9046effff8babe
  $fGSumGetM1 ::
    Data.Binary.Class.GBinaryGet a =>
    Data.Binary.Generic.GSumGet (GHC.Generics.C1 c a)
  DFunId
  {- Arity: 8, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,A><L,A><L,A><L,A><L,A><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Binary.Generic.$fGSumGetM2
                  `cast`
                (forall (a :: <* -> *>_N) (c :: <GHC.Generics.Meta>_N).
                 <Data.Binary.Class.GBinaryGet a>_R
                 ->_R (forall (word :: <*>_N) (a1 :: <*>_N).
                       <GHC.Classes.Ord word>_R
                       ->_R <GHC.Num.Num word>_R
                       ->_R <Data.Bits.Bits word>_R
                       ->_R <word>_R
                       ->_R <word>_R
                       ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        c
                                        a
                                        a1>_R)) ; Sym (Data.Binary.Generic.N:GSumGet[0]
                                                           <GHC.Generics.C1 c a>_N)) -}
9c7cb5f475dd6fa38576b556a61b29a2
  $fGSumGetM2 ::
    (Data.Binary.Class.GBinaryGet a, GHC.Classes.Ord word,
     GHC.Num.Num word, Data.Bits.Bits word) =>
    word
    -> word
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            (GHC.Generics.M1 GHC.Generics.C c a a1) r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 8, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,A><L,A><L,A><L,A><L,A><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (8, True, True)
                (\ @ a :: * -> *
                   @ c :: GHC.Generics.Meta
                   ($dGBinaryGet :: Data.Binary.Class.GBinaryGet a)
                   @ word
                   @ a1
                   ($dOrd :: GHC.Classes.Ord word)
                   ($dNum :: GHC.Num.Num word)
                   ($dBits :: Data.Bits.Bits word)
                   (eta :: word)
                   (eta1 :: word)
                   @ r
                   (eta2 :: Data.ByteString.Internal.ByteString)
                   (eta3 :: Data.Binary.Get.Internal.Success
                              (GHC.Generics.M1 GHC.Generics.C c a a1) r) ->
                 Data.Binary.Generic.$fGBinaryGetTYPEM2
                   @ a
                   @ GHC.Generics.C
                   @ c
                   $dGBinaryGet
                   @ a1
                   @ r
                   eta2
                   eta3) -}
e01cf649a6511807b0f390654a615be7
  $fGSumPut:+: ::
    (Data.Binary.Generic.GSumPut a, Data.Binary.Generic.GSumPut b) =>
    Data.Binary.Generic.GSumPut (a GHC.Generics.:+: b)
  DFunId
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><L,U(U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,1*U><S,1*U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Binary.Generic.$fGSumPut:+:_$cputSum
                  `cast`
                (forall (a :: <* -> *>_N) (b :: <* -> *>_N).
                 <Data.Binary.Generic.GSumPut a>_R
                 ->_R <Data.Binary.Generic.GSumPut b>_R
                 ->_R Sym (Data.Binary.Generic.N:GSumPut[0]
                               <a GHC.Generics.:+: b>_N)) -}
e01cf649a6511807b0f390654a615be7
  $fGSumPut:+:_$cputSum ::
    (Data.Binary.Generic.GSumPut a, Data.Binary.Generic.GSumPut b,
     GHC.Num.Num w, Data.Bits.Bits w, Data.Binary.Class.Binary w) =>
    w -> w -> (GHC.Generics.:+:) a b a1 -> Data.Binary.Put.Put
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><L,U(U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ @ a :: * -> *
                   @ b :: * -> *
                   ($dGSumPut :: Data.Binary.Generic.GSumPut a)
                   ($dGSumPut1 :: Data.Binary.Generic.GSumPut b)
                   @ w
                   @ a1
                   ($dNum :: GHC.Num.Num w)
                   ($dBits :: Data.Bits.Bits w)
                   ($dBinary :: Data.Binary.Class.Binary w)
                   (code3 :: w)
                   (size :: w)
                   (s :: (GHC.Generics.:+:) a b a1) ->
                 case code3 of code4 { DEFAULT ->
                 case size of size1 { DEFAULT ->
                 let {
                   sizeL :: w
                   = Data.Bits.shiftR
                       @ w
                       $dBits
                       size1
                       Data.Binary.Generic.$fGSumGet:+:1
                 } in
                 case s of wild {
                   GHC.Generics.L1 x
                   -> $dGSumPut `cast` (Data.Binary.Generic.N:GSumPut[0] <a>_N)
                        @ w
                        @ a1
                        $dNum
                        $dBits
                        $dBinary
                        code4
                        sizeL
                        x
                   GHC.Generics.R1 x
                   -> $dGSumPut1 `cast` (Data.Binary.Generic.N:GSumPut[0] <b>_N)
                        @ w
                        @ a1
                        $dNum
                        $dBits
                        $dBinary
                        (GHC.Num.+ @ w $dNum code4 sizeL)
                        (GHC.Num.- @ w $dNum size1 sizeL)
                        x } } }) -}
e01cf649a6511807b0f390654a615be7
  $fGSumPutM1 ::
    Data.Binary.Class.GBinaryPut a =>
    Data.Binary.Generic.GSumPut (GHC.Generics.C1 c a)
  DFunId
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,C(U)))><L,A><L,A><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U><L,A><L,U>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Binary.Generic.$fGSumPutM1_$cputSum
                  `cast`
                (forall (a :: <* -> *>_N) (c :: <GHC.Generics.Meta>_N).
                 <Data.Binary.Class.GBinaryPut a>_R
                 ->_R Sym (Data.Binary.Generic.N:GSumPut[0]
                               <GHC.Generics.C1 c a>_N)) -}
5f57d3c024c068d2f06e1c22f13d7469
  $fGSumPutM1_$cputSum ::
    (Data.Binary.Class.GBinaryPut a, GHC.Num.Num w, Data.Bits.Bits w,
     Data.Binary.Class.Binary w) =>
    w -> w -> GHC.Generics.C1 c a a1 -> Data.Binary.Put.Put
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,C(U)))><L,A><L,A><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U><L,A><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (7, True, False)
                (\ @ a :: * -> *
                   @ c :: GHC.Generics.Meta
                   (w :: Data.Binary.Class.GBinaryPut a)
                   @ w1
                   @ a1
                   (w2 :: GHC.Num.Num w1)
                   (w3 :: Data.Bits.Bits w1)
                   (w4 :: Data.Binary.Class.Binary w1)
                   (w5 :: w1)
                   (w6 :: w1)
                   (w7 :: GHC.Generics.C1 c a a1) ->
                 case w5 of code3 { DEFAULT ->
                 (Data.Binary.Put.PairS
                    @ ()
                    GHC.Tuple.()
                    (\ @ r ->
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (w `cast` (Data.Binary.Class.N:GBinaryPut[0] <*>_N <a>_N)
                                 @ a1
                                 w7
                                   `cast`
                                 (GHC.Generics.N:M1[0] <*>_N <GHC.Generics.C>_P <c>_P <a>_R <a1>_N))
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds3 w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.put @ w1 w4 code3)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds3 w8 ->
                         w8 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) -> f (g x))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
9514ac377ef8ee51bc8d4810380226e8
  $fSumSize:+: ::
    (Data.Binary.Generic.SumSize a, Data.Binary.Generic.SumSize b) =>
    Data.Binary.Generic.SumSize (a GHC.Generics.:+: b)
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Binary.Generic.$fSumSize:+:1
                  `cast`
                (forall (a :: <* -> *>_N) (b :: <* -> *>_N).
                 <Data.Binary.Generic.SumSize a>_R
                 ->_R <Data.Binary.Generic.SumSize b>_R
                 ->_R Sym (Data.Binary.Generic.N:Tagged[0]
                               <a GHC.Generics.:+: b>_P
                               <GHC.Word.Word64>_R) ; Sym (Data.Binary.Generic.N:SumSize[0]
                                                               <a GHC.Generics.:+: b>_N)) -}
9514ac377ef8ee51bc8d4810380226e8
  $fSumSize:+:1 ::
    (Data.Binary.Generic.SumSize a, Data.Binary.Generic.SumSize b) =>
    GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a :: * -> *
                   @ b :: * -> *
                   ($dSumSize :: Data.Binary.Generic.SumSize a)
                   ($dSumSize1 :: Data.Binary.Generic.SumSize b) ->
                 case $dSumSize
                        `cast`
                      (Data.Binary.Generic.N:SumSize[0]
                           <a>_N ; Data.Binary.Generic.N:Tagged[0]
                                       <a>_P <GHC.Word.Word64>_R) of wild { GHC.Word.W64# x# ->
                 case $dSumSize1
                        `cast`
                      (Data.Binary.Generic.N:SumSize[0]
                           <b>_N ; Data.Binary.Generic.N:Tagged[0]
                                       <b>_P <GHC.Word.Word64>_R) of wild1 { GHC.Word.W64# y# ->
                 GHC.Word.W64# (GHC.Prim.plusWord# x# y#) } }) -}
9514ac377ef8ee51bc8d4810380226e8
  $fSumSizeM1 :: Data.Binary.Generic.SumSize (GHC.Generics.C1 c a)
  DFunId
  {- Strictness: m, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (\ @ c :: GHC.Generics.Meta @ a :: * -> * ->
                 Data.Binary.Generic.$fSumSizeM2)
                  `cast`
                (forall (c :: <GHC.Generics.Meta>_N) (a :: <* -> *>_N).
                 Sym (Data.Binary.Generic.N:Tagged[0]
                          <GHC.Generics.C1 c a>_P
                          <GHC.Word.Word64>_R) ; Sym (Data.Binary.Generic.N:SumSize[0]
                                                          <GHC.Generics.C1 c a>_N)) -}
62c6d39878c22c7950d04da967e58671
  $fSumSizeM2 :: GHC.Word.Word64
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W64# 1##) -}
7c6ca94756a300df661aa9fae50bbc85
  $tc'C:SumSize :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6178343034087309632##
                   1728507916921118727##
                   Data.Binary.Generic.$trModule
                   Data.Binary.Generic.$tc'C:SumSize2
                   1#
                   Data.Binary.Generic.$tc'C:SumSize1) -}
436e7e42d4ed9d8530c0e7f9c537674e
  $tc'C:SumSize1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
50b5492d2e6e378d84b1cba6cfd29cb7
  $tc'C:SumSize2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Data.Binary.Generic.$tc'C:SumSize3) -}
9636bc7cf221d8e484005af1c04ac9e4
  $tc'C:SumSize3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:SumSize"#) -}
1dca90e663d7871a99b03118386f467a
  $tc'Tagged :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5594857139271630058##
                   692973725359642741##
                   Data.Binary.Generic.$trModule
                   Data.Binary.Generic.$tc'Tagged2
                   2#
                   Data.Binary.Generic.$tc'Tagged1) -}
9eacdd2e0d55025bdffba6ff76281086
  $tc'Tagged1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5e4aac763d78d5e2316d63a8e3a7e084
  $tc'Tagged2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Generic.$tc'Tagged3) -}
c962bf84a861cbae071a63551d36314b
  $tc'Tagged3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Tagged"#) -}
c7260068539218afc0c78e7c7bdf2778
  $tcGSumGet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13311746849846173601##
                   13901315358574022410##
                   Data.Binary.Generic.$trModule
                   Data.Binary.Generic.$tcGSumGet2
                   0#
                   Data.Binary.Generic.$tcGSumGet1) -}
b2ace346307f1a8ec0ff018700aed3e9
  $tcGSumGet1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
03e88d71c38f4aeea07bf8cba2723db5
  $tcGSumGet2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Generic.$tcGSumGet3) -}
92ee50a8b711acf3dfb34ae8ca3612d4
  $tcGSumGet3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GSumGet"#) -}
48af154ae98f3548c9758095096ea80a
  $tcGSumPut :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8114476650714815060##
                   11022892854653079221##
                   Data.Binary.Generic.$trModule
                   Data.Binary.Generic.$tcGSumPut1
                   0#
                   Data.Binary.Generic.$tcGSumGet1) -}
8fea019390e80e2ab244d21b13d5a4d2
  $tcGSumPut1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Generic.$tcGSumPut2) -}
2c9dae22ff646109c3673df65c21ea1c
  $tcGSumPut2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GSumPut"#) -}
5416ebe0e59629fcc1788b456b41b297
  $tcSumSize :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   138850495731368454##
                   16732147438052268513##
                   Data.Binary.Generic.$trModule
                   Data.Binary.Generic.$tcSumSize1
                   0#
                   Data.Binary.Generic.$tcGSumGet1) -}
6c6e12c1a67a1a827a02c93fb4d92dcb
  $tcSumSize1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Generic.$tcSumSize2) -}
6b08a91039fdc21c3c4d7e7993f305ff
  $tcSumSize2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SumSize"#) -}
c06ed024fd4995fa59f2cd555efb159f
  $tcTagged :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2194161991029421570##
                   1225826484434703188##
                   Data.Binary.Generic.$trModule
                   Data.Binary.Generic.$tcTagged2
                   0#
                   Data.Binary.Generic.$tcTagged1) -}
17faf48f45993e70d97f0181e3aacbe6
  $tcTagged1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0e3bbec5de5a14d0199f5ced22cc1bf2
  $tcTagged2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Generic.$tcTagged3) -}
d039d000453e7afa64bcaafe0f34587e
  $tcTagged3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tagged"#) -}
848b5f4d60429e22a1714ca3c065acae
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Binary.Generic.$trModule3
                   Data.Binary.Generic.$trModule1) -}
866db533f56da30f666906e3f196aa6c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Generic.$trModule2) -}
ba2329a938371c994baed141f0103f89
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data.Binary.Generic"#) -}
9af93ced70167fa1330b48d9f4b6ef25
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Generic.$trModule4) -}
c8daa186b8d4a18ffa48dddf2bb2d34f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("binary-0.8.7.0-BLOwEKiKlD84pHPCNhnRK5"#) -}
32fc04f98f3a368649a422c87fb9eb77
  $w$cgget ::
    (Data.Binary.Generic.GSumGet a, Data.Binary.Generic.GSumGet b) =>
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> forall t r.
       GHC.Prim.Addr#
       -> GHC.ForeignPtr.ForeignPtrContents
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> Data.Binary.Get.Internal.Success ((GHC.Generics.:+:) a b t) r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 9,
     Strictness: <L,C(C1(C1(C1(C1(C(C1(U)))))))><L,C(C1(C1(C1(C1(C(C1(U)))))))><S,U><S,U><L,U><L,U><L,U><S,U><L,U>,
     Inline: [2] -}
4c1137af42d29757a3de0174fc2422ca
  $w$cgput ::
    (Data.Binary.Generic.GSumPut a, Data.Binary.Generic.GSumPut b) =>
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> forall t. (GHC.Generics.:+:) a b t -> Data.Binary.Put.Put
  {- Arity: 5,
     Strictness: <L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><L,1*C1(C1(C1(C1(C1(C1(U(U,U)))))))><S,U><S,U><S,1*U>,
     Inline: [2] -}
9d510686fc9c03f47a9046effff8babe
  class GSumGet (f :: * -> *) where
    getSum :: (GHC.Classes.Ord word, GHC.Num.Num word,
               Data.Bits.Bits word) =>
              word -> word -> Data.Binary.Get.Internal.Get (f a)
    {-# MINIMAL getSum #-}
e01cf649a6511807b0f390654a615be7
  class GSumPut (f :: * -> *) where
    putSum :: (GHC.Num.Num w, Data.Bits.Bits w,
               Data.Binary.Class.Binary w) =>
              w -> w -> f a -> Data.Binary.Put.Put
    {-# MINIMAL putSum #-}
9514ac377ef8ee51bc8d4810380226e8
  class SumSize (f :: * -> *) where
    sumSize :: Data.Binary.Generic.Tagged f GHC.Word.Word64
    {-# MINIMAL sumSize #-}
25227ccebf07ff284486f80a9242ac74
  type role Tagged phantom representational
  newtype Tagged (s :: * -> *) b = Tagged {unTagged :: b}
25227ccebf07ff284486f80a9242ac74
  unTagged :: Data.Binary.Generic.Tagged s b -> b
  RecSel Left Data.Binary.Generic.Tagged
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Data.Binary.Generic.unTagged1
                  `cast`
                (forall (s :: <* -> *>_N) (b :: <*>_N).
                 <Data.Binary.Generic.Tagged s b>_R
                 ->_R Data.Binary.Generic.N:Tagged[0] <s>_P <b>_R) -}
25227ccebf07ff284486f80a9242ac74
  unTagged1 ::
    Data.Binary.Generic.Tagged s b -> Data.Binary.Generic.Tagged s b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ s :: * -> * @ b (ds3 :: Data.Binary.Generic.Tagged s b) ->
                 ds3) -}
instance [safe] [orphan] Data.Binary.Class.GBinaryGet [TYPE,
                                                       GHC.Generics.:*:]
  = Data.Binary.Generic.$fGBinaryGetTYPE:*:
instance [safe] [orphan] Data.Binary.Class.GBinaryGet [TYPE,
                                                       GHC.Generics.:+:]
  = Data.Binary.Generic.$fGBinaryGetTYPE:+:
instance [safe] [orphan] Data.Binary.Class.GBinaryGet [TYPE,
                                                       GHC.Generics.K1]
  = Data.Binary.Generic.$fGBinaryGetTYPEK1
instance [safe] [orphan] Data.Binary.Class.GBinaryGet [TYPE,
                                                       GHC.Generics.M1]
  = Data.Binary.Generic.$fGBinaryGetTYPEM1
instance [safe] [orphan] Data.Binary.Class.GBinaryGet [TYPE,
                                                       GHC.Generics.U1]
  = Data.Binary.Generic.$fGBinaryGetTYPEU1
instance [safe] [orphan] Data.Binary.Class.GBinaryGet [TYPE,
                                                       GHC.Generics.V1]
  = Data.Binary.Generic.$fGBinaryGetTYPEV1
instance [safe] [orphan] Data.Binary.Class.GBinaryPut [TYPE,
                                                       GHC.Generics.:*:]
  = Data.Binary.Generic.$fGBinaryPutTYPE:*:
instance [safe] [orphan] Data.Binary.Class.GBinaryPut [TYPE,
                                                       GHC.Generics.:+:]
  = Data.Binary.Generic.$fGBinaryPutTYPE:+:
instance [safe] [orphan] Data.Binary.Class.GBinaryPut [TYPE,
                                                       GHC.Generics.K1]
  = Data.Binary.Generic.$fGBinaryPutTYPEK1
instance [safe] [orphan] Data.Binary.Class.GBinaryPut [TYPE,
                                                       GHC.Generics.M1]
  = Data.Binary.Generic.$fGBinaryPutTYPEM1
instance [safe] [orphan] Data.Binary.Class.GBinaryPut [TYPE,
                                                       GHC.Generics.U1]
  = Data.Binary.Generic.$fGBinaryPutTYPEU1
instance [safe] [orphan] Data.Binary.Class.GBinaryPut [TYPE,
                                                       GHC.Generics.V1]
  = Data.Binary.Generic.$fGBinaryPutTYPEV1
instance [safe] Data.Binary.Generic.GSumGet [GHC.Generics.:+:]
  = Data.Binary.Generic.$fGSumGet:+:
instance [safe] Data.Binary.Generic.GSumGet [GHC.Generics.M1]
  = Data.Binary.Generic.$fGSumGetM1
instance [safe] Data.Binary.Generic.GSumPut [GHC.Generics.:+:]
  = Data.Binary.Generic.$fGSumPut:+:
instance [safe] Data.Binary.Generic.GSumPut [GHC.Generics.M1]
  = Data.Binary.Generic.$fGSumPutM1
instance [safe] Data.Binary.Generic.SumSize [GHC.Generics.:+:]
  = Data.Binary.Generic.$fSumSize:+:
instance [safe] Data.Binary.Generic.SumSize [GHC.Generics.M1]
  = Data.Binary.Generic.$fSumSizeM1
trusted: safe
require own pkg trusted: True
module header:
  Nothing
declaration docs:
arg docs:

