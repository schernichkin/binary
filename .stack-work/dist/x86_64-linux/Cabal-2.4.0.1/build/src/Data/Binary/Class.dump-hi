
==================== FINAL INTERFACE ====================
2019-05-22 17:17:58.727160243 UTC

interface binary-0.8.7.0-BLOwEKiKlD84pHPCNhnRK5:Data.Binary.Class 8065
  interface hash: 4d213933fd625f5df251f911eccd0b5d
  ABI hash: b9531796075cf52210d660e03238719d
  export-list hash: 3a5c73d9e292c3c39d7e814f98f1f5fb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fb09ec354dafbe81fbad9c5ea30a361b
  opt_hash: 5835274e0c52a5d281a4b935bfdb5c93
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Binary.Class.Binary{Data.Binary.Class.get Data.Binary.Class.put Data.Binary.Class.putList}
  Data.Binary.Class.GBinaryGet{Data.Binary.Class.gget}
  Data.Binary.Class.GBinaryPut{Data.Binary.Class.gput}
module dependencies: Data.Binary.Builder Data.Binary.FloatCast
                     Data.Binary.Get Data.Binary.Get.Internal Data.Binary.Internal
                     Data.Binary.Put
package dependencies: array-0.5.3.0 base-4.12.0.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0
orphans: bytestring-0.10.8.2:Data.ByteString.Builder
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
import  -/  array-0.5.3.0:Data.Array.Base ede05b091fefc604cd572a3818a902f4
import  -/  array-0.5.3.0:Data.Array.Unboxed d9ad103a3d932c56293b2cc73c06d742
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Data.Bits 64fdef6c05b11e33e007318d457467e9
import  -/  base-4.12.0.0:Data.Complex 1cbafb66bd17add038b33064d27b2047
import  -/  base-4.12.0.0:Data.Either 423bee738f25e5ee983d072216009be8
import  -/  base-4.12.0.0:Data.Fixed d8f5176c3816200e1f5515663a7ff1fe
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:Data.Functor.Identity f8b68112573f77a401c3389544bc0f0d
import  -/  base-4.12.0.0:Data.Int e78f203d621836c59d5015a8a0e4eaea
import  -/  base-4.12.0.0:Data.Kind 00b38651ebf0240c5dfe0fbba2e4e7c5
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.List.NonEmpty 3890a1d01d63ccdc85bc9c9f8969a7cd
import  -/  base-4.12.0.0:Data.Monoid 12b87658decc811c5251626260c01aeb
import  -/  base-4.12.0.0:Data.OldList e931cf456dc87f11ee6e6fb153bca23e
import  -/  base-4.12.0.0:Data.Ratio ca7795f81c201f83d6159a8388bb75b9
import  -/  base-4.12.0.0:Data.Semigroup 77d0b010ed701f8a1da4f6d7b4d5812e
import  -/  base-4.12.0.0:Data.Semigroup.Internal 9e6a94bb7b30999ff3a105d62aea5718
import  -/  base-4.12.0.0:Data.Type.Equality f6b04445a1c9b5058ef9dbe9a2aeb06a
import  -/  base-4.12.0.0:Data.Typeable.Internal e1cb15df401654131814917774d4d7ed
import  -/  base-4.12.0.0:Data.Version b91365c9d28e06272e2a2db7656d57ee
import  -/  base-4.12.0.0:Data.Void 7d507f34fb7b7291298961d8e654089b
import  -/  base-4.12.0.0:Data.Word 6b968b6c7df442cfcad986e497aee095
import  -/  base-4.12.0.0:GHC.Arr ec26aa94fff9ed31a6fa85d884b35f3c
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Enum 87204abed08db8735fc0be5ab48689aa
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.Exts 5176e66011d4902498d2e6a4020ba73d
import  -/  base-4.12.0.0:GHC.Fingerprint 8cccc81f265c9f9ec60d26cbc8dff33f
import  -/  base-4.12.0.0:GHC.Fingerprint.Type 3280f24fb218bb453f9c3e99460120e1
import  -/  base-4.12.0.0:GHC.Float ccb68fbeaab348f60d11c8132d51af5d
import  -/  base-4.12.0.0:GHC.Generics 2b3b2e72be66983021f8ad0c2edcf290
import  -/  base-4.12.0.0:GHC.Int 75a738083d98da9ebef0ff75df759462
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Natural da6d6726680b29ad27b5135b21fafc84
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:GHC.Word 36bd327b03ce8a144ab8e66a53975837
import  -/  base-4.12.0.0:Numeric.Natural 11139907d9f9c724321d21e028aa020a
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:Type.Reflection 562c8d83dc5e27f5c261fb3217da7c38
import  -/  base-4.12.0.0:Type.Reflection.Unsafe 9d32ed6d28a4affe630401e2edf123ba
import  -/  Data.Binary.Get ff9c2260189d4b12b1f075c0f0ce14c6
  exports: 8c4fc30bb8f08ebabe6c413e8ef3a3ba
  getInt16be 297e2b4cc27aa49eb56e71629a59df44
  getInt32be 1ded201f18a6f7b323a6000aa4474131
  getInt64be c402e1301b1d941fca51b09f4cb9a0bf
  getInt8 098a8959e301e81638183f717d106133
  getLazyByteString b14c7501fedcf757c6acd556bb4c3bb2
  getWord16be e05487550641a84a782316e6ab2d8d19
  getWord32be 7b765255c9836f804ae3ce784c5c5c09
  getWord64be 85b029b82c11146b8aeab80d4b266a9e
  getWord8 dfc835d24b3c64d45643d75f94f4204b
import  -/  Data.Binary.Get.Internal 72d9f9f5cb4680e87b57f70e12a256ec
  Get a186c9537e26c2f269fcb2c351eb0f38
  getByteString c1d082dd6a7fcc9d5e7e75223e285c02
import  -/  Data.Binary.Put 61a573420501fe256acd718e92576610
  exports: 5058fc1ddc2527395c5542112755645b
  Put d58a34c7ddb8da4b063cc60b7ef9f490
  putBuilder 8b8379b110cc73872fafcc7c8d950669
  putByteString e7ac4f4be940a26f83f0f9db071b0306
  putCharUtf8 fb757802287c354facdf09d5a4f6a914
  putInt16be eab6fd519e38e74fbe7158d17e5c2d6e
  putInt32be e3cddaa25d34ee2d8913928a83ba84a6
  putInt64be 09aa4c056de57be21620d27897d208ea
  putInt8 d06471372832049d93d0fef2fc8a01ec
  putLazyByteString 4a99ba57fa154c137555480f27264a18
  putShortByteString 9bf890f55762c4b134ee538730e702e0
  putStringUtf8 4b353d7c00866f1bb944462048c46a01
  putWord16be 7508a2270fa2c26f98e254c37d1dfc61
  putWord32be ac14e443f7452d818ad967783d0fa95f
  putWord64be 1b098990848e869d8d393c2a0c4da3bc
  putWord8 6c466f4379a8c4619f31202e0de6d2e1
import  -/  bytestring-0.10.8.2:Data.ByteString fd8cecf441c361eb2e989315be3b33ab
import  -/  bytestring-0.10.8.2:Data.ByteString.Builder.Prim df6982fa8a1c31e8bcec356183079c3d
import  -/  bytestring-0.10.8.2:Data.ByteString.Builder.Prim.Binary d198c82cbd8c160f8823d6fde3b93d8d
import  -/  bytestring-0.10.8.2:Data.ByteString.Builder.Prim.Internal 1ffdda2c5f817eb76558f7c66a488760
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal f8067c0775041a7adb8f53745475ed88
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 17bbfcb66adfeb54389d1792c4493dec
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy.Internal 2323410d496b66c6a46f7c8b483c1856
import  -/  bytestring-0.10.8.2:Data.ByteString.Short 7c399948e78702d9afb0f2f6efd35ad8
import  -/  bytestring-0.10.8.2:Data.ByteString.Short.Internal 296a2bf5bb25707ba11f82bb7c333e3e
import  -/  containers-0.6.0.1:Data.IntMap 0cf4d6e0467c4884f881fae7fdcee115
import  -/  containers-0.6.0.1:Data.IntMap.Internal 0cc6c18218bbe15fff6e49afbfe53b71
import  -/  containers-0.6.0.1:Data.IntSet 39b107de93745c45dd3e30f25da8f277
import  -/  containers-0.6.0.1:Data.IntSet.Internal a060cadebf2f0cc6f442e45b47df857e
import  -/  containers-0.6.0.1:Data.Map bdd2edbbfdb7899380a68fd7777a8f2a
import  -/  containers-0.6.0.1:Data.Map.Internal fbf8d1bed47de2b3b48e26c406ee4050
import  -/  containers-0.6.0.1:Data.Sequence db362526c9cc13b0a1a384ea5fbafe5d
import  -/  containers-0.6.0.1:Data.Sequence.Internal 6953cc199cc039525498f5a92e91f10a
import  -/  containers-0.6.0.1:Data.Set afd5ab7eac5658da18a4fffc2d1b683c
import  -/  containers-0.6.0.1:Data.Set.Internal 37b649a82b62d074262d73d43076b8c8
import  -/  containers-0.6.0.1:Data.Tree 4be9cc9e1ce8361101a9d5475a546a83
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
addDependentFile "/home/schernichkin/.stack/programs/x86_64-linux/ghc-8.6.5/lib/ghc-8.6.5/include/ghcversion.h" 43db44f9bb88490c2fa995e5f5ec33f2
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-2.4.0.1/build/autogen/cabal_macros.h" e6f1f8b8bb6582b087a6681896f0d62a
addDependentFile "/usr/include/stdc-predef.h" b11071912035aeb144fe65c00cfe2168
1e74ce561dbc2ee6a089ac9a6874bdf4
  $dmget ::
    (Data.Binary.Class.Binary t, GHC.Generics.Generic t,
     Data.Binary.Class.GBinaryGet (GHC.Generics.Rep t)) =>
    Data.Binary.Get.Internal.Get t
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,U(A,C(U))><C(C(S)),1*C1(C1(U))><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, False)
                (\ @ t
                   ($dBinary :: Data.Binary.Class.Binary t)
                   ($dGeneric :: GHC.Generics.Generic t)
                   ($dGBinaryGet :: Data.Binary.Class.GBinaryGet
                                      (GHC.Generics.Rep t)) ->
                 let {
                   f :: GHC.Generics.Rep t GHC.Types.Any -> t
                   = GHC.Generics.to @ t $dGeneric @ GHC.Types.Any
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success t r) ->
                  ($dGBinaryGet
                     `cast`
                   (Data.Binary.Class.N:GBinaryGet[0] <*>_N <GHC.Generics.Rep t>_N)
                     @ GHC.Types.Any)
                    `cast`
                  (Data.Binary.Get.Internal.N:Get[0]
                       <GHC.Generics.Rep t GHC.Types.Any>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Generics.Rep t GHC.Types.Any) ->
                     ks i' (f a1)))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0] <t>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $dmput ::
    (Data.Binary.Class.Binary t, GHC.Generics.Generic t,
     Data.Binary.Class.GBinaryPut (GHC.Generics.Rep t)) =>
    t -> Data.Binary.Put.Put
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*C1(U),A)><C(S),1*C1(U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ t
                   ($dBinary :: Data.Binary.Class.Binary t)
                   ($dGeneric :: GHC.Generics.Generic t)
                   ($dGBinaryPut :: Data.Binary.Class.GBinaryPut
                                      (GHC.Generics.Rep t)) ->
                 let {
                   g :: t -> GHC.Generics.Rep t GHC.Types.Any
                   = GHC.Generics.from @ t $dGeneric @ GHC.Types.Any
                 } in
                 \ (x :: t) ->
                 $dGBinaryPut
                   `cast`
                 (Data.Binary.Class.N:GBinaryPut[0] <*>_N <GHC.Generics.Rep t>_N)
                   @ GHC.Types.Any
                   (g x)) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $dmputList ::
    Data.Binary.Class.Binary t => [t] -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Data.Binary.Class.defaultPutList -}
8989a476b5da85529da2133e035c76d5
  $dmputList1 ::
    Data.ByteString.Builder.Prim.Internal.BoundedPrim GHC.Int.Int64
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.ByteString.Builder.Prim.Internal.BP
                   @ GHC.Int.Int64
                   8#
                   Data.Binary.Class.$dmputList2
                     `cast`
                   (<GHC.Int.Int64>_R
                    ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R))) -}
d471fe17dae6521a51b38a644f587eac
  $dmputList2 ::
    GHC.Int.Int64
    -> GHC.Ptr.Ptr GHC.Word.Word8
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Ptr.Ptr GHC.Word.Word8 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: GHC.Int.Int64)
                   (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case op of wild { GHC.Ptr.Ptr a ->
                 case x of wild1 { GHC.Int.I64# x# ->
                 let {
                   w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                 } in
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        0#
                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                        s of s2 { DEFAULT ->
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# a 1#)
                        0#
                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                        s2 of s1 { DEFAULT ->
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# a 2#)
                        0#
                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                        s1 of s3 { DEFAULT ->
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# a 3#)
                        0#
                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                        s3 of s4 { DEFAULT ->
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# a 4#)
                        0#
                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                        s4 of s5 { DEFAULT ->
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# a 5#)
                        0#
                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                        s5 of s6 { DEFAULT ->
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# a 6#)
                        0#
                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                        s6 of s7 { DEFAULT ->
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# a 7#)
                        0#
                        (GHC.Prim.narrow8Word# w1)
                        s7 of s8 { DEFAULT ->
                 (# s8,
                    GHC.Ptr.Ptr
                      @ GHC.Word.Word8
                      (GHC.Prim.plusAddr# a 8#) #) } } } } } } } } } }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary() :: Data.Binary.Class.Binary ()
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ()
                  Data.Binary.Class.$fBinary()_$cput
                  Data.Binary.Class.$fBinary()1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <()>_R))
                  Data.Binary.Class.$fBinary()_$cputList -}
aace7071421db3bc6829f3258554b25d
  $fBinary()1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success () r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(C(S)),1*C1(C1(U))>,
     Unfolding: InlineRule (2, True, True)
                (\ @ r
                   (s :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success () r) ->
                 ks s GHC.Tuple.()) -}
96b7a72955d512a5e35f6a5d61fdf357
  $fBinary()_$cput :: () -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ()) ->
                 case ds of wild { () -> Data.Binary.Put.$fMonoidPutM_$cmempty }) -}
7ee90efe3e078b3ed3336b1435718b61
  $fBinary()_$cputList :: [()] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.Binary.Class.Binary (a, b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b).
                  @ (a, b)
                  (Data.Binary.Class.$fBinary(,)_$cput @ a @ b v v1)
                  (Data.Binary.Class.$fBinary(,)_$cget @ a @ b v v1)
                  (Data.Binary.Class.$fBinary(,)_$cputList @ a @ b v v1) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.Binary.Get.Internal.Get (a, b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success (a, b) r) ->
                  ds `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                           @ (a, b)
                           (a1, a2))
                          `cast`
                        (Data.Binary.Get.Internal.N:Get[0] <(a, b)>_R)
                          @ r
                          i'1
                          ks)))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0] <(a, b)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    (a, b) -> Data.Binary.Put.Put
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ b
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   (ds :: (a, b)) ->
                 case ds of wild { (,) a1 b1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case (Data.Binary.Class.put @ b $dBinary1 b1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    [(a, b)] -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c) =>
    Data.Binary.Class.Binary (a, b, c)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b)
                      (v2 :: Data.Binary.Class.Binary c).
                  @ (a, b, c)
                  (Data.Binary.Class.$fBinary(,,)_$cput @ a @ b @ c v v1 v2)
                  (Data.Binary.Class.$fBinary(,,)_$cget @ a @ b @ c v v1 v2)
                  (Data.Binary.Class.$fBinary(,,)_$cputList @ a @ b @ c v v1 v2) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c) =>
    Data.Binary.Get.Internal.Get (a, b, c)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ b
                   @ c
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   m3 :: Data.Binary.Get.Internal.Get c
                   = Data.Binary.Class.get @ c $dBinary2
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success (a, b, c) r) ->
                  ds `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        m3 `cast` (Data.Binary.Get.Internal.N:Get[0] <c>_R)
                          @ r
                          i'1
                          (\ (i'2 :: Data.ByteString.Internal.ByteString) (a3 :: c) ->
                           (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                              @ (a, b, c)
                              (a1, a2, a3))
                             `cast`
                           (Data.Binary.Get.Internal.N:Get[0] <(a, b, c)>_R)
                             @ r
                             i'2
                             ks))))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0] <(a, b, c)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c) =>
    (a, b, c) -> Data.Binary.Put.Put
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   @ c
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   (ds :: (a, b, c)) ->
                 case ds of wild { (,,) a1 b1 c1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case Data.Binary.Put.$WPairS
                               @ ()
                               GHC.Tuple.()
                               (Data.ByteString.Builder.Internal.append
                                  (case (Data.Binary.Class.put @ b $dBinary1 b1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                   w })
                                  (case (Data.Binary.Class.put @ c $dBinary2 c1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                   w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c) =>
    [(a, b, c)] -> Data.Binary.Put.Put
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d) =>
    Data.Binary.Class.Binary (a, b, c, d)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b)
                      (v2 :: Data.Binary.Class.Binary c)
                      (v3 :: Data.Binary.Class.Binary d).
                  @ (a, b, c, d)
                  (Data.Binary.Class.$fBinary(,,,)_$cput @ a @ b @ c @ d v v1 v2 v3)
                  (Data.Binary.Class.$fBinary(,,,)_$cget @ a @ b @ c @ d v v1 v2 v3)
                  (Data.Binary.Class.$fBinary(,,,)_$cputList
                     @ a
                     @ b
                     @ c
                     @ d
                     v
                     v1
                     v2
                     v3) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d) =>
    Data.Binary.Get.Internal.Get (a, b, c, d)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   m3 :: Data.Binary.Get.Internal.Get c
                   = Data.Binary.Class.get @ c $dBinary2
                 } in
                 let {
                   m4 :: Data.Binary.Get.Internal.Get d
                   = Data.Binary.Class.get @ d $dBinary3
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success (a, b, c, d) r) ->
                  ds `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        m3 `cast` (Data.Binary.Get.Internal.N:Get[0] <c>_R)
                          @ r
                          i'1
                          (\ (i'2 :: Data.ByteString.Internal.ByteString) (a3 :: c) ->
                           m4 `cast` (Data.Binary.Get.Internal.N:Get[0] <d>_R)
                             @ r
                             i'2
                             (\ (i'3 :: Data.ByteString.Internal.ByteString) (a4 :: d) ->
                              (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                 @ (a, b, c, d)
                                 (a1, a2, a3, a4))
                                `cast`
                              (Data.Binary.Get.Internal.N:Get[0] <(a, b, c, d)>_R)
                                @ r
                                i'3
                                ks)))))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0] <(a, b, c, d)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d) =>
    (a, b, c, d) -> Data.Binary.Put.Put
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (5, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   (ds :: (a, b, c, d)) ->
                 case ds of wild { (,,,) a1 b1 c1 d1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case Data.Binary.Put.$WPairS
                               @ ()
                               GHC.Tuple.()
                               (Data.ByteString.Builder.Internal.append
                                  (case (Data.Binary.Class.put @ b $dBinary1 b1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                   w })
                                  (case Data.Binary.Put.$WPairS
                                          @ ()
                                          GHC.Tuple.()
                                          (Data.ByteString.Builder.Internal.append
                                             (case (Data.Binary.Class.put @ c $dBinary2 c1)
                                                     `cast`
                                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                              w })
                                             (case (Data.Binary.Class.put @ d $dBinary3 d1)
                                                     `cast`
                                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                              w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                   w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d) =>
    [(a, b, c, d)] -> Data.Binary.Put.Put
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e) =>
    Data.Binary.Class.Binary (a, b, c, d, e)
  DFunId
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b)
                      (v2 :: Data.Binary.Class.Binary c)
                      (v3 :: Data.Binary.Class.Binary d)
                      (v4 :: Data.Binary.Class.Binary e).
                  @ (a, b, c, d, e)
                  (Data.Binary.Class.$fBinary(,,,,)_$cput
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     v
                     v1
                     v2
                     v3
                     v4)
                  (Data.Binary.Class.$fBinary(,,,,)_$cget
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     v
                     v1
                     v2
                     v3
                     v4)
                  (Data.Binary.Class.$fBinary(,,,,)_$cputList
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     v
                     v1
                     v2
                     v3
                     v4) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e) =>
    Data.Binary.Get.Internal.Get (a, b, c, d, e)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (5, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   m3 :: Data.Binary.Get.Internal.Get c
                   = Data.Binary.Class.get @ c $dBinary2
                 } in
                 let {
                   m4 :: Data.Binary.Get.Internal.Get d
                   = Data.Binary.Class.get @ d $dBinary3
                 } in
                 let {
                   m5 :: Data.Binary.Get.Internal.Get e
                   = Data.Binary.Class.get @ e $dBinary4
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success (a, b, c, d, e) r) ->
                  ds `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        m3 `cast` (Data.Binary.Get.Internal.N:Get[0] <c>_R)
                          @ r
                          i'1
                          (\ (i'2 :: Data.ByteString.Internal.ByteString) (a3 :: c) ->
                           m4 `cast` (Data.Binary.Get.Internal.N:Get[0] <d>_R)
                             @ r
                             i'2
                             (\ (i'3 :: Data.ByteString.Internal.ByteString) (a4 :: d) ->
                              m5 `cast` (Data.Binary.Get.Internal.N:Get[0] <e>_R)
                                @ r
                                i'3
                                (\ (i'4 :: Data.ByteString.Internal.ByteString) (a5 :: e) ->
                                 (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                    @ (a, b, c, d, e)
                                    (a1, a2, a3, a4, a5))
                                   `cast`
                                 (Data.Binary.Get.Internal.N:Get[0] <(a, b, c, d, e)>_R)
                                   @ r
                                   i'4
                                   ks))))))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0] <(a, b, c, d, e)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e) =>
    (a, b, c, d, e) -> Data.Binary.Put.Put
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (6, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   (ds :: (a, b, c, d, e)) ->
                 case ds of wild { (,,,,) a1 b1 c1 d1 e1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case Data.Binary.Put.$WPairS
                               @ ()
                               GHC.Tuple.()
                               (Data.ByteString.Builder.Internal.append
                                  (case (Data.Binary.Class.put @ b $dBinary1 b1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                   w })
                                  (case Data.Binary.Put.$WPairS
                                          @ ()
                                          GHC.Tuple.()
                                          (Data.ByteString.Builder.Internal.append
                                             (case (Data.Binary.Class.put @ c $dBinary2 c1)
                                                     `cast`
                                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                              w })
                                             (case Data.Binary.Put.$WPairS
                                                     @ ()
                                                     GHC.Tuple.()
                                                     (Data.ByteString.Builder.Internal.append
                                                        (case (Data.Binary.Class.put
                                                                 @ d
                                                                 $dBinary3
                                                                 d1)
                                                                `cast`
                                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                         w })
                                                        (case (Data.Binary.Class.put
                                                                 @ e
                                                                 $dBinary4
                                                                 e1)
                                                                `cast`
                                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                         w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                              w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                   w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e) =>
    [(a, b, c, d, e)] -> Data.Binary.Put.Put
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f) =>
    Data.Binary.Class.Binary (a, b, c, d, e, f)
  DFunId
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b)
                      (v2 :: Data.Binary.Class.Binary c)
                      (v3 :: Data.Binary.Class.Binary d)
                      (v4 :: Data.Binary.Class.Binary e)
                      (v5 :: Data.Binary.Class.Binary f).
                  @ (a, b, c, d, e, f)
                  (Data.Binary.Class.$fBinary(,,,,,)_$cput
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     v
                     v1
                     v2
                     v3
                     v4
                     v5)
                  (Data.Binary.Class.$fBinary(,,,,,)_$cget
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     v
                     v1
                     v2
                     v3
                     v4
                     v5)
                  (Data.Binary.Class.$fBinary(,,,,,)_$cputList
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     v
                     v1
                     v2
                     v3
                     v4
                     v5) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f) =>
    Data.Binary.Get.Internal.Get (a, b, c, d, e, f)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (6, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get c
                   = Data.Binary.Class.get @ c $dBinary2
                 } in
                 let {
                   m3 :: Data.Binary.Get.Internal.Get d
                   = Data.Binary.Class.get @ d $dBinary3
                 } in
                 let {
                   m4 :: Data.Binary.Get.Internal.Get e
                   = Data.Binary.Class.get @ e $dBinary4
                 } in
                 let {
                   m5 :: Data.Binary.Get.Internal.Get f
                   = Data.Binary.Class.get @ f $dBinary5
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   ds1 :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success (a, b, c, d, e, f) r) ->
                  let {
                    ks1 :: Data.Binary.Get.Internal.Success (a, (b, c, d, e, f)) r
                      {- Arity: 2 -}
                    = \ (i' :: Data.ByteString.Internal.ByteString)
                        (a1 :: (a, (b, c, d, e, f))) ->
                      case a1 of wild { (,) a2 ds2 ->
                      case ds2 of wild1 { (,,,,) b1 c1 d1 e1 f1 ->
                      (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                         @ (a, b, c, d, e, f)
                         (a2, b1, c1, d1, e1, f1))
                        `cast`
                      (Data.Binary.Get.Internal.N:Get[0] <(a, b, c, d, e, f)>_R)
                        @ r
                        i'
                        ks } }
                  } in
                  ds1 `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     let {
                       ks2 :: Data.Binary.Get.Internal.Success (b, c, d, e, f) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, c, d, e, f)) ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (a, (b, c, d, e, f))
                            (a1, a2))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0] <(a, (b, c, d, e, f))>_R)
                           @ r
                           i'1
                           ks1
                     } in
                     ds `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <c>_R)
                          @ r
                          i'1
                          (\ (i'2 :: Data.ByteString.Internal.ByteString) (a3 :: c) ->
                           m3 `cast` (Data.Binary.Get.Internal.N:Get[0] <d>_R)
                             @ r
                             i'2
                             (\ (i'3 :: Data.ByteString.Internal.ByteString) (a4 :: d) ->
                              m4 `cast` (Data.Binary.Get.Internal.N:Get[0] <e>_R)
                                @ r
                                i'3
                                (\ (i'4 :: Data.ByteString.Internal.ByteString) (a5 :: e) ->
                                 m5 `cast` (Data.Binary.Get.Internal.N:Get[0] <f>_R)
                                   @ r
                                   i'4
                                   (\ (i'5 :: Data.ByteString.Internal.ByteString) (a6 :: f) ->
                                    (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                       @ (b, c, d, e, f)
                                       (a2, a3, a4, a5, a6))
                                      `cast`
                                    (Data.Binary.Get.Internal.N:Get[0] <(b, c, d, e, f)>_R)
                                      @ r
                                      i'5
                                      ks2)))))))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <(a, b, c, d, e, f)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f) =>
    (a, b, c, d, e, f) -> Data.Binary.Put.Put
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U,U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (7, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   (ds :: (a, b, c, d, e, f)) ->
                 case ds of wild { (,,,,,) a1 b1 c1 d1 e1 f1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case Data.Binary.Put.$WPairS
                               @ ()
                               GHC.Tuple.()
                               (Data.ByteString.Builder.Internal.append
                                  (case (Data.Binary.Class.put @ b $dBinary1 b1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                   w })
                                  (case Data.Binary.Put.$WPairS
                                          @ ()
                                          GHC.Tuple.()
                                          (Data.ByteString.Builder.Internal.append
                                             (case (Data.Binary.Class.put @ c $dBinary2 c1)
                                                     `cast`
                                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                              w })
                                             (case Data.Binary.Put.$WPairS
                                                     @ ()
                                                     GHC.Tuple.()
                                                     (Data.ByteString.Builder.Internal.append
                                                        (case (Data.Binary.Class.put
                                                                 @ d
                                                                 $dBinary3
                                                                 d1)
                                                                `cast`
                                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                         w })
                                                        (case Data.Binary.Put.$WPairS
                                                                @ ()
                                                                GHC.Tuple.()
                                                                (Data.ByteString.Builder.Internal.append
                                                                   (case (Data.Binary.Class.put
                                                                            @ e
                                                                            $dBinary4
                                                                            e1)
                                                                           `cast`
                                                                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                    w })
                                                                   (case (Data.Binary.Class.put
                                                                            @ f
                                                                            $dBinary5
                                                                            f1)
                                                                           `cast`
                                                                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                    w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                         w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                              w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                   w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f) =>
    [(a, b, c, d, e, f)] -> Data.Binary.Put.Put
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g) =>
    Data.Binary.Class.Binary (a, b, c, d, e, f, g)
  DFunId
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b)
                      (v2 :: Data.Binary.Class.Binary c)
                      (v3 :: Data.Binary.Class.Binary d)
                      (v4 :: Data.Binary.Class.Binary e)
                      (v5 :: Data.Binary.Class.Binary f)
                      (v6 :: Data.Binary.Class.Binary g).
                  @ (a, b, c, d, e, f, g)
                  (Data.Binary.Class.$fBinary(,,,,,,)_$cput
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6)
                  (Data.Binary.Class.$fBinary(,,,,,,)_$cget
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6)
                  (Data.Binary.Class.$fBinary(,,,,,,)_$cputList
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g) =>
    Data.Binary.Get.Internal.Get (a, b, c, d, e, f, g)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (7, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   ($dBinary6 :: Data.Binary.Class.Binary g) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get d
                   = Data.Binary.Class.get @ d $dBinary3
                 } in
                 let {
                   m3 :: Data.Binary.Get.Internal.Get e
                   = Data.Binary.Class.get @ e $dBinary4
                 } in
                 let {
                   m4 :: Data.Binary.Get.Internal.Get f
                   = Data.Binary.Class.get @ f $dBinary5
                 } in
                 let {
                   m5 :: Data.Binary.Get.Internal.Get g
                   = Data.Binary.Class.get @ g $dBinary6
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get c
                   = Data.Binary.Class.get @ c $dBinary2
                 } in
                 let {
                   ds1 :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   ds2 :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success (a, b, c, d, e, f, g) r) ->
                  let {
                    ks1 :: Data.Binary.Get.Internal.Success (a, (b, c, d, e, f, g)) r
                      {- Arity: 2 -}
                    = \ (i' :: Data.ByteString.Internal.ByteString)
                        (a1 :: (a, (b, c, d, e, f, g))) ->
                      case a1 of wild { (,) a2 ds3 ->
                      case ds3 of wild1 { (,,,,,) b1 c1 d1 e1 f1 g1 ->
                      (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                         @ (a, b, c, d, e, f, g)
                         (a2, b1, c1, d1, e1, f1, g1))
                        `cast`
                      (Data.Binary.Get.Internal.N:Get[0] <(a, b, c, d, e, f, g)>_R)
                        @ r
                        i'
                        ks } }
                  } in
                  ds2 `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     let {
                       ks2 :: Data.Binary.Get.Internal.Success (b, c, d, e, f, g) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, c, d, e, f, g)) ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (a, (b, c, d, e, f, g))
                            (a1, a2))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0] <(a, (b, c, d, e, f, g))>_R)
                           @ r
                           i'1
                           ks1
                     } in
                     let {
                       ks3 :: Data.Binary.Get.Internal.Success (b, (c, d, e, f, g)) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, (c, d, e, f, g))) ->
                         case a2 of wild { (,) a3 ds3 ->
                         case ds3 of wild1 { (,,,,) b1 c1 d1 e1 f1 ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (b, c, d, e, f, g)
                            (a3, b1, c1, d1, e1, f1))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0] <(b, c, d, e, f, g)>_R)
                           @ r
                           i'1
                           ks2 } }
                     } in
                     ds1 `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        let {
                          ks4 :: Data.Binary.Get.Internal.Success (c, d, e, f, g) r
                            {- Arity: 2 -}
                          = \ (i'2 :: Data.ByteString.Internal.ByteString)
                              (a3 :: (c, d, e, f, g)) ->
                            (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                               @ (b, (c, d, e, f, g))
                               (a2, a3))
                              `cast`
                            (Data.Binary.Get.Internal.N:Get[0] <(b, (c, d, e, f, g))>_R)
                              @ r
                              i'2
                              ks3
                        } in
                        ds `cast` (Data.Binary.Get.Internal.N:Get[0] <c>_R)
                          @ r
                          i'1
                          (\ (i'2 :: Data.ByteString.Internal.ByteString) (a3 :: c) ->
                           m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <d>_R)
                             @ r
                             i'2
                             (\ (i'3 :: Data.ByteString.Internal.ByteString) (a4 :: d) ->
                              m3 `cast` (Data.Binary.Get.Internal.N:Get[0] <e>_R)
                                @ r
                                i'3
                                (\ (i'4 :: Data.ByteString.Internal.ByteString) (a5 :: e) ->
                                 m4 `cast` (Data.Binary.Get.Internal.N:Get[0] <f>_R)
                                   @ r
                                   i'4
                                   (\ (i'5 :: Data.ByteString.Internal.ByteString) (a6 :: f) ->
                                    m5 `cast` (Data.Binary.Get.Internal.N:Get[0] <g>_R)
                                      @ r
                                      i'5
                                      (\ (i'6 :: Data.ByteString.Internal.ByteString) (a7 :: g) ->
                                       (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                          @ (c, d, e, f, g)
                                          (a3, a4, a5, a6, a7))
                                         `cast`
                                       (Data.Binary.Get.Internal.N:Get[0] <(c, d, e, f, g)>_R)
                                         @ r
                                         i'6
                                         ks4))))))))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <(a, b, c, d, e, f, g)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g) =>
    (a, b, c, d, e, f, g) -> Data.Binary.Put.Put
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U,U,U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (8, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   ($dBinary6 :: Data.Binary.Class.Binary g)
                   (ds :: (a, b, c, d, e, f, g)) ->
                 case ds of wild { (,,,,,,) a1 b1 c1 d1 e1 f1 g1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case Data.Binary.Put.$WPairS
                               @ ()
                               GHC.Tuple.()
                               (Data.ByteString.Builder.Internal.append
                                  (case (Data.Binary.Class.put @ b $dBinary1 b1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                   w })
                                  (case Data.Binary.Put.$WPairS
                                          @ ()
                                          GHC.Tuple.()
                                          (Data.ByteString.Builder.Internal.append
                                             (case (Data.Binary.Class.put @ c $dBinary2 c1)
                                                     `cast`
                                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                              w })
                                             (case Data.Binary.Put.$WPairS
                                                     @ ()
                                                     GHC.Tuple.()
                                                     (Data.ByteString.Builder.Internal.append
                                                        (case (Data.Binary.Class.put
                                                                 @ d
                                                                 $dBinary3
                                                                 d1)
                                                                `cast`
                                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                         w })
                                                        (case Data.Binary.Put.$WPairS
                                                                @ ()
                                                                GHC.Tuple.()
                                                                (Data.ByteString.Builder.Internal.append
                                                                   (case (Data.Binary.Class.put
                                                                            @ e
                                                                            $dBinary4
                                                                            e1)
                                                                           `cast`
                                                                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                    w })
                                                                   (case Data.Binary.Put.$WPairS
                                                                           @ ()
                                                                           GHC.Tuple.()
                                                                           (Data.ByteString.Builder.Internal.append
                                                                              (case (Data.Binary.Class.put
                                                                                       @ f
                                                                                       $dBinary5
                                                                                       f1)
                                                                                      `cast`
                                                                                    (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                               w })
                                                                              (case (Data.Binary.Class.put
                                                                                       @ g
                                                                                       $dBinary6
                                                                                       g1)
                                                                                      `cast`
                                                                                    (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                               w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                    w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                         w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                              w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                   w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g) =>
    [(a, b, c, d, e, f, g)] -> Data.Binary.Put.Put
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h) =>
    Data.Binary.Class.Binary (a, b, c, d, e, f, g, h)
  DFunId
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b)
                      (v2 :: Data.Binary.Class.Binary c)
                      (v3 :: Data.Binary.Class.Binary d)
                      (v4 :: Data.Binary.Class.Binary e)
                      (v5 :: Data.Binary.Class.Binary f)
                      (v6 :: Data.Binary.Class.Binary g)
                      (v7 :: Data.Binary.Class.Binary h).
                  @ (a, b, c, d, e, f, g, h)
                  (Data.Binary.Class.$fBinary(,,,,,,,)_$cput
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7)
                  (Data.Binary.Class.$fBinary(,,,,,,,)_$cget
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7)
                  (Data.Binary.Class.$fBinary(,,,,,,,)_$cputList
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h) =>
    Data.Binary.Get.Internal.Get (a, b, c, d, e, f, g, h)
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (8, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   ($dBinary6 :: Data.Binary.Class.Binary g)
                   ($dBinary7 :: Data.Binary.Class.Binary h) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get e
                   = Data.Binary.Class.get @ e $dBinary4
                 } in
                 let {
                   m3 :: Data.Binary.Get.Internal.Get f
                   = Data.Binary.Class.get @ f $dBinary5
                 } in
                 let {
                   m4 :: Data.Binary.Get.Internal.Get g
                   = Data.Binary.Class.get @ g $dBinary6
                 } in
                 let {
                   m5 :: Data.Binary.Get.Internal.Get h
                   = Data.Binary.Class.get @ h $dBinary7
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get d
                   = Data.Binary.Class.get @ d $dBinary3
                 } in
                 let {
                   ds1 :: Data.Binary.Get.Internal.Get c
                   = Data.Binary.Class.get @ c $dBinary2
                 } in
                 let {
                   ds2 :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   ds3 :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success
                             (a, b, c, d, e, f, g, h) r) ->
                  let {
                    ks1 :: Data.Binary.Get.Internal.Success
                             (a, (b, c, d, e, f, g, h)) r
                      {- Arity: 2 -}
                    = \ (i' :: Data.ByteString.Internal.ByteString)
                        (a1 :: (a, (b, c, d, e, f, g, h))) ->
                      case a1 of wild { (,) a2 ds4 ->
                      case ds4 of wild1 { (,,,,,,) b1 c1 d1 e1 f1 g1 h1 ->
                      (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                         @ (a, b, c, d, e, f, g, h)
                         (a2, b1, c1, d1, e1, f1, g1, h1))
                        `cast`
                      (Data.Binary.Get.Internal.N:Get[0] <(a, b, c, d, e, f, g, h)>_R)
                        @ r
                        i'
                        ks } }
                  } in
                  ds3 `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     let {
                       ks2 :: Data.Binary.Get.Internal.Success (b, c, d, e, f, g, h) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, c, d, e, f, g, h)) ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (a, (b, c, d, e, f, g, h))
                            (a1, a2))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0] <(a, (b, c, d, e, f, g, h))>_R)
                           @ r
                           i'1
                           ks1
                     } in
                     let {
                       ks3 :: Data.Binary.Get.Internal.Success (b, (c, d, e, f, g, h)) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, (c, d, e, f, g, h))) ->
                         case a2 of wild { (,) a3 ds4 ->
                         case ds4 of wild1 { (,,,,,) b1 c1 d1 e1 f1 g1 ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (b, c, d, e, f, g, h)
                            (a3, b1, c1, d1, e1, f1, g1))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0] <(b, c, d, e, f, g, h)>_R)
                           @ r
                           i'1
                           ks2 } }
                     } in
                     ds2 `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        let {
                          ks4 :: Data.Binary.Get.Internal.Success (c, d, e, f, g, h) r
                            {- Arity: 2 -}
                          = \ (i'2 :: Data.ByteString.Internal.ByteString)
                              (a3 :: (c, d, e, f, g, h)) ->
                            (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                               @ (b, (c, d, e, f, g, h))
                               (a2, a3))
                              `cast`
                            (Data.Binary.Get.Internal.N:Get[0] <(b, (c, d, e, f, g, h))>_R)
                              @ r
                              i'2
                              ks3
                        } in
                        let {
                          ks5 :: Data.Binary.Get.Internal.Success (c, (d, e, f, g, h)) r
                            {- Arity: 2 -}
                          = \ (i'2 :: Data.ByteString.Internal.ByteString)
                              (a3 :: (c, (d, e, f, g, h))) ->
                            case a3 of wild { (,) a4 ds4 ->
                            case ds4 of wild1 { (,,,,) b1 c1 d1 e1 f1 ->
                            (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                               @ (c, d, e, f, g, h)
                               (a4, b1, c1, d1, e1, f1))
                              `cast`
                            (Data.Binary.Get.Internal.N:Get[0] <(c, d, e, f, g, h)>_R)
                              @ r
                              i'2
                              ks4 } }
                        } in
                        ds1 `cast` (Data.Binary.Get.Internal.N:Get[0] <c>_R)
                          @ r
                          i'1
                          (\ (i'2 :: Data.ByteString.Internal.ByteString) (a3 :: c) ->
                           let {
                             ks6 :: Data.Binary.Get.Internal.Success (d, e, f, g, h) r
                               {- Arity: 2 -}
                             = \ (i'3 :: Data.ByteString.Internal.ByteString)
                                 (a4 :: (d, e, f, g, h)) ->
                               (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                  @ (c, (d, e, f, g, h))
                                  (a3, a4))
                                 `cast`
                               (Data.Binary.Get.Internal.N:Get[0] <(c, (d, e, f, g, h))>_R)
                                 @ r
                                 i'3
                                 ks5
                           } in
                           ds `cast` (Data.Binary.Get.Internal.N:Get[0] <d>_R)
                             @ r
                             i'2
                             (\ (i'3 :: Data.ByteString.Internal.ByteString) (a4 :: d) ->
                              m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <e>_R)
                                @ r
                                i'3
                                (\ (i'4 :: Data.ByteString.Internal.ByteString) (a5 :: e) ->
                                 m3 `cast` (Data.Binary.Get.Internal.N:Get[0] <f>_R)
                                   @ r
                                   i'4
                                   (\ (i'5 :: Data.ByteString.Internal.ByteString) (a6 :: f) ->
                                    m4 `cast` (Data.Binary.Get.Internal.N:Get[0] <g>_R)
                                      @ r
                                      i'5
                                      (\ (i'6 :: Data.ByteString.Internal.ByteString) (a7 :: g) ->
                                       m5 `cast` (Data.Binary.Get.Internal.N:Get[0] <h>_R)
                                         @ r
                                         i'6
                                         (\ (i'7 :: Data.ByteString.Internal.ByteString)
                                            (a8 :: h) ->
                                          (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                             @ (d, e, f, g, h)
                                             (a4, a5, a6, a7, a8))
                                            `cast`
                                          (Data.Binary.Get.Internal.N:Get[0] <(d, e, f, g, h)>_R)
                                            @ r
                                            i'7
                                            ks6)))))))))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <(a, b, c, d, e, f, g, h)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h) =>
    (a, b, c, d, e, f, g, h) -> Data.Binary.Put.Put
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U,U,U,U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (9, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   ($dBinary6 :: Data.Binary.Class.Binary g)
                   ($dBinary7 :: Data.Binary.Class.Binary h)
                   (ds :: (a, b, c, d, e, f, g, h)) ->
                 case ds of wild { (,,,,,,,) a1 b1 c1 d1 e1 f1 g1 h1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case Data.Binary.Put.$WPairS
                               @ ()
                               GHC.Tuple.()
                               (Data.ByteString.Builder.Internal.append
                                  (case (Data.Binary.Class.put @ b $dBinary1 b1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                   w })
                                  (case Data.Binary.Put.$WPairS
                                          @ ()
                                          GHC.Tuple.()
                                          (Data.ByteString.Builder.Internal.append
                                             (case (Data.Binary.Class.put @ c $dBinary2 c1)
                                                     `cast`
                                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                              w })
                                             (case Data.Binary.Put.$WPairS
                                                     @ ()
                                                     GHC.Tuple.()
                                                     (Data.ByteString.Builder.Internal.append
                                                        (case (Data.Binary.Class.put
                                                                 @ d
                                                                 $dBinary3
                                                                 d1)
                                                                `cast`
                                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                         w })
                                                        (case Data.Binary.Put.$WPairS
                                                                @ ()
                                                                GHC.Tuple.()
                                                                (Data.ByteString.Builder.Internal.append
                                                                   (case (Data.Binary.Class.put
                                                                            @ e
                                                                            $dBinary4
                                                                            e1)
                                                                           `cast`
                                                                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                    w })
                                                                   (case Data.Binary.Put.$WPairS
                                                                           @ ()
                                                                           GHC.Tuple.()
                                                                           (Data.ByteString.Builder.Internal.append
                                                                              (case (Data.Binary.Class.put
                                                                                       @ f
                                                                                       $dBinary5
                                                                                       f1)
                                                                                      `cast`
                                                                                    (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                               w })
                                                                              (case Data.Binary.Put.$WPairS
                                                                                      @ ()
                                                                                      GHC.Tuple.()
                                                                                      (Data.ByteString.Builder.Internal.append
                                                                                         (case (Data.Binary.Class.put
                                                                                                  @ g
                                                                                                  $dBinary6
                                                                                                  g1)
                                                                                                 `cast`
                                                                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                                          w })
                                                                                         (case (Data.Binary.Class.put
                                                                                                  @ h
                                                                                                  $dBinary7
                                                                                                  h1)
                                                                                                 `cast`
                                                                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                                          w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                               w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                    w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                         w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                              w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                   w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h) =>
    [(a, b, c, d, e, f, g, h)] -> Data.Binary.Put.Put
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h,
     Data.Binary.Class.Binary i) =>
    Data.Binary.Class.Binary (a, b, c, d, e, f, g, h, i)
  DFunId
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b)
                      (v2 :: Data.Binary.Class.Binary c)
                      (v3 :: Data.Binary.Class.Binary d)
                      (v4 :: Data.Binary.Class.Binary e)
                      (v5 :: Data.Binary.Class.Binary f)
                      (v6 :: Data.Binary.Class.Binary g)
                      (v7 :: Data.Binary.Class.Binary h)
                      (v8 :: Data.Binary.Class.Binary i).
                  @ (a, b, c, d, e, f, g, h, i)
                  (Data.Binary.Class.$fBinary(,,,,,,,,)_$cput
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8)
                  (Data.Binary.Class.$fBinary(,,,,,,,,)_$cget
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8)
                  (Data.Binary.Class.$fBinary(,,,,,,,,)_$cputList
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h,
     Data.Binary.Class.Binary i) =>
    Data.Binary.Get.Internal.Get (a, b, c, d, e, f, g, h, i)
  {- Arity: 11, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (9, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   ($dBinary6 :: Data.Binary.Class.Binary g)
                   ($dBinary7 :: Data.Binary.Class.Binary h)
                   ($dBinary8 :: Data.Binary.Class.Binary i) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get f
                   = Data.Binary.Class.get @ f $dBinary5
                 } in
                 let {
                   m3 :: Data.Binary.Get.Internal.Get g
                   = Data.Binary.Class.get @ g $dBinary6
                 } in
                 let {
                   m4 :: Data.Binary.Get.Internal.Get h
                   = Data.Binary.Class.get @ h $dBinary7
                 } in
                 let {
                   m5 :: Data.Binary.Get.Internal.Get i
                   = Data.Binary.Class.get @ i $dBinary8
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get e
                   = Data.Binary.Class.get @ e $dBinary4
                 } in
                 let {
                   ds1 :: Data.Binary.Get.Internal.Get d
                   = Data.Binary.Class.get @ d $dBinary3
                 } in
                 let {
                   ds2 :: Data.Binary.Get.Internal.Get c
                   = Data.Binary.Class.get @ c $dBinary2
                 } in
                 let {
                   ds3 :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   ds4 :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i1 :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success
                             (a, b, c, d, e, f, g, h, i) r) ->
                  let {
                    ks1 :: Data.Binary.Get.Internal.Success
                             (a, (b, c, d, e, f, g, h, i)) r
                      {- Arity: 2 -}
                    = \ (i' :: Data.ByteString.Internal.ByteString)
                        (a1 :: (a, (b, c, d, e, f, g, h, i))) ->
                      case a1 of wild { (,) a2 ds5 ->
                      case ds5 of wild1 { (,,,,,,,) b1 c1 d1 e1 f1 g1 h1 i2 ->
                      (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                         @ (a, b, c, d, e, f, g, h, i)
                         (a2, b1, c1, d1, e1, f1, g1, h1, i2))
                        `cast`
                      (Data.Binary.Get.Internal.N:Get[0] <(a, b, c, d, e, f, g, h, i)>_R)
                        @ r
                        i'
                        ks } }
                  } in
                  ds4 `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i1
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     let {
                       ks2 :: Data.Binary.Get.Internal.Success (b, c, d, e, f, g, h, i) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, c, d, e, f, g, h, i)) ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (a, (b, c, d, e, f, g, h, i))
                            (a1, a2))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0]
                              <(a, (b, c, d, e, f, g, h, i))>_R)
                           @ r
                           i'1
                           ks1
                     } in
                     let {
                       ks3 :: Data.Binary.Get.Internal.Success
                                (b, (c, d, e, f, g, h, i)) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, (c, d, e, f, g, h, i))) ->
                         case a2 of wild { (,) a3 ds5 ->
                         case ds5 of wild1 { (,,,,,,) b1 c1 d1 e1 f1 g1 h1 ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (b, c, d, e, f, g, h, i)
                            (a3, b1, c1, d1, e1, f1, g1, h1))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0] <(b, c, d, e, f, g, h, i)>_R)
                           @ r
                           i'1
                           ks2 } }
                     } in
                     ds3 `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        let {
                          ks4 :: Data.Binary.Get.Internal.Success (c, d, e, f, g, h, i) r
                            {- Arity: 2 -}
                          = \ (i'2 :: Data.ByteString.Internal.ByteString)
                              (a3 :: (c, d, e, f, g, h, i)) ->
                            (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                               @ (b, (c, d, e, f, g, h, i))
                               (a2, a3))
                              `cast`
                            (Data.Binary.Get.Internal.N:Get[0] <(b, (c, d, e, f, g, h, i))>_R)
                              @ r
                              i'2
                              ks3
                        } in
                        let {
                          ks5 :: Data.Binary.Get.Internal.Success (c, (d, e, f, g, h, i)) r
                            {- Arity: 2 -}
                          = \ (i'2 :: Data.ByteString.Internal.ByteString)
                              (a3 :: (c, (d, e, f, g, h, i))) ->
                            case a3 of wild { (,) a4 ds5 ->
                            case ds5 of wild1 { (,,,,,) b1 c1 d1 e1 f1 g1 ->
                            (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                               @ (c, d, e, f, g, h, i)
                               (a4, b1, c1, d1, e1, f1, g1))
                              `cast`
                            (Data.Binary.Get.Internal.N:Get[0] <(c, d, e, f, g, h, i)>_R)
                              @ r
                              i'2
                              ks4 } }
                        } in
                        ds2 `cast` (Data.Binary.Get.Internal.N:Get[0] <c>_R)
                          @ r
                          i'1
                          (\ (i'2 :: Data.ByteString.Internal.ByteString) (a3 :: c) ->
                           let {
                             ks6 :: Data.Binary.Get.Internal.Success (d, e, f, g, h, i) r
                               {- Arity: 2 -}
                             = \ (i'3 :: Data.ByteString.Internal.ByteString)
                                 (a4 :: (d, e, f, g, h, i)) ->
                               (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                  @ (c, (d, e, f, g, h, i))
                                  (a3, a4))
                                 `cast`
                               (Data.Binary.Get.Internal.N:Get[0] <(c, (d, e, f, g, h, i))>_R)
                                 @ r
                                 i'3
                                 ks5
                           } in
                           let {
                             ks7 :: Data.Binary.Get.Internal.Success (d, (e, f, g, h, i)) r
                               {- Arity: 2 -}
                             = \ (i'3 :: Data.ByteString.Internal.ByteString)
                                 (a4 :: (d, (e, f, g, h, i))) ->
                               case a4 of wild { (,) a5 ds5 ->
                               case ds5 of wild1 { (,,,,) b1 c1 d1 e1 f1 ->
                               (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                  @ (d, e, f, g, h, i)
                                  (a5, b1, c1, d1, e1, f1))
                                 `cast`
                               (Data.Binary.Get.Internal.N:Get[0] <(d, e, f, g, h, i)>_R)
                                 @ r
                                 i'3
                                 ks6 } }
                           } in
                           ds1 `cast` (Data.Binary.Get.Internal.N:Get[0] <d>_R)
                             @ r
                             i'2
                             (\ (i'3 :: Data.ByteString.Internal.ByteString) (a4 :: d) ->
                              let {
                                ks8 :: Data.Binary.Get.Internal.Success (e, f, g, h, i) r
                                  {- Arity: 2 -}
                                = \ (i'4 :: Data.ByteString.Internal.ByteString)
                                    (a5 :: (e, f, g, h, i)) ->
                                  (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                     @ (d, (e, f, g, h, i))
                                     (a4, a5))
                                    `cast`
                                  (Data.Binary.Get.Internal.N:Get[0] <(d, (e, f, g, h, i))>_R)
                                    @ r
                                    i'4
                                    ks7
                              } in
                              ds `cast` (Data.Binary.Get.Internal.N:Get[0] <e>_R)
                                @ r
                                i'3
                                (\ (i'4 :: Data.ByteString.Internal.ByteString) (a5 :: e) ->
                                 m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <f>_R)
                                   @ r
                                   i'4
                                   (\ (i'5 :: Data.ByteString.Internal.ByteString) (a6 :: f) ->
                                    m3 `cast` (Data.Binary.Get.Internal.N:Get[0] <g>_R)
                                      @ r
                                      i'5
                                      (\ (i'6 :: Data.ByteString.Internal.ByteString) (a7 :: g) ->
                                       m4 `cast` (Data.Binary.Get.Internal.N:Get[0] <h>_R)
                                         @ r
                                         i'6
                                         (\ (i'7 :: Data.ByteString.Internal.ByteString)
                                            (a8 :: h) ->
                                          m5 `cast` (Data.Binary.Get.Internal.N:Get[0] <i>_R)
                                            @ r
                                            i'7
                                            (\ (i'8 :: Data.ByteString.Internal.ByteString)
                                               (a9 :: i) ->
                                             (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                                @ (e, f, g, h, i)
                                                (a5, a6, a7, a8, a9))
                                               `cast`
                                             (Data.Binary.Get.Internal.N:Get[0] <(e, f, g, h, i)>_R)
                                               @ r
                                               i'8
                                               ks8))))))))))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <(a, b, c, d, e, f, g, h, i)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h,
     Data.Binary.Class.Binary i) =>
    (a, b, c, d, e, f, g, h, i) -> Data.Binary.Put.Put
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U,U,U,U,U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (10, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   ($dBinary6 :: Data.Binary.Class.Binary g)
                   ($dBinary7 :: Data.Binary.Class.Binary h)
                   ($dBinary8 :: Data.Binary.Class.Binary i)
                   (ds :: (a, b, c, d, e, f, g, h, i)) ->
                 case ds of wild { (,,,,,,,,) a1 b1 c1 d1 e1 f1 g1 h1 i1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case Data.Binary.Put.$WPairS
                               @ ()
                               GHC.Tuple.()
                               (Data.ByteString.Builder.Internal.append
                                  (case (Data.Binary.Class.put @ b $dBinary1 b1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                   w })
                                  (case Data.Binary.Put.$WPairS
                                          @ ()
                                          GHC.Tuple.()
                                          (Data.ByteString.Builder.Internal.append
                                             (case (Data.Binary.Class.put @ c $dBinary2 c1)
                                                     `cast`
                                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                              w })
                                             (case Data.Binary.Put.$WPairS
                                                     @ ()
                                                     GHC.Tuple.()
                                                     (Data.ByteString.Builder.Internal.append
                                                        (case (Data.Binary.Class.put
                                                                 @ d
                                                                 $dBinary3
                                                                 d1)
                                                                `cast`
                                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                         w })
                                                        (case Data.Binary.Put.$WPairS
                                                                @ ()
                                                                GHC.Tuple.()
                                                                (Data.ByteString.Builder.Internal.append
                                                                   (case (Data.Binary.Class.put
                                                                            @ e
                                                                            $dBinary4
                                                                            e1)
                                                                           `cast`
                                                                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                    w })
                                                                   (case Data.Binary.Put.$WPairS
                                                                           @ ()
                                                                           GHC.Tuple.()
                                                                           (Data.ByteString.Builder.Internal.append
                                                                              (case (Data.Binary.Class.put
                                                                                       @ f
                                                                                       $dBinary5
                                                                                       f1)
                                                                                      `cast`
                                                                                    (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                               w })
                                                                              (case Data.Binary.Put.$WPairS
                                                                                      @ ()
                                                                                      GHC.Tuple.()
                                                                                      (Data.ByteString.Builder.Internal.append
                                                                                         (case (Data.Binary.Class.put
                                                                                                  @ g
                                                                                                  $dBinary6
                                                                                                  g1)
                                                                                                 `cast`
                                                                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                                          w })
                                                                                         (case Data.Binary.Put.$WPairS
                                                                                                 @ ()
                                                                                                 GHC.Tuple.()
                                                                                                 (Data.ByteString.Builder.Internal.append
                                                                                                    (case (Data.Binary.Class.put
                                                                                                             @ h
                                                                                                             $dBinary7
                                                                                                             h1)
                                                                                                            `cast`
                                                                                                          (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                                                     w })
                                                                                                    (case (Data.Binary.Class.put
                                                                                                             @ i
                                                                                                             $dBinary8
                                                                                                             i1)
                                                                                                            `cast`
                                                                                                          (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                                                     w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                                          w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                               w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                    w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                         w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                              w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                   w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h,
     Data.Binary.Class.Binary i) =>
    [(a, b, c, d, e, f, g, h, i)] -> Data.Binary.Put.Put
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,,,) ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h,
     Data.Binary.Class.Binary i, Data.Binary.Class.Binary j) =>
    Data.Binary.Class.Binary (a, b, c, d, e, f, g, h, i, j)
  DFunId
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b)
                      (v2 :: Data.Binary.Class.Binary c)
                      (v3 :: Data.Binary.Class.Binary d)
                      (v4 :: Data.Binary.Class.Binary e)
                      (v5 :: Data.Binary.Class.Binary f)
                      (v6 :: Data.Binary.Class.Binary g)
                      (v7 :: Data.Binary.Class.Binary h)
                      (v8 :: Data.Binary.Class.Binary i)
                      (v9 :: Data.Binary.Class.Binary j).
                  @ (a, b, c, d, e, f, g, h, i, j)
                  (Data.Binary.Class.$fBinary(,,,,,,,,,)_$cput
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8
                     v9)
                  (Data.Binary.Class.$fBinary(,,,,,,,,,)_$cget
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8
                     v9)
                  (Data.Binary.Class.$fBinary(,,,,,,,,,)_$cputList
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     v
                     v1
                     v2
                     v3
                     v4
                     v5
                     v6
                     v7
                     v8
                     v9) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,,,)_$cget ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h,
     Data.Binary.Class.Binary i, Data.Binary.Class.Binary j) =>
    Data.Binary.Get.Internal.Get (a, b, c, d, e, f, g, h, i, j)
  {- Arity: 12, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (10, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   ($dBinary6 :: Data.Binary.Class.Binary g)
                   ($dBinary7 :: Data.Binary.Class.Binary h)
                   ($dBinary8 :: Data.Binary.Class.Binary i)
                   ($dBinary9 :: Data.Binary.Class.Binary j) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get g
                   = Data.Binary.Class.get @ g $dBinary6
                 } in
                 let {
                   m3 :: Data.Binary.Get.Internal.Get h
                   = Data.Binary.Class.get @ h $dBinary7
                 } in
                 let {
                   m4 :: Data.Binary.Get.Internal.Get i
                   = Data.Binary.Class.get @ i $dBinary8
                 } in
                 let {
                   m5 :: Data.Binary.Get.Internal.Get j
                   = Data.Binary.Class.get @ j $dBinary9
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get f
                   = Data.Binary.Class.get @ f $dBinary5
                 } in
                 let {
                   ds1 :: Data.Binary.Get.Internal.Get e
                   = Data.Binary.Class.get @ e $dBinary4
                 } in
                 let {
                   ds2 :: Data.Binary.Get.Internal.Get d
                   = Data.Binary.Class.get @ d $dBinary3
                 } in
                 let {
                   ds3 :: Data.Binary.Get.Internal.Get c
                   = Data.Binary.Class.get @ c $dBinary2
                 } in
                 let {
                   ds4 :: Data.Binary.Get.Internal.Get b
                   = Data.Binary.Class.get @ b $dBinary1
                 } in
                 let {
                   ds5 :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i1 :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success
                             (a, b, c, d, e, f, g, h, i, j) r) ->
                  let {
                    ks1 :: Data.Binary.Get.Internal.Success
                             (a, (b, c, d, e, f, g, h, i, j)) r
                      {- Arity: 2 -}
                    = \ (i' :: Data.ByteString.Internal.ByteString)
                        (a1 :: (a, (b, c, d, e, f, g, h, i, j))) ->
                      case a1 of wild { (,) a2 ds6 ->
                      case ds6 of wild1 { (,,,,,,,,) b1 c1 d1 e1 f1 g1 h1 i2 j1 ->
                      (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                         @ (a, b, c, d, e, f, g, h, i, j)
                         (a2, b1, c1, d1, e1, f1, g1, h1, i2, j1))
                        `cast`
                      (Data.Binary.Get.Internal.N:Get[0]
                           <(a, b, c, d, e, f, g, h, i, j)>_R)
                        @ r
                        i'
                        ks } }
                  } in
                  ds5 `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i1
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     let {
                       ks2 :: Data.Binary.Get.Internal.Success
                                (b, c, d, e, f, g, h, i, j) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, c, d, e, f, g, h, i, j)) ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (a, (b, c, d, e, f, g, h, i, j))
                            (a1, a2))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0]
                              <(a, (b, c, d, e, f, g, h, i, j))>_R)
                           @ r
                           i'1
                           ks1
                     } in
                     let {
                       ks3 :: Data.Binary.Get.Internal.Success
                                (b, (c, d, e, f, g, h, i, j)) r
                         {- Arity: 2 -}
                       = \ (i'1 :: Data.ByteString.Internal.ByteString)
                           (a2 :: (b, (c, d, e, f, g, h, i, j))) ->
                         case a2 of wild { (,) a3 ds6 ->
                         case ds6 of wild1 { (,,,,,,,) b1 c1 d1 e1 f1 g1 h1 i2 ->
                         (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                            @ (b, c, d, e, f, g, h, i, j)
                            (a3, b1, c1, d1, e1, f1, g1, h1, i2))
                           `cast`
                         (Data.Binary.Get.Internal.N:Get[0] <(b, c, d, e, f, g, h, i, j)>_R)
                           @ r
                           i'1
                           ks2 } }
                     } in
                     ds4 `cast` (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                        let {
                          ks4 :: Data.Binary.Get.Internal.Success (c, d, e, f, g, h, i, j) r
                            {- Arity: 2 -}
                          = \ (i'2 :: Data.ByteString.Internal.ByteString)
                              (a3 :: (c, d, e, f, g, h, i, j)) ->
                            (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                               @ (b, (c, d, e, f, g, h, i, j))
                               (a2, a3))
                              `cast`
                            (Data.Binary.Get.Internal.N:Get[0]
                                 <(b, (c, d, e, f, g, h, i, j))>_R)
                              @ r
                              i'2
                              ks3
                        } in
                        let {
                          ks5 :: Data.Binary.Get.Internal.Success
                                   (c, (d, e, f, g, h, i, j)) r
                            {- Arity: 2 -}
                          = \ (i'2 :: Data.ByteString.Internal.ByteString)
                              (a3 :: (c, (d, e, f, g, h, i, j))) ->
                            case a3 of wild { (,) a4 ds6 ->
                            case ds6 of wild1 { (,,,,,,) b1 c1 d1 e1 f1 g1 h1 ->
                            (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                               @ (c, d, e, f, g, h, i, j)
                               (a4, b1, c1, d1, e1, f1, g1, h1))
                              `cast`
                            (Data.Binary.Get.Internal.N:Get[0] <(c, d, e, f, g, h, i, j)>_R)
                              @ r
                              i'2
                              ks4 } }
                        } in
                        ds3 `cast` (Data.Binary.Get.Internal.N:Get[0] <c>_R)
                          @ r
                          i'1
                          (\ (i'2 :: Data.ByteString.Internal.ByteString) (a3 :: c) ->
                           let {
                             ks6 :: Data.Binary.Get.Internal.Success (d, e, f, g, h, i, j) r
                               {- Arity: 2 -}
                             = \ (i'3 :: Data.ByteString.Internal.ByteString)
                                 (a4 :: (d, e, f, g, h, i, j)) ->
                               (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                  @ (c, (d, e, f, g, h, i, j))
                                  (a3, a4))
                                 `cast`
                               (Data.Binary.Get.Internal.N:Get[0] <(c, (d, e, f, g, h, i, j))>_R)
                                 @ r
                                 i'3
                                 ks5
                           } in
                           let {
                             ks7 :: Data.Binary.Get.Internal.Success (d, (e, f, g, h, i, j)) r
                               {- Arity: 2 -}
                             = \ (i'3 :: Data.ByteString.Internal.ByteString)
                                 (a4 :: (d, (e, f, g, h, i, j))) ->
                               case a4 of wild { (,) a5 ds6 ->
                               case ds6 of wild1 { (,,,,,) b1 c1 d1 e1 f1 g1 ->
                               (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                  @ (d, e, f, g, h, i, j)
                                  (a5, b1, c1, d1, e1, f1, g1))
                                 `cast`
                               (Data.Binary.Get.Internal.N:Get[0] <(d, e, f, g, h, i, j)>_R)
                                 @ r
                                 i'3
                                 ks6 } }
                           } in
                           ds2 `cast` (Data.Binary.Get.Internal.N:Get[0] <d>_R)
                             @ r
                             i'2
                             (\ (i'3 :: Data.ByteString.Internal.ByteString) (a4 :: d) ->
                              let {
                                ks8 :: Data.Binary.Get.Internal.Success (e, f, g, h, i, j) r
                                  {- Arity: 2 -}
                                = \ (i'4 :: Data.ByteString.Internal.ByteString)
                                    (a5 :: (e, f, g, h, i, j)) ->
                                  (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                     @ (d, (e, f, g, h, i, j))
                                     (a4, a5))
                                    `cast`
                                  (Data.Binary.Get.Internal.N:Get[0] <(d, (e, f, g, h, i, j))>_R)
                                    @ r
                                    i'4
                                    ks7
                              } in
                              let {
                                ks9 :: Data.Binary.Get.Internal.Success (e, (f, g, h, i, j)) r
                                  {- Arity: 2 -}
                                = \ (i'4 :: Data.ByteString.Internal.ByteString)
                                    (a5 :: (e, (f, g, h, i, j))) ->
                                  case a5 of wild { (,) a6 ds6 ->
                                  case ds6 of wild1 { (,,,,) b1 c1 d1 e1 f1 ->
                                  (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                     @ (e, f, g, h, i, j)
                                     (a6, b1, c1, d1, e1, f1))
                                    `cast`
                                  (Data.Binary.Get.Internal.N:Get[0] <(e, f, g, h, i, j)>_R)
                                    @ r
                                    i'4
                                    ks8 } }
                              } in
                              ds1 `cast` (Data.Binary.Get.Internal.N:Get[0] <e>_R)
                                @ r
                                i'3
                                (\ (i'4 :: Data.ByteString.Internal.ByteString) (a5 :: e) ->
                                 let {
                                   ks10 :: Data.Binary.Get.Internal.Success (f, g, h, i, j) r
                                     {- Arity: 2 -}
                                   = \ (i'5 :: Data.ByteString.Internal.ByteString)
                                       (a6 :: (f, g, h, i, j)) ->
                                     (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                        @ (e, (f, g, h, i, j))
                                        (a5, a6))
                                       `cast`
                                     (Data.Binary.Get.Internal.N:Get[0] <(e, (f, g, h, i, j))>_R)
                                       @ r
                                       i'5
                                       ks9
                                 } in
                                 ds `cast` (Data.Binary.Get.Internal.N:Get[0] <f>_R)
                                   @ r
                                   i'4
                                   (\ (i'5 :: Data.ByteString.Internal.ByteString) (a6 :: f) ->
                                    m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <g>_R)
                                      @ r
                                      i'5
                                      (\ (i'6 :: Data.ByteString.Internal.ByteString) (a7 :: g) ->
                                       m3 `cast` (Data.Binary.Get.Internal.N:Get[0] <h>_R)
                                         @ r
                                         i'6
                                         (\ (i'7 :: Data.ByteString.Internal.ByteString)
                                            (a8 :: h) ->
                                          m4 `cast` (Data.Binary.Get.Internal.N:Get[0] <i>_R)
                                            @ r
                                            i'7
                                            (\ (i'8 :: Data.ByteString.Internal.ByteString)
                                               (a9 :: i) ->
                                             m5 `cast` (Data.Binary.Get.Internal.N:Get[0] <j>_R)
                                               @ r
                                               i'8
                                               (\ (i'9 :: Data.ByteString.Internal.ByteString)
                                                  (a10 :: j) ->
                                                (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                                   @ (f, g, h, i, j)
                                                   (a6, a7, a8, a9, a10))
                                                  `cast`
                                                (Data.Binary.Get.Internal.N:Get[0]
                                                     <(f, g, h, i, j)>_R)
                                                  @ r
                                                  i'9
                                                  ks10)))))))))))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <(a, b, c, d, e, f, g, h, i, j)>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,,,)_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h,
     Data.Binary.Class.Binary i, Data.Binary.Class.Binary j) =>
    (a, b, c, d, e, f, g, h, i, j) -> Data.Binary.Put.Put
  {- Arity: 11, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (11, False, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   ($dBinary :: Data.Binary.Class.Binary a)
                   ($dBinary1 :: Data.Binary.Class.Binary b)
                   ($dBinary2 :: Data.Binary.Class.Binary c)
                   ($dBinary3 :: Data.Binary.Class.Binary d)
                   ($dBinary4 :: Data.Binary.Class.Binary e)
                   ($dBinary5 :: Data.Binary.Class.Binary f)
                   ($dBinary6 :: Data.Binary.Class.Binary g)
                   ($dBinary7 :: Data.Binary.Class.Binary h)
                   ($dBinary8 :: Data.Binary.Class.Binary i)
                   ($dBinary9 :: Data.Binary.Class.Binary j)
                   (ds :: (a, b, c, d, e, f, g, h, i, j)) ->
                 case ds of wild { (,,,,,,,,,) a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary a1)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case Data.Binary.Put.$WPairS
                               @ ()
                               GHC.Tuple.()
                               (Data.ByteString.Builder.Internal.append
                                  (case (Data.Binary.Class.put @ b $dBinary1 b1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                   w })
                                  (case Data.Binary.Put.$WPairS
                                          @ ()
                                          GHC.Tuple.()
                                          (Data.ByteString.Builder.Internal.append
                                             (case (Data.Binary.Class.put @ c $dBinary2 c1)
                                                     `cast`
                                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                              w })
                                             (case Data.Binary.Put.$WPairS
                                                     @ ()
                                                     GHC.Tuple.()
                                                     (Data.ByteString.Builder.Internal.append
                                                        (case (Data.Binary.Class.put
                                                                 @ d
                                                                 $dBinary3
                                                                 d1)
                                                                `cast`
                                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                         w })
                                                        (case Data.Binary.Put.$WPairS
                                                                @ ()
                                                                GHC.Tuple.()
                                                                (Data.ByteString.Builder.Internal.append
                                                                   (case (Data.Binary.Class.put
                                                                            @ e
                                                                            $dBinary4
                                                                            e1)
                                                                           `cast`
                                                                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                    w })
                                                                   (case Data.Binary.Put.$WPairS
                                                                           @ ()
                                                                           GHC.Tuple.()
                                                                           (Data.ByteString.Builder.Internal.append
                                                                              (case (Data.Binary.Class.put
                                                                                       @ f
                                                                                       $dBinary5
                                                                                       f1)
                                                                                      `cast`
                                                                                    (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                               w })
                                                                              (case Data.Binary.Put.$WPairS
                                                                                      @ ()
                                                                                      GHC.Tuple.()
                                                                                      (Data.ByteString.Builder.Internal.append
                                                                                         (case (Data.Binary.Class.put
                                                                                                  @ g
                                                                                                  $dBinary6
                                                                                                  g1)
                                                                                                 `cast`
                                                                                               (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                                          w })
                                                                                         (case Data.Binary.Put.$WPairS
                                                                                                 @ ()
                                                                                                 GHC.Tuple.()
                                                                                                 (Data.ByteString.Builder.Internal.append
                                                                                                    (case (Data.Binary.Class.put
                                                                                                             @ h
                                                                                                             $dBinary7
                                                                                                             h1)
                                                                                                            `cast`
                                                                                                          (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                                                     w })
                                                                                                    (case Data.Binary.Put.$WPairS
                                                                                                            @ ()
                                                                                                            GHC.Tuple.()
                                                                                                            (Data.ByteString.Builder.Internal.append
                                                                                                               (case (Data.Binary.Class.put
                                                                                                                        @ i
                                                                                                                        $dBinary8
                                                                                                                        i1)
                                                                                                                       `cast`
                                                                                                                     (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                                                                                                                w })
                                                                                                               (case (Data.Binary.Class.put
                                                                                                                        @ j
                                                                                                                        $dBinary9
                                                                                                                        j1)
                                                                                                                       `cast`
                                                                                                                     (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                                                                w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                                                     w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                                          w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                               w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                                    w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                                         w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                              w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                   w' })) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary(,,,,,,,,,)_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b,
     Data.Binary.Class.Binary c, Data.Binary.Class.Binary d,
     Data.Binary.Class.Binary e, Data.Binary.Class.Binary f,
     Data.Binary.Class.Binary g, Data.Binary.Class.Binary h,
     Data.Binary.Class.Binary i, Data.Binary.Class.Binary j) =>
    [(a, b, c, d, e, f, g, h, i, j)] -> Data.Binary.Put.Put
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryAll :: Data.Binary.Class.Binary Data.Semigroup.Internal.All
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Semigroup.Internal.All
                  Data.Binary.Class.$fBinaryAll12
                    `cast`
                  (Sym (Data.Semigroup.Internal.N:All[0])
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryAll1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.Internal.All>_R))
                  Data.Binary.Class.$fBinaryAll_$cputList -}
e4f518e0f680d78a42d7f9c422b62a11
  $fBinaryAll1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Data.Semigroup.Internal.All r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (i :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success
                            Data.Semigroup.Internal.All r) ->
                 Data.Binary.Class.$fBinaryAll2
                   @ r
                   i
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Bool)[OneShot] ->
                    ks i' a1 `cast` (Sym (Data.Semigroup.Internal.N:All[0])))) -}
c167d3c174e9272df5efb75e273c7720
  $fBinaryAll10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" to Bool"#) -}
b34fc0c91dd672831d269373d0b860f7
  $fBinaryAll11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Could not map value "#) -}
7cc93e4c53a9aa9eb0c2ef7938d7e526
  $fBinaryAll12 :: GHC.Types.Bool -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Bool) ->
                 case Data.Binary.Class.$w$cput w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
b9aa1961563c7b6c5eea5644eac85ca2
  $fBinaryAll2 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.Bool r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.Bool r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
4e2eb12c6e9de095dd58defb1e80e068
  $fBinaryAll3 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r
                   dt
                   Data.Binary.Class.$fBinaryAll4 }) -}
55eae41036b3c8eec272a91bdfdfe52a
  $fBinaryAll4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Binary.Class.$fBinaryAll5) -}
c81fd4ffa6e62815adcc0a9bfa9abe24
  $fBinaryAll5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
bd95351b7465dd4761acff71c5207af7
  $fBinaryAll6 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
d2f0fa75b75ff0f38c067fa02bae369c
  $fBinaryAll7 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str3 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str3 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt3 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt3))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
734bde011b97eee4481dfd35fd427430
  $fBinaryAll8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
d138be1e1e1be3f585957b52c13c144c
  $fBinaryAll9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Binary.Class.$fBinaryAll10) -}
d95ece9d060c08eb8862b4e40b835e70
  $fBinaryAll_$cputList ::
    [Data.Semigroup.Internal.All] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryAlt ::
    forall k (f :: k -> *) (a :: k).
    Data.Binary.Class.Binary (f a) =>
    Data.Binary.Class.Binary (Data.Semigroup.Internal.Alt f a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ f :: k -> *
                      @ a :: k
                      (v :: Data.Binary.Class.Binary (f a)).
                  @ (Data.Semigroup.Internal.Alt f a)
                  (\ (eta :: Data.Semigroup.Internal.Alt f a) ->
                   Data.Binary.Class.put
                     @ (f a)
                     v
                     eta `cast` (Data.Semigroup.Internal.N:Alt[0] <k>_N <f>_R <a>_N))
                  (Data.Binary.Class.$fBinaryAlt1 @ k @ f @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.Internal.Alt f a>_R))
                  (Data.Binary.Class.$fBinaryAlt_$cputList @ k @ f @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryAlt1 ::
    forall k (f :: k -> *) (a :: k) r.
    Data.Binary.Class.Binary (f a) =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Data.Semigroup.Internal.Alt f a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ f :: k -> *
                   @ a :: k
                   ($dBinary :: Data.Binary.Class.Binary (f a))
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.Internal.Alt f a) r) ->
                 (Data.Binary.Class.get @ (f a) $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <f a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: f a) ->
                    eta1
                      i'
                      a1
                        `cast`
                      (Sym (Data.Semigroup.Internal.N:Alt[0] <k>_N <f>_R) <a>_N))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryAlt_$cputList ::
    forall k (f :: k -> *) (a :: k).
    Data.Binary.Class.Binary (f a) =>
    [Data.Semigroup.Internal.Alt f a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryAny :: Data.Binary.Class.Binary Data.Semigroup.Internal.Any
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Semigroup.Internal.Any
                  Data.Binary.Class.$fBinaryAll12
                    `cast`
                  (Sym (Data.Semigroup.Internal.N:Any[0])
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryAny1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.Internal.Any>_R))
                  Data.Binary.Class.$fBinaryAny_$cputList -}
8c4f63e18cf6114a639b438ad1c0d7a7
  $fBinaryAny1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Data.Semigroup.Internal.Any r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (i :: Data.ByteString.Internal.ByteString)
                   (ks :: Data.Binary.Get.Internal.Success
                            Data.Semigroup.Internal.Any r) ->
                 Data.Binary.Class.$fBinaryAll2
                   @ r
                   i
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Bool)[OneShot] ->
                    ks i' a1 `cast` (Sym (Data.Semigroup.Internal.N:Any[0])))) -}
f043cec8ac09fa1e6b2c87843cb4e2dd
  $fBinaryAny_$cputList ::
    [Data.Semigroup.Internal.Any] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryArg ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.Binary.Class.Binary (Data.Semigroup.Arg a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b).
                  @ (Data.Semigroup.Arg a b)
                  (Data.Binary.Class.$fBinaryArg_$cput @ a @ b v v1)
                  (Data.Binary.Class.$fBinaryArg1 @ a @ b v v1)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.Arg a b>_R))
                  (Data.Binary.Class.$fBinaryArg_$cputList @ a @ b v v1) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryArg1 ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Semigroup.Arg a b) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: Data.Binary.Class.Binary b)
                   @ r
                   (w2 :: Data.ByteString.Internal.ByteString)
                   (w3 :: Data.Binary.Get.Internal.Success
                            (Data.Semigroup.Arg a b) r) ->
                 case w of ww { Data.Binary.Class.C:Binary ww1 ww2 ww3 ->
                 Data.Binary.Class.$w$cget1 @ a @ b ww2 w1 @ r w2 w3 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryArg_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.Semigroup.Arg a b -> Data.Binary.Put.Put
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(U))),A,A)><L,1*U(1*C1(U(A,C(U))),A,A)><S,1*U(U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: Data.Binary.Class.Binary b)
                   (w2 :: Data.Semigroup.Arg a b) ->
                 case w2 of ww { Data.Semigroup.Arg ww1 ww2 ->
                 (Data.Binary.Put.PairS
                    @ ()
                    GHC.Tuple.()
                    (\ @ r ->
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.put @ b w1 ww2)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.put @ a w ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w3 ->
                         w3 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) -> f (g x))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryArg_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    [Data.Semigroup.Arg a b] -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryArray ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e) =>
    Data.Binary.Class.Binary (GHC.Arr.Array i e)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(A,A,A,A,A,C(U(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ i
                      @ e
                      (v :: Data.Binary.Class.Binary i)
                      (v1 :: GHC.Arr.Ix i)
                      (v2 :: Data.Binary.Class.Binary e).
                  @ (GHC.Arr.Array i e)
                  (Data.Binary.Class.$fBinaryArray2 @ i @ e v v1 v2)
                    `cast`
                  (<GHC.Arr.Array i e>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  (Data.Binary.Class.$fBinaryArray1 @ i @ e v v1 v2)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Arr.Array i e>_R))
                  (Data.Binary.Class.$fBinaryArray_$cputList @ i @ e v v1 v2) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryArray1 ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e) =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (GHC.Arr.Array i e) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5,
     Strictness: <S(LC(C(S))L),1*U(A,C(C1(U)),A)><L,U(A,A,A,A,A,C(U(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ i
                   @ e
                   (w :: Data.Binary.Class.Binary i)
                   (w1 :: GHC.Arr.Ix i)
                   (w2 :: Data.Binary.Class.Binary e)
                   @ r
                   (w3 :: Data.ByteString.Internal.ByteString)
                   (w4 :: Data.Binary.Get.Internal.Success (GHC.Arr.Array i e) r) ->
                 case w of ww { Data.Binary.Class.C:Binary ww1 ww2 ww3 ->
                 Data.Binary.Class.$w$cget2 @ i @ e ww2 w1 w2 @ r w3 w4 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryArray2 ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e) =>
    GHC.Arr.Array i e -> Data.Binary.Put.PairS ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,1*U(A,A,A,A,A,1*C1(U(U)),A)><L,U(C(U(A,C(U))),A,A)><L,U(U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ i
                   @ e
                   (w :: Data.Binary.Class.Binary i)
                   (w1 :: GHC.Arr.Ix i)
                   (w2 :: Data.Binary.Class.Binary e)
                   (w3 :: GHC.Arr.Array i e) ->
                 case Data.Binary.Class.$w$cput1
                        @ i
                        @ e
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryArray_$cputList ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e) =>
    [GHC.Arr.Array i e] -> Data.Binary.Put.Put
  {- Arity: 3,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(A,A,A,A,A,C(U(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryBool :: Data.Binary.Class.Binary GHC.Types.Bool
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  Data.Binary.Class.$fBinaryAll12
                    `cast`
                  (<GHC.Types.Bool>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryAll2
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.Bool>_R))
                  Data.Binary.Class.$fBinaryBool_$cputList -}
a084306142cd331a64e0e177782ffd16
  $fBinaryBool_$cputList :: [GHC.Types.Bool] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryByteString ::
    Data.Binary.Class.Binary Data.ByteString.Lazy.Internal.ByteString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Lazy.Internal.ByteString
                  Data.Binary.Class.$fBinaryByteString3
                    `cast`
                  (<Data.ByteString.Lazy.Internal.ByteString>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryByteString1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.ByteString.Lazy.Internal.ByteString>_R))
                  Data.Binary.Class.$fBinaryByteString_$cputList -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryByteString0 ::
    Data.Binary.Class.Binary Data.ByteString.Internal.ByteString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  Data.Binary.Class.$fBinaryByteString5
                    `cast`
                  (<Data.ByteString.Internal.ByteString>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryByteString4
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.ByteString.Internal.ByteString>_R))
                  Data.Binary.Class.$fBinaryByteString0_$cputList -}
0b8fe93595e7ac6fafef3eed7293ffa8
  $fBinaryByteString0_$cputList ::
    [Data.ByteString.Internal.ByteString] -> Data.Binary.Put.Put
  {- Arity: 1 -}
6ad7828adcae3a17fb8b2ef6bb3ed4a5
  $fBinaryByteString1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         Data.ByteString.Lazy.Internal.ByteString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Data.ByteString.Lazy.Internal.ByteString r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget3 @ r ww1 ww2 ww3 ww4 w1 }) -}
65ac47518dd298a1868968de58f50001
  $fBinaryByteString2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
180ea178e6ebea5d0ef9e9ff57e2db5f
  $fBinaryByteString3 ::
    Data.ByteString.Lazy.Internal.ByteString
    -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Lazy.Internal.ByteString) ->
                 case Data.Binary.Class.$w$cput2 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
62be2e7cafb296a21be45f610d7c481a
  $fBinaryByteString4 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         Data.ByteString.Internal.ByteString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Data.ByteString.Internal.ByteString r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget4 @ r ww1 ww2 ww3 ww4 w1 }) -}
102572b9b0ad162b7a8ca9dc26c3ee80
  $fBinaryByteString5 ::
    Data.ByteString.Internal.ByteString -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Internal.ByteString) ->
                 case Data.Binary.Class.$w$cput3 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
419e87ee0acf5aa76da135d372a9dab4
  $fBinaryByteString_$cputList ::
    [Data.ByteString.Lazy.Internal.ByteString] -> Data.Binary.Put.Put
  {- Arity: 1 -}
7791e82d59ac81f2f93404773615b436
  $fBinaryByteString_$sgo1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> Data.ByteString.Lazy.Internal.ByteString
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><L,C(C1(U(U,U)))><S,1*U> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryChar :: Data.Binary.Class.Binary GHC.Types.Char
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  Data.Binary.Put.putCharUtf8
                  Data.Binary.Class.$fBinaryChar2
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.Char>_R))
                  Data.Binary.Class.$fBinaryChar1
                    `cast`
                  (<[GHC.Types.Char]>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
4bb14882e5790ebe4096521fb514a810
  $fBinaryChar1 :: [GHC.Types.Char] -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Char]) ->
                 case Data.Binary.Class.$w$cputList w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
d43cd719e7f6c7b26a8d283598f85c68
  $fBinaryChar2 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.Char r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.Char r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget6 @ r ww1 ww2 ww3 ww4 w1 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryComplex ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Complex.Complex a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Complex.Complex a)
                  (Data.Binary.Class.$fBinaryComplex_$cput @ a v)
                  (Data.Binary.Class.$fBinaryComplex_$cget @ a v)
                  (Data.Binary.Class.$fBinaryComplex_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryComplex_$cget ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Get.Internal.Get (Data.Complex.Complex a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dBinary :: Data.Binary.Class.Binary a) ->
                 let {
                   m2 :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 let {
                   ds :: Data.Binary.Get.Internal.Get a
                   = Data.Binary.Class.get @ a $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success
                             (Data.Complex.Complex a) r) ->
                  let {
                    ks1 :: Data.Binary.Get.Internal.Success (a, a) r {- Arity: 2 -}
                    = \ (i' :: Data.ByteString.Internal.ByteString) (a1 :: (a, a)) ->
                      ks
                        i'
                        (case a1 of wild { (,) r1 i1 -> Data.Complex.$W:+ @ a r1 i1 })
                  } in
                  ds `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     m2 `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                       @ r
                       i'
                       (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: a) ->
                        (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                           @ (a, a)
                           (a1, a2))
                          `cast`
                        (Data.Binary.Get.Internal.N:Get[0] <(a, a)>_R)
                          @ r
                          i'1
                          ks1)))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <Data.Complex.Complex a>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryComplex_$cput ::
    Data.Binary.Class.Binary a =>
    Data.Complex.Complex a -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><S(SS),1*U(U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   (ds :: Data.Complex.Complex a) ->
                 case ds of wild { Data.Complex.:+ r i ->
                 (Data.Binary.Put.$WPairS
                    @ ()
                    GHC.Tuple.()
                    (Data.ByteString.Builder.Internal.append
                       (case (Data.Binary.Class.put @ a $dBinary r)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w ->
                        w })
                       (case (Data.Binary.Class.put @ a $dBinary i)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                        w' })))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryComplex_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Complex.Complex a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryDouble :: Data.Binary.Class.Binary GHC.Types.Double
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Data.Binary.Class.$fBinaryDouble_$cput
                  Data.Binary.Class.$fBinaryDouble1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.Double>_R))
                  Data.Binary.Class.$fBinaryDouble_$cputList -}
155577f8a9be4727a697d1789e5ec312
  $fBinaryDouble1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.Double r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.Double r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget7 @ r ww1 ww2 ww3 ww4 w1 }) -}
19e62128c3d3edcc37f3a2248e2dc951
  $fBinaryDouble_$cput :: GHC.Types.Double -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S(S),1*U(U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Double) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 case Data.Binary.Class.$w$cput4 ww1 of ww2 { (#,#) ww3 ww4 ->
                 (Data.Binary.Put.PairS @ () ww3 ww4)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
9df3c6102a3f97188eb7f561b2685647
  $fBinaryDouble_$cputList ::
    [GHC.Types.Double] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryDual ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Semigroup.Internal.Dual a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Semigroup.Internal.Dual a)
                  (\ (eta :: Data.Semigroup.Internal.Dual a) ->
                   Data.Binary.Class.put
                     @ a
                     v
                     eta `cast` (Data.Semigroup.Internal.N:Dual[0] <a>_R))
                  (Data.Binary.Class.$fBinaryDual1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.Internal.Dual a>_R))
                  (Data.Binary.Class.$fBinaryDual_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryDual1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Data.Semigroup.Internal.Dual a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.Internal.Dual a) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1
                      i'
                      a1 `cast` (Sym (Data.Semigroup.Internal.N:Dual[0] <a>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryDual_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Semigroup.Internal.Dual a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryEither ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.Binary.Class.Binary (Data.Either.Either a b)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)><L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: Data.Binary.Class.Binary b).
                  @ (Data.Either.Either a b)
                  (Data.Binary.Class.$fBinaryEither_$cput @ a @ b v v1)
                  (Data.Binary.Class.$fBinaryEither1 @ a @ b v v1)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Either.Either a b>_R))
                  (Data.Binary.Class.$fBinaryEither_$cputList @ a @ b v v1) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryEither1 ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Either.Either a b) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: Data.Binary.Class.Binary b)
                   @ r
                   (w2 :: Data.ByteString.Internal.ByteString)
                   (w3 :: Data.Binary.Get.Internal.Success
                            (Data.Either.Either a b) r) ->
                 case w2 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget8
                   @ a
                   @ b
                   w
                   w1
                   @ r
                   ww1
                   ww2
                   ww3
                   ww4
                   w3 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryEither_$cput ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.Either.Either a b -> Data.Binary.Put.Put
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(C(C1(U(U,U)))))),A,A)><L,1*U(1*C1(U(A,C(C(C1(U(U,U)))))),A,A)><S,1*U>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: Data.Binary.Class.Binary b)
                   (w2 :: Data.Either.Either a b) ->
                 case Data.Binary.Class.$w$cput5
                        @ a
                        @ b
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryEither_$cputList ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    [Data.Either.Either a b] -> Data.Binary.Put.Put
  {- Arity: 2,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)><L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFingerprint ::
    Data.Binary.Class.Binary GHC.Fingerprint.Type.Fingerprint
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Fingerprint.Type.Fingerprint
                  Data.Binary.Class.$fBinaryFingerprint_$cput
                  Data.Binary.Class.$fBinaryFingerprint1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <GHC.Fingerprint.Type.Fingerprint>_R))
                  Data.Binary.Class.$fBinaryFingerprint_$cputList -}
61fe2d3054004c523b270bc2274e4ac1
  $fBinaryFingerprint1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         GHC.Fingerprint.Type.Fingerprint r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            GHC.Fingerprint.Type.Fingerprint r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget9 @ r ww1 ww2 ww3 ww4 w1 }) -}
23c65b81f84cb5fb3e984c3f0c21bcd6
  $fBinaryFingerprint_$cput ::
    GHC.Fingerprint.Type.Fingerprint -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Fingerprint.Type.Fingerprint) ->
                 case w of ww { GHC.Fingerprint.Type.Fingerprint ww1 ww2 ->
                 case Data.Binary.Class.$w$cput6 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
5f38d06b5f0375eb1731c4982ee8b5f7
  $fBinaryFingerprint_$cputList ::
    [GHC.Fingerprint.Type.Fingerprint] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFirst ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Semigroup.First a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Semigroup.First a)
                  (\ (eta :: Data.Semigroup.First a) ->
                   Data.Binary.Class.put
                     @ a
                     v
                     eta `cast` (Data.Semigroup.N:First[0] <a>_R))
                  (Data.Binary.Class.$fBinaryFirst1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.First a>_R))
                  (Data.Binary.Class.$fBinaryFirst_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFirst0 ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Monoid.First a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Monoid.First a)
                  (Data.Binary.Class.$fBinaryFirst0_$cput @ a v)
                    `cast`
                  (Sym (Data.Monoid.N:First[0]) <a>_N ->_R <Data.Binary.Put.Put>_R)
                  (Data.Binary.Class.$fBinaryFirst2 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Data.Monoid.First a>_R))
                  (Data.Binary.Class.$fBinaryFirst0_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFirst0_$cput ::
    Data.Binary.Class.Binary a =>
    GHC.Maybe.Maybe a -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(C(C1(U(U,U)))))),A,A)><S,1*U>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: GHC.Maybe.Maybe a) ->
                 case Data.Binary.Class.$w$cput7 @ a w w1 of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFirst0_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Monoid.First a] -> Data.Binary.Put.Put
  {- Arity: 1,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFirst1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Semigroup.First a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.First a) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1 i' a1 `cast` (Sym (Data.Semigroup.N:First[0] <a>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFirst2 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Monoid.First a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Monoid.First a) r) ->
                 Data.Binary.Class.$fBinaryFirst3
                   @ a
                   $dBinary
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Maybe.Maybe a)[OneShot] ->
                    eta1 i' a1 `cast` (Sym (Data.Monoid.N:First[0]) <a>_N))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFirst3 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (GHC.Maybe.Maybe a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success (GHC.Maybe.Maybe a) r) ->
                 case w1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget10 @ a w @ r ww1 ww2 ww3 ww4 w2 }) -}
5f6906440ce58d3506b1f31c0ce012ac
  $fBinaryFirst4 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Data.Binary.Class.$wlvl @ r w ww1 ww2 w2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFirst_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Semigroup.First a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFixed :: Data.Binary.Class.Binary (Data.Fixed.Fixed a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Fixed.Fixed a)
                  (Data.Binary.Class.$fBinaryFixed_$cput @ a)
                  (Data.Binary.Class.$fBinaryFixed1 @ a)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Data.Fixed.Fixed a>_R))
                  (Data.Binary.Class.$fBinaryFixed_$cputList @ a) -}
681473a56dbd07c67acd16992f7ab95b
  $fBinaryFixed1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Fixed.Fixed a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success (Data.Fixed.Fixed a) r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget11 @ a @ r ww1 ww2 ww3 ww4 w1 }) -}
7e0f98510c36ea41880de4c3871bdbaa
  $fBinaryFixed_$cput :: Data.Fixed.Fixed a -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,U>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Data.Fixed.Fixed a) ->
                 Data.Binary.Class.$fBinaryFixed_$cput1
                   ds `cast` (Data.Fixed.N:Fixed[0] <a>_P)) -}
94d55c0eb417da6bb24f839b726014d5
  $fBinaryFixed_$cput1 ::
    GHC.Integer.Type.Integer -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (n :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.geInteger#
                        n
                        (GHC.Real.fromIntegral
                           @ GHC.Types.Int
                           @ GHC.Integer.Type.Integer
                           GHC.Real.$fIntegralInt
                           GHC.Num.$fNumInteger
                           (GHC.Types.I# -2147483648#)) of wild { DEFAULT ->
                 let {
                   $j :: Data.Binary.Put.Put <join 0>
                   = (Data.Binary.Put.$WPairS
                        @ ()
                        GHC.Tuple.()
                        (Data.ByteString.Builder.Internal.append
                           (case Data.Binary.Put.$WPairS
                                   @ ()
                                   GHC.Tuple.()
                                   (Data.ByteString.Builder.Prim.primBounded
                                      @ GHC.Word.Word8
                                      (Data.ByteString.Builder.Prim.Internal.toB
                                         @ GHC.Word.Word8
                                         Data.ByteString.Builder.Prim.Binary.word8)
                                      (GHC.Word.W8# 1##)) of wild1 { Data.Binary.Put.PairS ds w ->
                            w })
                           (case Data.Binary.Put.$WPairS
                                   @ ()
                                   GHC.Tuple.()
                                   (Data.ByteString.Builder.Internal.append
                                      (case Data.Binary.Put.$WPairS
                                              @ ()
                                              GHC.Tuple.()
                                              (Data.ByteString.Builder.Prim.primBounded
                                                 @ GHC.Word.Word8
                                                 (Data.ByteString.Builder.Prim.Internal.toB
                                                    @ GHC.Word.Word8
                                                    Data.ByteString.Builder.Prim.Binary.word8)
                                                 (case GHC.Real.fromIntegral
                                                         @ GHC.Integer.Type.Integer
                                                         @ GHC.Types.Word
                                                         GHC.Real.$fIntegralInteger
                                                         GHC.Num.$fNumWord
                                                         (GHC.Integer.Type.signumInteger
                                                            n) of wild1 { GHC.Types.W# x# ->
                                                  GHC.Word.W8#
                                                    (GHC.Prim.narrow8Word#
                                                       x#) })) of wild1 { Data.Binary.Put.PairS ds w ->
                                       w })
                                      (let {
                                         xs :: [GHC.Word.Word8]
                                         = Data.Binary.Class.$fBinaryFixed_go
                                             (GHC.Integer.Type.absInteger n)
                                       } in
                                       case Data.Binary.Put.$WPairS
                                              @ ()
                                              GHC.Tuple.()
                                              (Data.ByteString.Builder.Internal.append
                                                 (Data.ByteString.Builder.Prim.primBounded
                                                    @ GHC.Int.Int64
                                                    Data.Binary.Class.$dmputList1
                                                    (case GHC.Base.foldr
                                                            @ GHC.Word.Word8
                                                            @ (GHC.Types.Int -> GHC.Types.Int)
                                                            (GHC.List.lengthFB @ GHC.Word.Word8)
                                                            GHC.List.idLength
                                                            xs
                                                            (GHC.Types.I#
                                                               0#) of wild1 { GHC.Types.I# x# ->
                                                     GHC.Int.I64# x# }))
                                                 (let {
                                                    w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                                           GHC.Word.Word8
                                                    = case Data.ByteString.Builder.Prim.Internal.$WFP
                                                             @ GHC.Word.Word8
                                                             Foreign.Storable.$fStorable()7
                                                             (\ (x :: GHC.Word.Word8)
                                                                (op :: GHC.Ptr.Ptr
                                                                         GHC.Word.Word8) ->
                                                              Foreign.Storable.$fStorableWord19
                                                                op
                                                                x)
                                                               `cast`
                                                             (<GHC.Word.Word8>_R
                                                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                                              ->_R Sym (GHC.Types.N:IO[0]
                                                                            <()>_R)) of wild1 { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                                                      Data.ByteString.Builder.Prim.Internal.$WBP
                                                        @ GHC.Word.Word8
                                                        (GHC.Types.I# dt)
                                                        (\ (x :: GHC.Word.Word8)
                                                           (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                                           (s :: GHC.Prim.State#
                                                                   GHC.Prim.RealWorld) ->
                                                         case (io x op)
                                                                `cast`
                                                              (GHC.Types.N:IO[0] <()>_R)
                                                                s of ds1 { (#,#) ipv ipv1 ->
                                                         case op of wild2 { GHC.Ptr.Ptr addr ->
                                                         (# ipv,
                                                            GHC.Ptr.Ptr
                                                              @ GHC.Word.Word8
                                                              (GHC.Prim.plusAddr# addr dt) #) } })
                                                          `cast`
                                                        (<GHC.Word.Word8>_R
                                                         ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                                         ->_R Sym (GHC.Types.N:IO[0]
                                                                       <GHC.Ptr.Ptr
                                                                          GHC.Word.Word8>_R)) }
                                                  } in
                                                  let {
                                                    bound :: GHC.Types.Int
                                                    = case w of wild1 { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                                                      GHC.Types.I# dt }
                                                  } in
                                                  case Data.Binary.Put.$WPairS
                                                         @ ()
                                                         GHC.Tuple.()
                                                         (\ @ r ->
                                                          letrec {
                                                            step :: [GHC.Word.Word8]
                                                                    -> (Data.ByteString.Builder.Internal.BufferRange
                                                                        -> GHC.Types.IO
                                                                             (Data.ByteString.Builder.Internal.BuildSignal
                                                                                r))
                                                                    -> Data.ByteString.Builder.Internal.BufferRange
                                                                    -> GHC.Types.IO
                                                                         (Data.ByteString.Builder.Internal.BuildSignal
                                                                            r)
                                                              {- Arity: 3 -}
                                                            = \ (xs1 :: [GHC.Word.Word8])
                                                                (k :: Data.ByteString.Builder.Internal.BufferRange
                                                                      -> GHC.Types.IO
                                                                           (Data.ByteString.Builder.Internal.BuildSignal
                                                                              r))
                                                                (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                                              let {
                                                                ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                                                = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                                              } in
                                                              letrec {
                                                                go :: [GHC.Word.Word8]
                                                                      -> GHC.Ptr.Ptr GHC.Word.Word8
                                                                      -> GHC.Types.IO
                                                                           (Data.ByteString.Builder.Internal.BuildSignal
                                                                              r)
                                                                  {- Arity: 2 -}
                                                                = \ (ds1 :: [GHC.Word.Word8])
                                                                    (op :: GHC.Ptr.Ptr
                                                                             GHC.Word.Word8) ->
                                                                  case ds1 of wild2 {
                                                                    []
                                                                    -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                                                       k (Data.ByteString.Builder.Internal.$WBufferRange
                                                                            op1
                                                                            ope0) }
                                                                    : x' xs'
                                                                    -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                                                       case w of wild3 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                                                       case GHC.Prim.ltAddr#
                                                                              dt1
                                                                              (GHC.Prim.plusAddr#
                                                                                 ipv
                                                                                 dt2) of lwild {
                                                                         DEFAULT
                                                                         -> (\ (s :: GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld) ->
                                                                             case (ds2 x' op1)
                                                                                    `cast`
                                                                                  (GHC.Types.N:IO[0]
                                                                                       <GHC.Ptr.Ptr
                                                                                          GHC.Word.Word8>_R)
                                                                                    s of ds3 { (#,#) ipv1 ipv2 ->
                                                                             (go xs' ipv2)
                                                                               `cast`
                                                                             (GHC.Types.N:IO[0]
                                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                                     r>_R)
                                                                               ipv1 })
                                                                              `cast`
                                                                            (Sym (GHC.Types.N:IO[0]
                                                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                                                         r>_R))
                                                                         1#
                                                                         -> (\ (s :: GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld) ->
                                                                             (# s,
                                                                                Data.ByteString.Builder.Internal.$WBufferFull
                                                                                  @ r
                                                                                  bound
                                                                                  op1
                                                                                  (step wild2 k) #))
                                                                              `cast`
                                                                            (Sym (GHC.Types.N:IO[0]
                                                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                                                         r>_R)) } } } }
                                                              } in
                                                              go
                                                                xs1
                                                                (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                                                          } in
                                                          step xs)
                                                           `cast`
                                                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild1 { Data.Binary.Put.PairS ds w' ->
                                                  w' })) of wild1 { Data.Binary.Put.PairS ds w' ->
                                       w' })) of wild1 { Data.Binary.Put.PairS ds w' ->
                            w' })))
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                 } in
                 case wild of lwild {
                   DEFAULT -> $j
                   1#
                   -> case GHC.Integer.Type.leInteger#
                             n
                             (GHC.Real.fromIntegral
                                @ GHC.Types.Int
                                @ GHC.Integer.Type.Integer
                                GHC.Real.$fIntegralInt
                                GHC.Num.$fNumInteger
                                (GHC.Types.I# 2147483647#)) of wild1 {
                        DEFAULT -> $j
                        1#
                        -> (Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (Data.ByteString.Builder.Prim.primBounded
                                 @ (GHC.Word.Word8, GHC.Int.Int32)
                                 (case Data.ByteString.Builder.Prim.Internal.$WFP
                                         @ GHC.Word.Word8
                                         Foreign.Storable.$fStorable()7
                                         (\ (x :: GHC.Word.Word8)
                                            (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                          Foreign.Storable.$fStorableWord19 op x)
                                           `cast`
                                         (<GHC.Word.Word8>_R
                                          ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <()>_R)) of wild2 { Data.ByteString.Builder.Prim.Internal.FP dt io1 ->
                                  case Data.ByteString.Builder.Prim.Internal.$WFP
                                         @ GHC.Word.Word32
                                         (GHC.Types.I# 4#)
                                         (\ (w :: GHC.Word.Word32)
                                            (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                            (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                          case p of wild3 { GHC.Ptr.Ptr a ->
                                          case w of wild4 { GHC.Word.W32# w1 ->
                                          case GHC.Prim.writeWord8OffAddr#
                                                 @ GHC.Prim.RealWorld
                                                 a
                                                 0#
                                                 (GHC.Prim.narrow8Word#
                                                    (GHC.Prim.uncheckedShiftRL# w1 24#))
                                                 s of s2 { DEFAULT ->
                                          case GHC.Prim.writeWord8OffAddr#
                                                 @ GHC.Prim.RealWorld
                                                 (GHC.Prim.plusAddr# a 1#)
                                                 0#
                                                 (GHC.Prim.narrow8Word#
                                                    (GHC.Prim.uncheckedShiftRL# w1 16#))
                                                 s2 of s1 { DEFAULT ->
                                          case GHC.Prim.writeWord8OffAddr#
                                                 @ GHC.Prim.RealWorld
                                                 (GHC.Prim.plusAddr# a 2#)
                                                 0#
                                                 (GHC.Prim.narrow8Word#
                                                    (GHC.Prim.uncheckedShiftRL# w1 8#))
                                                 s1 of s3 { DEFAULT ->
                                          case GHC.Prim.writeWord8OffAddr#
                                                 @ GHC.Prim.RealWorld
                                                 (GHC.Prim.plusAddr# a 3#)
                                                 0#
                                                 (GHC.Prim.narrow8Word# w1)
                                                 s3 of s4 { DEFAULT ->
                                          (# s4, GHC.Tuple.() #) } } } } } })
                                           `cast`
                                         (<GHC.Word.Word32>_R
                                          ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <()>_R)) of wild3 { Data.ByteString.Builder.Prim.Internal.FP dt1 io ->
                                  case Data.ByteString.Builder.Prim.Internal.$WFP
                                         @ GHC.Int.Int32
                                         (GHC.Types.I# dt1)
                                         (\ (x :: GHC.Int.Int32)
                                            (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                          io
                                            (case x of wild4 { GHC.Int.I32# x# ->
                                             GHC.Word.W32#
                                               (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# x#)) })
                                            op) of wild4 { Data.ByteString.Builder.Prim.Internal.FP dt2 io2 ->
                                  case Data.ByteString.Builder.Prim.Internal.$WFP
                                         @ (GHC.Word.Word8, GHC.Int.Int32)
                                         (GHC.Types.I# (GHC.Prim.+# dt dt2))
                                         (\ (ds2 :: (GHC.Word.Word8, GHC.Int.Int32))
                                            (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                          case ds2 of wild5 { (,) x1 x2 ->
                                          (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case (io1 x1 op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                                  s of ds3 { (#,#) ipv ipv1 ->
                                           (io2
                                              x2
                                              (case op of wild6 { GHC.Ptr.Ptr addr ->
                                               GHC.Ptr.Ptr
                                                 @ GHC.Word.Word8
                                                 (GHC.Prim.plusAddr# addr dt) }))
                                             `cast`
                                           (GHC.Types.N:IO[0] <()>_R)
                                             ipv })
                                            `cast`
                                          (Sym (GHC.Types.N:IO[0]
                                                    <()>_R)) }) of wild5 { Data.ByteString.Builder.Prim.Internal.FP dt3 io4 ->
                                  Data.ByteString.Builder.Prim.Internal.$WBP
                                    @ (GHC.Word.Word8, GHC.Int.Int32)
                                    (GHC.Types.I# dt3)
                                    (\ (x :: (GHC.Word.Word8, GHC.Int.Int32))
                                       (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                       (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     case (io4 x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                            s of ds1 { (#,#) ipv ipv1 ->
                                     case op of wild6 { GHC.Ptr.Ptr addr ->
                                     (# ipv,
                                        GHC.Ptr.Ptr
                                          @ GHC.Word.Word8
                                          (GHC.Prim.plusAddr# addr dt3) #) } })
                                      `cast`
                                    (<(GHC.Word.Word8, GHC.Int.Int32)>_R
                                     ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <GHC.Ptr.Ptr GHC.Word.Word8>_R)) } } } })
                                 (GHC.Word.W8# 0##,
                                  case GHC.Real.fromIntegral
                                         @ GHC.Integer.Type.Integer
                                         @ GHC.Types.Int
                                         GHC.Real.$fIntegralInteger
                                         GHC.Num.$fNumInt
                                         n of wild2 { GHC.Types.I# x# ->
                                  GHC.Int.I32# (GHC.Prim.narrow32Int# x#) })))
                             `cast`
                           (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } } }) -}
6c421972f84de3091065767cbe528488
  $fBinaryFixed_$cputList ::
    [Data.Fixed.Fixed a] -> Data.Binary.Put.Put
  {- Arity: 1 -}
99d0e678954a8e9c5efe9c43f15971aa
  $fBinaryFixed_go :: GHC.Integer.Type.Integer -> [GHC.Word.Word8]
  {- Arity: 1, Strictness: <S,U> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryFloat :: Data.Binary.Class.Binary GHC.Types.Float
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  Data.Binary.Class.$fBinaryFloat_$cput
                  Data.Binary.Class.$fBinaryFloat1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.Float>_R))
                  Data.Binary.Class.$fBinaryFloat_$cputList -}
092f106a38b84941b023bb2596f71369
  $fBinaryFloat1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.Float r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.Float r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget12 @ r ww1 ww2 ww3 ww4 w1 }) -}
296cdfaa243b949c7482fe73a976dc7a
  $fBinaryFloat_$cput :: GHC.Types.Float -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S(S),1*U(U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Float) ->
                 case w of ww { GHC.Types.F# ww1 ->
                 case Data.Binary.Class.$w$cput8 ww1 of ww2 { (#,#) ww3 ww4 ->
                 (Data.Binary.Put.PairS @ () ww3 ww4)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
77a7d268c2d7765b7680e6fbb545a797
  $fBinaryFloat_$cputList :: [GHC.Types.Float] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryIdentity ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Functor.Identity.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Functor.Identity.Identity a)
                  (\ (ds :: Data.Functor.Identity.Identity a) ->
                   Data.Binary.Class.put
                     @ a
                     v
                     ds `cast` (Data.Functor.Identity.N:Identity[0] <a>_R))
                  (Data.Binary.Class.$fBinaryIdentity1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Functor.Identity.Identity a>_R))
                  (Data.Binary.Class.$fBinaryIdentity_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryIdentity1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Data.Functor.Identity.Identity a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Functor.Identity.Identity a) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1
                      i'
                      a1 `cast` (Sym (Data.Functor.Identity.N:Identity[0] <a>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryIdentity_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Functor.Identity.Identity a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryInt :: Data.Binary.Class.Binary GHC.Types.Int
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  Data.Binary.Class.$fBinaryInt2
                    `cast`
                  (<GHC.Types.Int>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryInt1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.Int>_R))
                  Data.Binary.Class.$fBinaryInt_$cputList -}
fb69a19b8a9df88084b1a4da3e8ac07f
  $fBinaryInt1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.Int r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.Int r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget5 @ r ww1 ww2 ww3 ww4 w1 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryInt16 :: Data.Binary.Class.Binary GHC.Int.Int16
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int16
                  Data.Binary.Put.putInt16be
                  Data.Binary.Get.getInt16be
                  Data.Binary.Class.$fBinaryInt16_$cputList -}
b23ced5e436f47b86157fba217bec1f6
  $fBinaryInt16_$cputList :: [GHC.Int.Int16] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Int.Int16]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Int.Int16
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Int.Int16)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Int.Int16
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word16
                                  (GHC.Types.I# 2#)
                                  (\ (w1 :: GHC.Word.Word16)
                                     (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case p of wild { GHC.Ptr.Ptr a ->
                                   case w1 of wild1 { GHC.Word.W16# w2 ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          a
                                          0#
                                          (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                          s of s2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 1#)
                                          0#
                                          (GHC.Prim.narrow8Word# w2)
                                          s2 of s1 { DEFAULT ->
                                   (# s1, GHC.Tuple.() #) } } } })
                                    `cast`
                                  (<GHC.Word.Word16>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Int.Int16
                                  (GHC.Types.I# dt)
                                  (\ (x :: GHC.Int.Int16) (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   io
                                     (case x of wild1 { GHC.Int.I16# x# ->
                                      GHC.Word.W16#
                                        (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x#)) })
                                     op) of wild1 { Data.ByteString.Builder.Prim.Internal.FP dt1 io1 ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Int.Int16
                             (GHC.Types.I# dt1)
                             (\ (x :: GHC.Int.Int16)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io1 x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild2 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt1) #) } })
                               `cast`
                             (<GHC.Int.Int16>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) } }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Int.Int16]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Int.Int16])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Int.Int16]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Int.Int16])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step xs)
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Int.Int16]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
849a784cbbf7e04661a02b3708dd54c3
  $fBinaryInt2 :: GHC.Types.Int -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case Data.Binary.Class.$w$cput9 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryInt32 :: Data.Binary.Class.Binary GHC.Int.Int32
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  Data.Binary.Put.putInt32be
                  Data.Binary.Get.getInt32be
                  Data.Binary.Class.$fBinaryInt32_$cputList -}
6d4eeae4762249523976962c5f8a5979
  $fBinaryInt32_$cputList :: [GHC.Int.Int32] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Int.Int32]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Int.Int32
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Int.Int32)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Int.Int32
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word32
                                  (GHC.Types.I# 4#)
                                  (\ (w1 :: GHC.Word.Word32)
                                     (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case p of wild { GHC.Ptr.Ptr a ->
                                   case w1 of wild1 { GHC.Word.W32# w2 ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          a
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 24#))
                                          s of s2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 1#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 16#))
                                          s2 of s1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 2#)
                                          0#
                                          (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                          s1 of s3 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 3#)
                                          0#
                                          (GHC.Prim.narrow8Word# w2)
                                          s3 of s4 { DEFAULT ->
                                   (# s4, GHC.Tuple.() #) } } } } } })
                                    `cast`
                                  (<GHC.Word.Word32>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Int.Int32
                                  (GHC.Types.I# dt)
                                  (\ (x :: GHC.Int.Int32) (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   io
                                     (case x of wild1 { GHC.Int.I32# x# ->
                                      GHC.Word.W32#
                                        (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# x#)) })
                                     op) of wild1 { Data.ByteString.Builder.Prim.Internal.FP dt1 io1 ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Int.Int32
                             (GHC.Types.I# dt1)
                             (\ (x :: GHC.Int.Int32)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io1 x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild2 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt1) #) } })
                               `cast`
                             (<GHC.Int.Int32>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) } }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Int.Int32]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Int.Int32])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Int.Int32]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Int.Int32])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step xs)
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Int.Int32]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryInt64 :: Data.Binary.Class.Binary GHC.Int.Int64
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int64
                  Data.Binary.Put.putInt64be
                  Data.Binary.Get.getInt64be
                  Data.Binary.Class.$fBinaryInt64_$cputList -}
1c39d6464d4ef26f01b544dbb5d61afa
  $fBinaryInt64_$cputList :: [GHC.Int.Int64] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Int.Int64]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Int.Int64
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Int.Int64)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Int.Int64
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word64
                                  (GHC.Types.I# 8#)
                                  (\ (w1 :: GHC.Word.Word64)
                                     (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case p of wild { GHC.Ptr.Ptr a ->
                                   case w1 of wild1 { GHC.Word.W64# w2 ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          a
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 56#))
                                          s of s2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 1#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 48#))
                                          s2 of s1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 2#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 40#))
                                          s1 of s3 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 3#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 32#))
                                          s3 of s4 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 4#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 24#))
                                          s4 of s5 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 5#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 16#))
                                          s5 of s6 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 6#)
                                          0#
                                          (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                          s6 of s7 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 7#)
                                          0#
                                          (GHC.Prim.narrow8Word# w2)
                                          s7 of s8 { DEFAULT ->
                                   (# s8, GHC.Tuple.() #) } } } } } } } } } })
                                    `cast`
                                  (<GHC.Word.Word64>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Int.Int64
                                  (GHC.Types.I# dt)
                                  (\ (x :: GHC.Int.Int64) (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   io
                                     (case x of wild1 { GHC.Int.I64# x# ->
                                      GHC.Word.W64# (GHC.Prim.int2Word# x#) })
                                     op) of wild1 { Data.ByteString.Builder.Prim.Internal.FP dt1 io1 ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Int.Int64
                             (GHC.Types.I# dt1)
                             (\ (x :: GHC.Int.Int64)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io1 x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild2 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt1) #) } })
                               `cast`
                             (<GHC.Int.Int64>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) } }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Int.Int64]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Int.Int64])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Int.Int64]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Int.Int64])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step xs)
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Int.Int64]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryInt8 :: Data.Binary.Class.Binary GHC.Int.Int8
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int8
                  Data.Binary.Put.putInt8
                  Data.Binary.Get.getInt8
                  Data.Binary.Class.$fBinaryInt8_$cputList -}
bccd9c32369029095239b5c77a783a95
  $fBinaryInt8_$cputList :: [GHC.Int.Int8] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Int.Int8]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Int.Int8
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Int.Int8)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim GHC.Int.Int8
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word8
                                  Foreign.Storable.$fStorable()7
                                  (\ (x :: GHC.Word.Word8) (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   Foreign.Storable.$fStorableWord19 op x)
                                    `cast`
                                  (<GHC.Word.Word8>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Int.Int8
                                  (GHC.Types.I# dt)
                                  (\ (x :: GHC.Int.Int8) (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   io
                                     (case x of wild1 { GHC.Int.I8# x# ->
                                      GHC.Word.W8#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.int2Word# x#)) })
                                     op) of wild1 { Data.ByteString.Builder.Prim.Internal.FP dt1 io1 ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Int.Int8
                             (GHC.Types.I# dt1)
                             (\ (x :: GHC.Int.Int8)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io1 x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild2 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt1) #) } })
                               `cast`
                             (<GHC.Int.Int8>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) } }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Int.Int8]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Int.Int8])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Int.Int8]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Int.Int8])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step xs)
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Int.Int8]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryIntMap ::
    Data.Binary.Class.Binary e =>
    Data.Binary.Class.Binary (Data.IntMap.Internal.IntMap e)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ e (v :: Data.Binary.Class.Binary e).
                  @ (Data.IntMap.Internal.IntMap e)
                  (Data.Binary.Class.$fBinaryIntMap1 @ e v)
                    `cast`
                  (<Data.IntMap.Internal.IntMap e>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  (Data.Binary.Class.$fBinaryIntMap_$cget @ e v)
                  (Data.Binary.Class.$fBinaryIntMap_$cputList @ e v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryIntMap1 ::
    Data.Binary.Class.Binary e =>
    Data.IntMap.Internal.IntMap e -> Data.Binary.Put.PairS ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),A,A)><L,U>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ e
                   (w :: Data.Binary.Class.Binary e)
                   (w1 :: Data.IntMap.Internal.IntMap e) ->
                 case Data.Binary.Class.$w$cput10 @ e w w1 of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryIntMap_$cget ::
    Data.Binary.Class.Binary e =>
    Data.Binary.Get.Internal.Get (Data.IntMap.Internal.IntMap e)
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)>,
     Unfolding: (\ @ e ($dBinary :: Data.Binary.Class.Binary e) ->
                 let {
                   ds :: Data.Binary.Class.Binary (GHC.Types.Int, e)
                   = Data.Binary.Class.$fBinary(,)
                       @ GHC.Types.Int
                       @ e
                       Data.Binary.Class.$fBinaryInt
                       $dBinary
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success
                             (Data.IntMap.Internal.IntMap e) r) ->
                  case i of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                  Data.Binary.Class.$w$cget13
                    @ (Data.IntSet.Internal.Key, e)
                    ds
                    @ r
                    ww1
                    ww2
                    ww3
                    ww4
                    (\ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: [(Data.IntSet.Internal.Key, e)])[OneShot] ->
                     ks i' (Data.IntMap.Internal.fromDistinctAscList @ e a1)) })
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <Data.IntMap.Internal.IntMap e>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryIntMap_$cputList ::
    Data.Binary.Class.Binary e =>
    [Data.IntMap.Internal.IntMap e] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryIntSet ::
    Data.Binary.Class.Binary Data.IntSet.Internal.IntSet
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.IntSet.Internal.IntSet
                  Data.Binary.Class.$fBinaryIntSet2
                    `cast`
                  (<Data.IntSet.Internal.IntSet>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryIntSet1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.IntSet.Internal.IntSet>_R))
                  Data.Binary.Class.$fBinaryIntSet_$cputList -}
70b3b341dd677789e343e03320d6894b
  $fBinaryIntSet1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Data.IntSet.Internal.IntSet r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Data.IntSet.Internal.IntSet r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget14 @ r ww1 ww2 ww3 ww4 w1 }) -}
9f46f574af2096f054f1da4b0e43e1e2
  $fBinaryIntSet2 ::
    Data.IntSet.Internal.IntSet -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.IntSet.Internal.IntSet) ->
                 case Data.Binary.Class.$w$cput11 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
a201448f2d5ea8e532872531fd929fcc
  $fBinaryIntSet3 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Data.Binary.Class.$fBinaryIntSet4
                     `cast`
                   (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
86500d527705138ce765434e2b7195c6
  $fBinaryIntSet4 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
1588e1d932c3baf98029c008bb9ba1e2
  $fBinaryIntSet_$cputList ::
    [Data.IntSet.Internal.IntSet] -> Data.Binary.Put.Put
  {- Arity: 1 -}
6d2fcb1338cb0b26846039e0007e55ab
  $fBinaryIntSet_go1 ::
    Data.Binary.Put.PutM ()
    -> Data.IntSet.Internal.IntSet -> Data.Binary.Put.PutM ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U)><S,1*U> -}
b08592b5f07aa8f7cd5cd7e96b31509e
  $fBinaryInt_$cputList :: [GHC.Types.Int] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Types.Int]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Types.Int
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Types.Int)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Int.Int64
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word64
                                  (GHC.Types.I# 8#)
                                  (\ (w1 :: GHC.Word.Word64)
                                     (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case p of wild { GHC.Ptr.Ptr a ->
                                   case w1 of wild1 { GHC.Word.W64# w2 ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          a
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 56#))
                                          s of s2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 1#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 48#))
                                          s2 of s1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 2#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 40#))
                                          s1 of s3 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 3#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 32#))
                                          s3 of s4 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 4#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 24#))
                                          s4 of s5 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 5#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 16#))
                                          s5 of s6 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 6#)
                                          0#
                                          (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                          s6 of s7 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 7#)
                                          0#
                                          (GHC.Prim.narrow8Word# w2)
                                          s7 of s8 { DEFAULT ->
                                   (# s8, GHC.Tuple.() #) } } } } } } } } } })
                                    `cast`
                                  (<GHC.Word.Word64>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Int.Int64
                                  (GHC.Types.I# dt)
                                  (\ (x :: GHC.Int.Int64) (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   io
                                     (case x of wild1 { GHC.Int.I64# x# ->
                                      GHC.Word.W64# (GHC.Prim.int2Word# x#) })
                                     op) of wild1 { Data.ByteString.Builder.Prim.Internal.FP dt1 io1 ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Int.Int64
                             (GHC.Types.I# dt1)
                             (\ (x :: GHC.Int.Int64)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io1 x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild2 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt1) #) } })
                               `cast`
                             (<GHC.Int.Int64>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) } }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Int.Int64]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Int.Int64])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Int.Int64]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Int.Int64])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step
                                 (GHC.Base.build
                                    @ GHC.Int.Int64
                                    (\ @ b1
                                       (c :: GHC.Int.Int64 -> b1 -> b1)[OneShot]
                                       (n :: b1)[OneShot] ->
                                     GHC.Base.foldr
                                       @ GHC.Types.Int
                                       @ b1
                                       (GHC.Base.mapFB
                                          @ GHC.Int.Int64
                                          @ b1
                                          @ GHC.Types.Int
                                          c
                                          (\ (x :: GHC.Types.Int) ->
                                           case x of wild { GHC.Types.I# x# -> GHC.Int.I64# x# }))
                                       n
                                       xs)))
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryInteger ::
    Data.Binary.Class.Binary GHC.Integer.Type.Integer
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  Data.Binary.Class.$fBinaryFixed_$cput1
                  Data.Binary.Class.$fBinaryInteger_$cget
                  Data.Binary.Class.$fBinaryInteger_$cputList -}
afe83943dc1ff43186fdeeefb5cecc06
  $fBinaryInteger1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
973583ebca730e84314a6206dc4946cf
  $fBinaryInteger2 ::
    GHC.Word.Word8
    -> (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <L,1*U(U)><C(S),1*C1(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Word.Word8)
                   (ds1 :: GHC.Integer.Type.Integer
                           -> GHC.Integer.Type.Integer)[OneShot]
                   (v :: GHC.Integer.Type.Integer)[OneShot] ->
                 case v of z { DEFAULT ->
                 ds1
                   (case ds of wild { GHC.Word.W8# x# ->
                    GHC.Integer.Type.orInteger
                      (GHC.Integer.Type.shiftLInteger z 8#)
                      (GHC.Integer.Type.wordToInteger x#) }) }) -}
9110dab49c3241e7dda39d190dd4041e
  $fBinaryInteger_$cget ::
    Data.Binary.Get.Internal.Get GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (let {
                   ds :: GHC.Types.Int = GHC.Types.I# 1#
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success
                             GHC.Integer.Type.Integer r) ->
                  (Data.Binary.Get.Internal.readN
                     @ GHC.Word.Word8
                     ds
                     Data.ByteString.Unsafe.unsafeHead)
                    `cast`
                  (Data.Binary.Get.Internal.N:Get[0] <GHC.Word.Word8>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Word.Word8) ->
                     case GHC.Word.eqWord8 a1 (GHC.Word.W8# 0##) of wild {
                       GHC.Types.False
                       -> (Data.Binary.Get.Internal.readN
                             @ GHC.Word.Word8
                             (GHC.Types.I# 1#)
                             Data.ByteString.Unsafe.unsafeHead)
                            `cast`
                          (Data.Binary.Get.Internal.N:Get[0] <GHC.Word.Word8>_R)
                            @ r
                            i'
                            (\ (i'1 :: Data.ByteString.Internal.ByteString)
                               (a2 :: GHC.Word.Word8) ->
                             Data.Binary.Class.$fBinaryInteger_$s$cget
                               @ r
                               i'1
                               (\ (i'2 :: Data.ByteString.Internal.ByteString)
                                  (a3 :: [GHC.Word.Word8])[OneShot] ->
                                case GHC.Word.eqWord8 a2 (GHC.Word.W8# 1##) of wild1 {
                                  GHC.Types.False
                                  -> case GHC.Integer.Type.negateInteger
                                            (GHC.Base.foldr
                                               @ GHC.Word.Word8
                                               @ (GHC.Integer.Type.Integer
                                                  -> GHC.Integer.Type.Integer)
                                               Data.Binary.Class.$fBinaryInteger2
                                               (GHC.Base.id @ GHC.Integer.Type.Integer)
                                               (GHC.List.reverse1
                                                  @ GHC.Word.Word8
                                                  a3
                                                  (GHC.Types.[] @ GHC.Word.Word8))
                                               Data.Binary.Class.$fBinaryInteger1) of vx { DEFAULT ->
                                     (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                        @ GHC.Integer.Type.Integer
                                        vx)
                                       `cast`
                                     (Data.Binary.Get.Internal.N:Get[0]
                                          <GHC.Integer.Type.Integer>_R)
                                       @ r
                                       i'2
                                       ks }
                                  GHC.Types.True
                                  -> case GHC.Base.foldr
                                            @ GHC.Word.Word8
                                            @ (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                                            Data.Binary.Class.$fBinaryInteger2
                                            (GHC.Base.id @ GHC.Integer.Type.Integer)
                                            (GHC.List.reverse1
                                               @ GHC.Word.Word8
                                               a3
                                               (GHC.Types.[] @ GHC.Word.Word8))
                                            Data.Binary.Class.$fBinaryInteger1 of vx { DEFAULT ->
                                     (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                        @ GHC.Integer.Type.Integer
                                        vx)
                                       `cast`
                                     (Data.Binary.Get.Internal.N:Get[0]
                                          <GHC.Integer.Type.Integer>_R)
                                       @ r
                                       i'2
                                       ks } }))
                       GHC.Types.True
                       -> (Data.Binary.Get.Internal.readN
                             @ GHC.Word.Word32
                             (GHC.Types.I# 4#)
                             Data.Binary.Get.word32be)
                            `cast`
                          (Data.Binary.Get.Internal.N:Get[0] <GHC.Word.Word32>_R)
                            @ r
                            i'
                            (\ (i'1 :: Data.ByteString.Internal.ByteString)
                               (a2 :: GHC.Word.Word32) ->
                             (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                @ GHC.Integer.Type.Integer
                                (case a2 of wild1 { GHC.Word.W32# x# ->
                                 GHC.Real.fromIntegral
                                   @ GHC.Types.Int
                                   @ GHC.Integer.Type.Integer
                                   GHC.Real.$fIntegralInt
                                   GHC.Num.$fNumInteger
                                   (GHC.Types.I#
                                      (GHC.Prim.narrow32Int# (GHC.Prim.word2Int# x#))) }))
                               `cast`
                             (Data.Binary.Get.Internal.N:Get[0] <GHC.Integer.Type.Integer>_R)
                               @ r
                               i'1
                               ks) }))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <GHC.Integer.Type.Integer>_R))) -}
838ba3b29d0e870646432938273ad445
  $fBinaryInteger_$cputList ::
    [GHC.Integer.Type.Integer] -> Data.Binary.Put.Put
  {- Arity: 1 -}
2c9bea07448ea46aa4bf1e94005a6bf2
  $fBinaryInteger_$s$cget ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success [GHC.Word.Word8] r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success [GHC.Word.Word8] r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$s$cget1 @ r ww1 ww2 ww3 ww4 w1 }) -}
b5d0e846307ae17ef4d8c96c76b25da2
  $fBinaryInteger_$s$wgo ::
    (Data.ByteString.Internal.ByteString
     -> [GHC.Word.Word8] -> Data.Binary.Get.Internal.Decoder r)
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [GHC.Word.Word8]
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 7,
     Strictness: <L,C(C1(U))><L,U><L,U><L,U><L,U><S,1*U><L,U> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryKindRep :: Data.Binary.Class.Binary GHC.Types.KindRep
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.KindRep
                  Data.Binary.Class.$fBinaryKindRep_$cput
                  Data.Binary.Class.$fBinaryKindRep1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.KindRep>_R))
                  Data.Binary.Class.$fBinaryKindRep_$cputList -}
c527acc53130453a4433872c137c4210
  $fBinaryKindRep1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.KindRep r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.KindRep r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget15 @ r ww1 ww2 ww3 ww4 w1 }) -}
8040c60744eed04699a5b11511639900
  $fBinaryKindRep_$cput :: GHC.Types.KindRep -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.KindRep) ->
                 case Data.Binary.Class.$w$cput12 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
d9c04e22d277cefc2eb11961907a4f89
  $fBinaryKindRep_$cputList ::
    [GHC.Types.KindRep] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryLast ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Semigroup.Last a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Semigroup.Last a)
                  (\ (eta :: Data.Semigroup.Last a) ->
                   Data.Binary.Class.put
                     @ a
                     v
                     eta `cast` (Data.Semigroup.N:Last[0] <a>_R))
                  (Data.Binary.Class.$fBinaryLast1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Data.Semigroup.Last a>_R))
                  (Data.Binary.Class.$fBinaryLast_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryLast0 ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Monoid.Last a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Monoid.Last a)
                  (Data.Binary.Class.$fBinaryFirst0_$cput @ a v)
                    `cast`
                  (Sym (Data.Monoid.N:Last[0]) <a>_N ->_R <Data.Binary.Put.Put>_R)
                  (Data.Binary.Class.$fBinaryLast2 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Data.Monoid.Last a>_R))
                  (Data.Binary.Class.$fBinaryLast0_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryLast0_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Monoid.Last a] -> Data.Binary.Put.Put
  {- Arity: 1,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryLast1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Semigroup.Last a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.Last a) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1 i' a1 `cast` (Sym (Data.Semigroup.N:Last[0] <a>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryLast2 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Monoid.Last a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Monoid.Last a) r) ->
                 Data.Binary.Class.$fBinaryFirst3
                   @ a
                   $dBinary
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Maybe.Maybe a)[OneShot] ->
                    eta1 i' a1 `cast` (Sym (Data.Monoid.N:Last[0]) <a>_N))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryLast_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Semigroup.Last a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMap ::
    (Data.Binary.Class.Binary k, Data.Binary.Class.Binary e) =>
    Data.Binary.Class.Binary (Data.Map.Internal.Map k e)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ e
                      (v :: Data.Binary.Class.Binary k)
                      (v1 :: Data.Binary.Class.Binary e).
                  @ (Data.Map.Internal.Map k e)
                  (Data.Binary.Class.$fBinaryMap1 @ k @ e v v1)
                    `cast`
                  (<Data.Map.Internal.Map k e>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  (Data.Binary.Class.$fBinaryMap_$cget @ k @ e v v1)
                  (Data.Binary.Class.$fBinaryMap_$cputList @ k @ e v v1) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMap1 ::
    (Data.Binary.Class.Binary k, Data.Binary.Class.Binary e) =>
    Data.Map.Internal.Map k e -> Data.Binary.Put.PairS ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U(C(U(A,C(U))),A,A)><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ e
                   (w :: Data.Binary.Class.Binary k)
                   (w1 :: Data.Binary.Class.Binary e)
                   (w2 :: Data.Map.Internal.Map k e) ->
                 case Data.Binary.Class.$w$cput13
                        @ k
                        @ e
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMap_$cget ::
    (Data.Binary.Class.Binary k, Data.Binary.Class.Binary e) =>
    Data.Binary.Get.Internal.Get (Data.Map.Internal.Map k e)
  {- Arity: 2,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)>,
     Unfolding: (\ @ k
                   @ e
                   ($dBinary :: Data.Binary.Class.Binary k)
                   ($dBinary1 :: Data.Binary.Class.Binary e) ->
                 let {
                   ds :: Data.Binary.Class.Binary (k, e)
                   = Data.Binary.Class.$fBinary(,) @ k @ e $dBinary $dBinary1
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success
                             (Data.Map.Internal.Map k e) r) ->
                  case i of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                  Data.Binary.Class.$w$cget13
                    @ (k, e)
                    ds
                    @ r
                    ww1
                    ww2
                    ww3
                    ww4
                    (\ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: [(k, e)])[OneShot] ->
                     ks i' (Data.Map.Internal.fromDistinctAscList @ k @ e a1)) })
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <Data.Map.Internal.Map k e>_R))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMap_$cputList ::
    (Data.Binary.Class.Binary k, Data.Binary.Class.Binary e) =>
    [Data.Map.Internal.Map k e] -> Data.Binary.Put.Put
  {- Arity: 2,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMax ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Semigroup.Max a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Semigroup.Max a)
                  (\ (eta :: Data.Semigroup.Max a) ->
                   Data.Binary.Class.put
                     @ a
                     v
                     eta `cast` (Data.Semigroup.N:Max[0] <a>_R))
                  (Data.Binary.Class.$fBinaryMax1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Data.Semigroup.Max a>_R))
                  (Data.Binary.Class.$fBinaryMax_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMax1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Semigroup.Max a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.Max a) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1 i' a1 `cast` (Sym (Data.Semigroup.N:Max[0] <a>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMax_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Semigroup.Max a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMaybe ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (GHC.Maybe.Maybe a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (GHC.Maybe.Maybe a)
                  (Data.Binary.Class.$fBinaryFirst0_$cput @ a v)
                  (Data.Binary.Class.$fBinaryFirst3 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Maybe.Maybe a>_R))
                  (Data.Binary.Class.$fBinaryMaybe_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMaybe_$cputList ::
    Data.Binary.Class.Binary a =>
    [GHC.Maybe.Maybe a] -> Data.Binary.Put.Put
  {- Arity: 1,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMin ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Semigroup.Min a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Semigroup.Min a)
                  (\ (eta :: Data.Semigroup.Min a) ->
                   Data.Binary.Class.put
                     @ a
                     v
                     eta `cast` (Data.Semigroup.N:Min[0] <a>_R))
                  (Data.Binary.Class.$fBinaryMin1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Data.Semigroup.Min a>_R))
                  (Data.Binary.Class.$fBinaryMin_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMin1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Semigroup.Min a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.Min a) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1 i' a1 `cast` (Sym (Data.Semigroup.N:Min[0] <a>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryMin_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Semigroup.Min a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryNatural :: Data.Binary.Class.Binary GHC.Natural.Natural
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Natural.Natural
                  Data.Binary.Class.$fBinaryNatural_$cput
                  Data.Binary.Class.$fBinaryNatural_$cget
                  Data.Binary.Class.$fBinaryNatural_$cputList -}
9864142276363887b30722983e2971fe
  $fBinaryNatural1 :: GHC.Natural.Natural
  {- HasNoCafRefs, Unfolding: (0) -}
0bfbcbe2ffc7f7cd66a72c9a7699b94d
  $fBinaryNatural2 ::
    GHC.Word.Word8
    -> (GHC.Natural.Natural -> GHC.Natural.Natural)
    -> GHC.Natural.Natural
    -> GHC.Natural.Natural
  {- Arity: 3, Strictness: <L,1*U(U)><C(S),1*C1(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Word.Word8)
                   (ds1 :: GHC.Natural.Natural -> GHC.Natural.Natural)[OneShot]
                   (v :: GHC.Natural.Natural)[OneShot] ->
                 case v of z { DEFAULT ->
                 ds1
                   (case ds of wild { GHC.Word.W8# x# ->
                    GHC.Natural.orNatural
                      (GHC.Natural.$wshiftLNatural z 8#)
                      (GHC.Natural.wordToNatural# x#) }) }) -}
eeb2d09f7d43da9fd28d9abc69c8e917
  $fBinaryNatural_$cget ::
    Data.Binary.Get.Internal.Get GHC.Natural.Natural
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (let {
                   ds :: GHC.Types.Int = GHC.Types.I# 1#
                 } in
                 (\ @ r
                    (i :: Data.ByteString.Internal.ByteString)
                    (ks :: Data.Binary.Get.Internal.Success GHC.Natural.Natural r) ->
                  (Data.Binary.Get.Internal.readN
                     @ GHC.Word.Word8
                     ds
                     Data.ByteString.Unsafe.unsafeHead)
                    `cast`
                  (Data.Binary.Get.Internal.N:Get[0] <GHC.Word.Word8>_R)
                    @ r
                    i
                    (\ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: GHC.Word.Word8) ->
                     case GHC.Word.eqWord8 a1 (GHC.Word.W8# 0##) of wild {
                       GHC.Types.False
                       -> Data.Binary.Class.$fBinaryInteger_$s$cget
                            @ r
                            i'
                            (\ (i'1 :: Data.ByteString.Internal.ByteString)
                               (a2 :: [GHC.Word.Word8])[OneShot] ->
                             case GHC.Base.foldr
                                    @ GHC.Word.Word8
                                    @ (GHC.Natural.Natural -> GHC.Natural.Natural)
                                    Data.Binary.Class.$fBinaryNatural2
                                    (GHC.Base.id @ GHC.Natural.Natural)
                                    (GHC.List.reverse1
                                       @ GHC.Word.Word8
                                       a2
                                       (GHC.Types.[] @ GHC.Word.Word8))
                                    Data.Binary.Class.$fBinaryNatural1 of vx { DEFAULT ->
                             (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                @ GHC.Natural.Natural
                                vx)
                               `cast`
                             (Data.Binary.Get.Internal.N:Get[0] <GHC.Natural.Natural>_R)
                               @ r
                               i'1
                               ks })
                       GHC.Types.True
                       -> (Data.Binary.Get.Internal.readN
                             @ GHC.Word.Word64
                             (GHC.Types.I# 8#)
                             Data.Binary.Get.word64be)
                            `cast`
                          (Data.Binary.Get.Internal.N:Get[0]
                               <Data.Binary.Class.NaturalWord>_R)
                            @ r
                            i'
                            (\ (i'1 :: Data.ByteString.Internal.ByteString)
                               (a2 :: Data.Binary.Class.NaturalWord) ->
                             (Data.Binary.Get.Internal.$fAlternativeGet_$cpure
                                @ GHC.Natural.Natural
                                (case a2 of wild1 { GHC.Word.W64# x# ->
                                 GHC.Natural.wordToNatural# x# }))
                               `cast`
                             (Data.Binary.Get.Internal.N:Get[0] <GHC.Natural.Natural>_R)
                               @ r
                               i'1
                               ks) }))
                   `cast`
                 (Sym (Data.Binary.Get.Internal.N:Get[0]
                           <GHC.Natural.Natural>_R))) -}
057be7d6a6611d6a081dd73f0520eff2
  $fBinaryNatural_$cput :: GHC.Natural.Natural -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (n :: GHC.Natural.Natural) ->
                 let {
                   $j :: Data.Binary.Put.Put <join 0>
                   = (Data.Binary.Put.$WPairS
                        @ ()
                        GHC.Tuple.()
                        (Data.ByteString.Builder.Internal.append
                           (case Data.Binary.Put.$WPairS
                                   @ ()
                                   GHC.Tuple.()
                                   (Data.ByteString.Builder.Prim.primBounded
                                      @ GHC.Word.Word8
                                      (Data.ByteString.Builder.Prim.Internal.toB
                                         @ GHC.Word.Word8
                                         Data.ByteString.Builder.Prim.Binary.word8)
                                      (GHC.Word.W8# 1##)) of wild { Data.Binary.Put.PairS ds w ->
                            w })
                           (let {
                              xs :: [GHC.Word.Word8] = Data.Binary.Class.$fBinaryNatural_go n
                            } in
                            case Data.Binary.Put.$WPairS
                                   @ ()
                                   GHC.Tuple.()
                                   (Data.ByteString.Builder.Internal.append
                                      (Data.ByteString.Builder.Prim.primBounded
                                         @ GHC.Int.Int64
                                         Data.Binary.Class.$dmputList1
                                         (case GHC.Base.foldr
                                                 @ GHC.Word.Word8
                                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                                 (GHC.List.lengthFB @ GHC.Word.Word8)
                                                 GHC.List.idLength
                                                 xs
                                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (let {
                                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                                GHC.Word.Word8
                                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                                  @ GHC.Word.Word8
                                                  Foreign.Storable.$fStorable()7
                                                  (\ (x :: GHC.Word.Word8)
                                                     (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                                   Foreign.Storable.$fStorableWord19 op x)
                                                    `cast`
                                                  (<GHC.Word.Word8>_R
                                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                                   ->_R Sym (GHC.Types.N:IO[0]
                                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                                           Data.ByteString.Builder.Prim.Internal.$WBP
                                             @ GHC.Word.Word8
                                             (GHC.Types.I# dt)
                                             (\ (x :: GHC.Word.Word8)
                                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                              case (io x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                                     s of ds1 { (#,#) ipv ipv1 ->
                                              case op of wild1 { GHC.Ptr.Ptr addr ->
                                              (# ipv,
                                                 GHC.Ptr.Ptr
                                                   @ GHC.Word.Word8
                                                   (GHC.Prim.plusAddr# addr dt) #) } })
                                               `cast`
                                             (<GHC.Word.Word8>_R
                                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                              ->_R Sym (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)) }
                                       } in
                                       let {
                                         bound :: GHC.Types.Int
                                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                                           GHC.Types.I# dt }
                                       } in
                                       case Data.Binary.Put.$WPairS
                                              @ ()
                                              GHC.Tuple.()
                                              (\ @ r ->
                                               letrec {
                                                 step :: [GHC.Word.Word8]
                                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                                             -> GHC.Types.IO
                                                                  (Data.ByteString.Builder.Internal.BuildSignal
                                                                     r))
                                                         -> Data.ByteString.Builder.Internal.BufferRange
                                                         -> GHC.Types.IO
                                                              (Data.ByteString.Builder.Internal.BuildSignal
                                                                 r)
                                                   {- Arity: 3 -}
                                                 = \ (xs1 :: [GHC.Word.Word8])
                                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                                           -> GHC.Types.IO
                                                                (Data.ByteString.Builder.Internal.BuildSignal
                                                                   r))
                                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                                   let {
                                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                                   } in
                                                   letrec {
                                                     go :: [GHC.Word.Word8]
                                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                                           -> GHC.Types.IO
                                                                (Data.ByteString.Builder.Internal.BuildSignal
                                                                   r)
                                                       {- Arity: 2 -}
                                                     = \ (ds1 :: [GHC.Word.Word8])
                                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                                       case ds1 of wild1 {
                                                         []
                                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                                 op1
                                                                 ope0) }
                                                         : x' xs'
                                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                                            case GHC.Prim.ltAddr#
                                                                   dt1
                                                                   (GHC.Prim.plusAddr#
                                                                      ipv
                                                                      dt2) of lwild {
                                                              DEFAULT
                                                              -> (\ (s :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld) ->
                                                                  case (ds2 x' op1)
                                                                         `cast`
                                                                       (GHC.Types.N:IO[0]
                                                                            <GHC.Ptr.Ptr
                                                                               GHC.Word.Word8>_R)
                                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                                  (go xs' ipv2)
                                                                    `cast`
                                                                  (GHC.Types.N:IO[0]
                                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                                          r>_R)
                                                                    ipv1 })
                                                                   `cast`
                                                                 (Sym (GHC.Types.N:IO[0]
                                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                                              r>_R))
                                                              1#
                                                              -> (\ (s :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld) ->
                                                                  (# s,
                                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                                       @ r
                                                                       bound
                                                                       op1
                                                                       (step wild1 k) #))
                                                                   `cast`
                                                                 (Sym (GHC.Types.N:IO[0]
                                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                                              r>_R)) } } } }
                                                   } in
                                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                                               } in
                                               step xs)
                                                `cast`
                                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                                       w' })) of wild { Data.Binary.Put.PairS ds w' ->
                            w' })))
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                 } in
                 let {
                   $j1 :: Data.Binary.Put.Put <join 0>
                   = (Data.Binary.Put.$WPairS
                        @ ()
                        GHC.Tuple.()
                        (Data.ByteString.Builder.Internal.append
                           (case Data.Binary.Put.$WPairS
                                   @ ()
                                   GHC.Tuple.()
                                   (Data.ByteString.Builder.Prim.primBounded
                                      @ GHC.Word.Word8
                                      (Data.ByteString.Builder.Prim.Internal.toB
                                         @ GHC.Word.Word8
                                         Data.ByteString.Builder.Prim.Binary.word8)
                                      (GHC.Word.W8# 0##)) of wild { Data.Binary.Put.PairS ds w ->
                            w })
                           (case Data.Binary.Put.$WPairS
                                   @ ()
                                   GHC.Tuple.()
                                   (Data.ByteString.Builder.Prim.primBounded
                                      @ GHC.Word.Word64
                                      (Data.ByteString.Builder.Prim.Internal.toB
                                         @ GHC.Word.Word64
                                         Data.ByteString.Builder.Prim.Binary.word64BE)
                                      (case n of wild {
                                         GHC.Natural.NatS# w# -> GHC.Word.W64# w#
                                         GHC.Natural.NatJ# dt
                                         -> case GHC.Prim.indexWordArray#
                                                   dt
                                                   0# of wild1 { DEFAULT ->
                                            GHC.Word.W64#
                                              wild1 } })) of wild { Data.Binary.Put.PairS ds w' ->
                            w' })))
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                 } in
                 case 18446744073709551615 of wild {
                   GHC.Natural.NatS# a1
                   -> case n of wild1 {
                        GHC.Natural.NatS# b1
                        -> case GHC.Prim.ltWord# a1 b1 of lwild { DEFAULT -> $j1 1# -> $j }
                        GHC.Natural.NatJ# ipv -> $j }
                   GHC.Natural.NatJ# dt
                   -> case n of wild1 {
                        GHC.Natural.NatS# ipv -> $j1
                        GHC.Natural.NatJ# dt1
                        -> let {
                             ny# :: GHC.Integer.Type.GmpSize#
                             = GHC.Prim.uncheckedIShiftRL# (GHC.Prim.sizeofByteArray# dt1) 3#
                           } in
                           let {
                             nx# :: GHC.Integer.Type.GmpSize#
                             = GHC.Prim.uncheckedIShiftRL# (GHC.Prim.sizeofByteArray# dt) 3#
                           } in
                           case GHC.Prim.==# nx# ny# of lwild {
                             DEFAULT
                             -> case GHC.Prim.<# nx# ny# of lwild1 { DEFAULT -> $j1 1# -> $j }
                             1#
                             -> case {__pkg_ccall integer-gmp-1.0.2.0 GHC.Prim.ByteArray#
                                                                      -> GHC.Prim.ByteArray#
                                                                      -> GHC.Prim.Int#
                                                                      -> GHC.Prim.State#
                                                                           GHC.Prim.RealWorld
                                                                      -> (# GHC.Prim.State#
                                                                              GHC.Prim.RealWorld,
                                                                            GHC.Prim.Int# #)}
                                       dt
                                       dt1
                                       nx#
                                       GHC.Prim.realWorld# of wild2 { (#,#) ds ds1 ->
                                case GHC.Prim.<# (GHC.Prim.narrow32Int# ds1) 0# of lwild1 {
                                  DEFAULT -> $j1 1# -> $j } } } } }) -}
9a9527d3efd5fac0e11893b58dd546b6
  $fBinaryNatural_$cputList ::
    [GHC.Natural.Natural] -> Data.Binary.Put.Put
  {- Arity: 1 -}
eaf5ceed2d5bd79068d6c94efc3a4d01
  $fBinaryNatural_$sgo :: GHC.Prim.ByteArray# -> [GHC.Word.Word8]
  {- Arity: 1, Strictness: <L,U> -}
e1542659993d849070912e58028dbbde
  $fBinaryNatural_$sgo1 :: GHC.Prim.Word# -> [GHC.Word.Word8]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
17600984073c5a1a21a0a568f189535d
  $fBinaryNatural_go :: GHC.Natural.Natural -> [GHC.Word.Word8]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (b2 :: GHC.Natural.Natural) ->
                 let {
                   $j :: [GHC.Word.Word8] <join 0>
                   = GHC.Types.:
                       @ GHC.Word.Word8
                       (case b2 of wild {
                          GHC.Natural.NatS# w# -> GHC.Word.W8# (GHC.Prim.narrow8Word# w#)
                          GHC.Natural.NatJ# dt
                          -> case GHC.Prim.indexWordArray# dt 0# of wild1 { DEFAULT ->
                             GHC.Word.W8# (GHC.Prim.narrow8Word# wild1) } })
                       (case b2 of wild {
                          GHC.Natural.NatS# w1
                          -> Data.Binary.Class.$fBinaryNatural_$sgo1
                               (GHC.Prim.uncheckedShiftRL# w1 8#)
                          GHC.Natural.NatJ# dt
                          -> case GHC.Integer.Type.$wshiftRBigNat
                                    dt
                                    8# of wild1 { GHC.Integer.Type.BN# x# ->
                             case GHC.Prim.uncheckedIShiftRL#
                                    (GHC.Prim.sizeofByteArray# x#)
                                    3# of wild2 {
                               DEFAULT
                               -> case GHC.Prim.sizeofByteArray# x# of wild3 {
                                    DEFAULT -> Data.Binary.Class.$fBinaryNatural_$sgo x#
                                    0#
                                    -> case GHC.Natural.underflowError
                                       ret_ty [GHC.Word.Word8]
                                       of {} }
                               1#
                               -> case GHC.Prim.indexWordArray# x# 0# of wild3 { DEFAULT ->
                                  Data.Binary.Class.$fBinaryNatural_$sgo1 wild3 } } } })
                 } in
                 case b2 of wild {
                   GHC.Natural.NatS# a1
                   -> case Data.Binary.Class.$fBinaryNatural1 of wild1 {
                        GHC.Natural.NatS# b1
                        -> case GHC.Prim.eqWord# a1 b1 of lwild {
                             DEFAULT -> $j 1# -> GHC.Types.[] @ GHC.Word.Word8 }
                        GHC.Natural.NatJ# ipv -> $j }
                   GHC.Natural.NatJ# dt
                   -> case Data.Binary.Class.$fBinaryNatural1 of wild1 {
                        GHC.Natural.NatS# ipv -> $j
                        GHC.Natural.NatJ# dt1
                        -> let {
                             nx# :: GHC.Integer.Type.GmpSize#
                             = GHC.Prim.uncheckedIShiftRL# (GHC.Prim.sizeofByteArray# dt) 3#
                           } in
                           case GHC.Prim.==#
                                  nx#
                                  (GHC.Prim.uncheckedIShiftRL#
                                     (GHC.Prim.sizeofByteArray# dt1)
                                     3#) of lwild {
                             DEFAULT -> $j
                             1#
                             -> case {__pkg_ccall integer-gmp-1.0.2.0 GHC.Prim.ByteArray#
                                                                      -> GHC.Prim.ByteArray#
                                                                      -> GHC.Prim.Int#
                                                                      -> GHC.Prim.State#
                                                                           GHC.Prim.RealWorld
                                                                      -> (# GHC.Prim.State#
                                                                              GHC.Prim.RealWorld,
                                                                            GHC.Prim.Int# #)}
                                       dt
                                       dt1
                                       nx#
                                       GHC.Prim.realWorld# of wild2 { (#,#) ds2 ds3 ->
                                case ds3 of wild3 {
                                  DEFAULT -> $j 0# -> GHC.Types.[] @ GHC.Word.Word8 } } } } }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryNonEmpty ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (GHC.Base.NonEmpty a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,C(C1(U)),C(U(U,U)))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (GHC.Base.NonEmpty a)
                  (Data.Binary.Class.$fBinaryNonEmpty_$cput @ a v)
                  (Data.Binary.Class.$fBinaryNonEmpty1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Base.NonEmpty a>_R))
                  (Data.Binary.Class.$fBinaryNonEmpty_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryNonEmpty1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (GHC.Base.NonEmpty a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success (GHC.Base.NonEmpty a) r) ->
                 case w1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget16 @ a w @ r ww1 ww2 ww3 ww4 w2 }) -}
0bcbfc111b849a7a4f1fa986a31bdb61
  $fBinaryNonEmpty2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Binary.Class.$fBinaryNonEmpty3) -}
d84706a7d9231299af414439e3b5a354
  $fBinaryNonEmpty3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NonEmpty is empty!"#) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryNonEmpty_$cput ::
    Data.Binary.Class.Binary a =>
    GHC.Base.NonEmpty a -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(S)),1*U(A,A,1*C1(U(U,U)))><L,U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   (eta :: GHC.Base.NonEmpty a) ->
                 Data.Binary.Class.putList
                   @ a
                   $dBinary
                   (GHC.Types.:
                      @ a
                      (case eta of wild { GHC.Base.:| a1 as -> a1 })
                      (case eta of wild { GHC.Base.:| a1 as -> as }))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryNonEmpty_$cputList ::
    Data.Binary.Class.Binary a =>
    [GHC.Base.NonEmpty a] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(A,C(C1(U)),C(U(U,U)))> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryOption ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Semigroup.Option a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Semigroup.Option a)
                  (Data.Binary.Class.$fBinaryFirst0_$cput @ a v)
                    `cast`
                  (Sym (Data.Semigroup.N:Option[0]) <a>_N
                   ->_R <Data.Binary.Put.Put>_R)
                  (Data.Binary.Class.$fBinaryOption1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.Option a>_R))
                  (Data.Binary.Class.$fBinaryOption_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryOption1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Semigroup.Option a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.Option a) r) ->
                 Data.Binary.Class.$fBinaryFirst3
                   @ a
                   $dBinary
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Maybe.Maybe a)[OneShot] ->
                    eta1 i' a1 `cast` (Sym (Data.Semigroup.N:Option[0]) <a>_N))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryOption_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Semigroup.Option a] -> Data.Binary.Put.Put
  {- Arity: 1,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryOrdering :: Data.Binary.Class.Binary GHC.Types.Ordering
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Ordering
                  Data.Binary.Class.$fBinaryOrdering4
                    `cast`
                  (<GHC.Types.Ordering>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryOrdering1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.Ordering>_R))
                  Data.Binary.Class.$fBinaryOrdering_$cputList -}
0a74f8ca91582dc154653ca2ed10dcaf
  $fBinaryOrdering1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.Ordering r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.Ordering r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget17 @ r ww1 ww2 ww3 ww4 w1 }) -}
11baf6c627ddca9b4c47a290627bc2ca
  $fBinaryOrdering2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Binary.Class.$fBinaryOrdering3) -}
5cee47a0f2c80c92f88066ac271834b0
  $fBinaryOrdering3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" to Ordering"#) -}
00652f87745dd13ee648dbcbccb94f40
  $fBinaryOrdering4 :: GHC.Types.Ordering -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Ordering) ->
                 case Data.Binary.Class.$w$cput14 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
54baa97b81450bc6bcf68a42352dd02f
  $fBinaryOrdering_$cputList ::
    [GHC.Types.Ordering] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryProduct ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Semigroup.Internal.Product a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Semigroup.Internal.Product a)
                  (\ (eta :: Data.Semigroup.Internal.Product a) ->
                   Data.Binary.Class.put
                     @ a
                     v
                     eta `cast` (Data.Semigroup.Internal.N:Product[0] <a>_R))
                  (Data.Binary.Class.$fBinaryProduct1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.Internal.Product a>_R))
                  (Data.Binary.Class.$fBinaryProduct_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryProduct1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Data.Semigroup.Internal.Product a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.Internal.Product a) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1
                      i'
                      a1 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryProduct_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Semigroup.Internal.Product a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryRatio ::
    (Data.Binary.Class.Binary a, GHC.Real.Integral a) =>
    Data.Binary.Class.Binary (GHC.Real.Ratio a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      (v :: Data.Binary.Class.Binary a)
                      (v1 :: GHC.Real.Integral a).
                  @ (GHC.Real.Ratio a)
                  (Data.Binary.Class.$fBinaryRatio2 @ a v v1)
                    `cast`
                  (<GHC.Real.Ratio a>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  (Data.Binary.Class.$fBinaryRatio1 @ a v v1)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Real.Ratio a>_R))
                  (Data.Binary.Class.$fBinaryRatio_$cputList @ a v v1) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryRatio1 ::
    (Data.Binary.Class.Binary a, GHC.Real.Integral a) =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (GHC.Real.Ratio a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4,
     Strictness: <S(LC(C(S))L),1*U(A,C(C1(U)),A)><L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: GHC.Real.Integral a)
                   @ r
                   (w2 :: Data.ByteString.Internal.ByteString)
                   (w3 :: Data.Binary.Get.Internal.Success (GHC.Real.Ratio a) r) ->
                 case w of ww { Data.Binary.Class.C:Binary ww1 ww2 ww3 ->
                 Data.Binary.Class.$w$cget18 @ a ww2 w1 @ r w2 w3 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryRatio2 ::
    (Data.Binary.Class.Binary a, GHC.Real.Integral a) =>
    GHC.Real.Ratio a -> Data.Binary.Put.PairS ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,A><L,U(U,U)>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: GHC.Real.Integral a)
                   (w2 :: GHC.Real.Ratio a) ->
                 case Data.Binary.Class.$w$cput15 @ a w w2 of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryRatio_$cputList ::
    (Data.Binary.Class.Binary a, GHC.Real.Integral a) =>
    [GHC.Real.Ratio a] -> Data.Binary.Put.Put
  {- Arity: 2,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryRuntimeRep :: Data.Binary.Class.Binary GHC.Types.RuntimeRep
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.RuntimeRep
                  Data.Binary.Class.$fBinaryRuntimeRep_$cput
                  Data.Binary.Class.$fBinaryRuntimeRep1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.RuntimeRep>_R))
                  Data.Binary.Class.$fBinaryRuntimeRep_$cputList -}
47d52e5a68d8b4cce4522e53685b5442
  $fBinaryRuntimeRep1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.RuntimeRep r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.RuntimeRep r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget19 @ r ww1 ww2 ww3 ww4 w1 }) -}
7c66dd954a61c6d34aff0f7875f61fac
  $fBinaryRuntimeRep_$cput ::
    GHC.Types.RuntimeRep -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.RuntimeRep) ->
                 case Data.Binary.Class.$w$cput16 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
dbf1c5047fe43e37a8941eeccd05a8ec
  $fBinaryRuntimeRep_$cputList ::
    [GHC.Types.RuntimeRep] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySeq ::
    Data.Binary.Class.Binary e =>
    Data.Binary.Class.Binary (Data.Sequence.Internal.Seq e)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ e (v :: Data.Binary.Class.Binary e).
                  @ (Data.Sequence.Internal.Seq e)
                  (Data.Binary.Class.$fBinarySeq2 @ e v)
                    `cast`
                  (<Data.Sequence.Internal.Seq e>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  (Data.Binary.Class.$fBinarySeq1 @ e v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Sequence.Internal.Seq e>_R))
                  (Data.Binary.Class.$fBinarySeq_$cputList @ e v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySeq1 ::
    Data.Binary.Class.Binary e =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Data.Sequence.Internal.Seq e) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,1*U(A,1*C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ e
                   (w :: Data.Binary.Class.Binary e)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success
                            (Data.Sequence.Internal.Seq e) r) ->
                 case w1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget20 @ e w @ r ww1 ww2 ww3 ww4 w2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySeq2 ::
    Data.Binary.Class.Binary e =>
    Data.Sequence.Internal.Seq e -> Data.Binary.Put.PairS ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ e
                   (w :: Data.Binary.Class.Binary e)
                   (w1 :: Data.Sequence.Internal.Seq e) ->
                 case Data.Binary.Class.$w$cput17 @ e w w1 of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySeq_$cputList ::
    Data.Binary.Class.Binary e =>
    [Data.Sequence.Internal.Seq e] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)> -}
a89634ae6e93b28dff2d1a2beb2012b0
  $fBinarySeq_$s$wpoly_rep ::
    (Data.ByteString.Internal.ByteString
     -> Data.Sequence.Internal.Seq e
     -> Data.Binary.Get.Internal.Decoder r)
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Get e
    -> GHC.Prim.Int#
    -> (Data.Sequence.Internal.FingerTree
          (Data.Sequence.Internal.Elem e)
        ~R# Data.Sequence.Internal.Seq e) =>
       Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><L,C(C1(U))><S,1*U><L,A>,
     Unfolding: (\ @ r
                   @ e
                   (sc :: Data.ByteString.Internal.ByteString
                          -> Data.Sequence.Internal.Seq e
                          -> Data.Binary.Get.Internal.Decoder r)
                   (sc1 :: Data.ByteString.Internal.ByteString)
                   (sc2 :: Data.Binary.Get.Internal.Get e)
                   (sc3 :: GHC.Prim.Int#)
                   (sg :: Data.Sequence.Internal.FingerTree
                            (Data.Sequence.Internal.Elem e)
                          ~R# Data.Sequence.Internal.Seq e) ->
                 case sc3 of wild {
                   DEFAULT
                   -> let {
                        lvl59 :: GHC.Prim.Int# = GHC.Prim.-# wild 1#
                      } in
                      sc2 `cast` (Data.Binary.Get.Internal.N:Get[0] <e>_R)
                        @ r
                        sc1
                        (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: e) ->
                         Data.Binary.Class.$fBinarySeq_$s$wpoly_rep1
                           @ r
                           @ e
                           sc
                           i'
                           sc2
                           lvl59
                           a1 `cast` (Sym (Data.Sequence.Internal.N:Elem[0] <e>_R))
                           @~ (Sym (Data.Sequence.Internal.N:Seq[0] <e>_R)))
                   0#
                   -> sc
                        sc1
                        (Data.Sequence.Internal.EmptyT @ (Data.Sequence.Internal.Elem e))
                          `cast`
                        (Sym (Data.Sequence.Internal.N:Seq[0] <e>_R)) }) -}
1159c6998d2b53c3fb9ea70e9243cad4
  $fBinarySeq_$s$wpoly_rep1 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Sequence.Internal.Seq e
     -> Data.Binary.Get.Internal.Decoder r)
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Get e
    -> GHC.Prim.Int#
    -> Data.Sequence.Internal.Elem e
    -> (Data.Sequence.Internal.FingerTree
          (Data.Sequence.Internal.Elem e)
        ~R# Data.Sequence.Internal.Seq e) =>
       Data.Binary.Get.Internal.Decoder r
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><L,C(C1(U))><S,1*U><L,U><L,A>,
     Unfolding: (\ @ r
                   @ e
                   (sc :: Data.ByteString.Internal.ByteString
                          -> Data.Sequence.Internal.Seq e
                          -> Data.Binary.Get.Internal.Decoder r)
                   (sc1 :: Data.ByteString.Internal.ByteString)
                   (sc2 :: Data.Binary.Get.Internal.Get e)
                   (sc3 :: GHC.Prim.Int#)
                   (sc4 :: Data.Sequence.Internal.Elem e)
                   (sg :: Data.Sequence.Internal.FingerTree
                            (Data.Sequence.Internal.Elem e)
                          ~R# Data.Sequence.Internal.Seq e) ->
                 case sc3 of wild {
                   DEFAULT
                   -> let {
                        lvl59 :: GHC.Prim.Int# = GHC.Prim.-# wild 1#
                      } in
                      sc2 `cast` (Data.Binary.Get.Internal.N:Get[0] <e>_R)
                        @ r
                        sc1
                        (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: e) ->
                         Data.Binary.Class.$fBinarySeq_$s$wpoly_rep2
                           @ r
                           @ e
                           sc
                           i'
                           sc2
                           lvl59
                           2#
                           (Data.Sequence.Internal.One @ (Data.Sequence.Internal.Elem e) sc4)
                           (Data.Sequence.Internal.EmptyT
                              @ (Data.Sequence.Internal.Node (Data.Sequence.Internal.Elem e)))
                           a1 `cast` (Sym (Data.Sequence.Internal.N:Elem[0] <e>_R))
                           @~ (Sym (Data.Sequence.Internal.N:Seq[0] <e>_R)))
                   0#
                   -> sc
                        sc1
                        (Data.Sequence.Internal.Single
                           @ (Data.Sequence.Internal.Elem e)
                           sc4)
                          `cast`
                        (Sym (Data.Sequence.Internal.N:Seq[0] <e>_R)) }) -}
a9a72f23a34132b6439090d4db1cdc7a
  $fBinarySeq_$s$wpoly_rep2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Sequence.Internal.Seq e
     -> Data.Binary.Get.Internal.Decoder r)
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Get e
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Sequence.Internal.Digit (Data.Sequence.Internal.Elem e)
    -> Data.Sequence.Internal.FingerTree
         (Data.Sequence.Internal.Node (Data.Sequence.Internal.Elem e))
    -> Data.Sequence.Internal.Elem e
    -> (Data.Sequence.Internal.FingerTree
          (Data.Sequence.Internal.Elem e)
        ~R# Data.Sequence.Internal.Seq e) =>
       Data.Binary.Get.Internal.Decoder r
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><L,C(C1(U))><S,1*U><L,U><L,U><L,U><L,U><L,A> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySet ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Set.Internal.Set a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Set.Internal.Set a)
                  (Data.Binary.Class.$fBinarySet2 @ a v)
                    `cast`
                  (<Data.Set.Internal.Set a>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  (Data.Binary.Class.$fBinarySet1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Set.Internal.Set a>_R))
                  (Data.Binary.Class.$fBinarySet_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySet1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Set.Internal.Set a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success
                            (Data.Set.Internal.Set a) r) ->
                 case w1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget21 @ a w @ r ww1 ww2 ww3 ww4 w2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySet2 ::
    Data.Binary.Class.Binary a =>
    Data.Set.Internal.Set a -> Data.Binary.Put.PairS ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: Data.Set.Internal.Set a) ->
                 case Data.Binary.Class.$w$cput18 @ a w w1 of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySet_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Set.Internal.Set a] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryShortByteString ::
    Data.Binary.Class.Binary
      Data.ByteString.Short.Internal.ShortByteString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Short.Internal.ShortByteString
                  Data.Binary.Class.$fBinaryShortByteString4
                    `cast`
                  (<Data.ByteString.Short.Internal.ShortByteString>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryShortByteString1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.ByteString.Short.Internal.ShortByteString>_R))
                  Data.Binary.Class.$fBinaryShortByteString_$cputList -}
917c2bea698b47d652fe2dfda4640425
  $fBinaryShortByteString1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         Data.ByteString.Short.Internal.ShortByteString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Data.ByteString.Short.Internal.ShortByteString r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget22 @ r ww1 ww2 ww3 ww4 w1 }) -}
f514a487f4aecb85200e3b8af0d46d24
  $fBinaryShortByteString2 ::
    Data.ByteString.Short.Internal.ShortByteString
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.ByteString.Short.Internal.ShortByteString #)
                        Data.Binary.Class.$fBinaryShortByteString3 of ds1 { (#,#) ipv4 ipv5 ->
                 ipv5 }) -}
531905a1b6601cc321bc343a677fc2f2
  $fBinaryShortByteString3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Short.Internal.ShortByteString #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        0#
                        s of ds { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.copyAddrToByteArray#
                        @ GHC.Prim.RealWorld
                        __NULL
                        ipv5
                        0#
                        0#
                        ipv4 of s1 { DEFAULT ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        Data.ByteString.Internal.$fMonoidByteString1
                        s1 of s' { DEFAULT ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        s' of ds1 { (#,#) ipv6 ipv7 ->
                 (# ipv6, Data.ByteString.Short.Internal.SBS ipv7 #) } } } }) -}
7f02cb9d51f6f0b1b4645a6195e4b1d9
  $fBinaryShortByteString4 ::
    Data.ByteString.Short.Internal.ShortByteString
    -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Short.Internal.ShortByteString) ->
                 case Data.Binary.Class.$w$cput19 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
b17c1b494bb24c21288ba37f40ef6ac4
  $fBinaryShortByteString_$cputList ::
    [Data.ByteString.Short.Internal.ShortByteString]
    -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySomeTypeRep ::
    Data.Binary.Class.Binary Data.Typeable.Internal.SomeTypeRep
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Typeable.Internal.SomeTypeRep
                  Data.Binary.Class.$fBinarySomeTypeRep_$cput
                  Data.Binary.Class.$fBinarySomeTypeRep1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Typeable.Internal.SomeTypeRep>_R))
                  Data.Binary.Class.$fBinarySomeTypeRep_$cputList -}
f10176e956b08bf543e520684a860cfc
  $fBinarySomeTypeRep1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         Data.Typeable.Internal.SomeTypeRep r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            Data.Typeable.Internal.SomeTypeRep r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$wgetSomeTypeRep @ r ww1 ww2 ww3 ww4 w1 }) -}
b3d647f40b9effa545c814aefe405ada
  $fBinarySomeTypeRep_$cput ::
    Data.Typeable.Internal.SomeTypeRep -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Typeable.Internal.SomeTypeRep) ->
                 case ds of wild { Data.Typeable.Internal.SomeTypeRep k a rep ->
                 Data.Binary.Class.putTypeRep @ k @ a rep }) -}
ceaca06a0cd3ee718f69db890ac106c3
  $fBinarySomeTypeRep_$cputList ::
    [Data.Typeable.Internal.SomeTypeRep] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySum ::
    Data.Binary.Class.Binary a =>
    Data.Binary.Class.Binary (Data.Semigroup.Internal.Sum a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ (Data.Semigroup.Internal.Sum a)
                  (\ (eta :: Data.Semigroup.Internal.Sum a) ->
                   Data.Binary.Class.put
                     @ a
                     v
                     eta `cast` (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                  (Data.Binary.Class.$fBinarySum1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.Internal.Sum a>_R))
                  (Data.Binary.Class.$fBinarySum_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySum1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Data.Semigroup.Internal.Sum a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dBinary :: Data.Binary.Class.Binary a)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.Internal.Sum a) r) ->
                 (Data.Binary.Class.get @ a $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    eta1
                      i'
                      a1 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinarySum_$cputList ::
    Data.Binary.Class.Binary a =>
    [Data.Semigroup.Internal.Sum a] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryTree ::
    Data.Binary.Class.Binary e =>
    Data.Binary.Class.Binary (Data.Tree.Tree e)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ e (v :: Data.Binary.Class.Binary e).
                  @ (Data.Tree.Tree e)
                  (Data.Binary.Class.$fBinaryTree_$cput @ e v)
                  (Data.Binary.Class.$fBinaryTree_$cget @ e v)
                  (Data.Binary.Class.$fBinaryTree_$cputList @ e v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryTree_$cget ::
    Data.Binary.Class.Binary e =>
    Data.Binary.Get.Internal.Get (Data.Tree.Tree e)
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryTree_$cput ::
    Data.Binary.Class.Binary e =>
    Data.Tree.Tree e -> Data.Binary.Put.Put
  {- Arity: 2,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><S,1*U(U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ e
                   (w :: Data.Binary.Class.Binary e)
                   (w1 :: Data.Tree.Tree e) ->
                 case w1 of ww { Data.Tree.Node ww1 ww2 ->
                 case Data.Binary.Class.$w$cput20
                        @ e
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryTree_$cputList ::
    Data.Binary.Class.Binary e =>
    [Data.Tree.Tree e] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryTyCon :: Data.Binary.Class.Binary GHC.Types.TyCon
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.TyCon
                  Data.Binary.Class.$fBinaryTyCon_$cput
                  Data.Binary.Class.$fBinaryTyCon1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.TyCon>_R))
                  Data.Binary.Class.$fBinaryTyCon_$cputList -}
c43e7e3d72d6fa5e449348054d81e087
  $fBinaryTyCon1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.TyCon r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.TyCon r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget23 @ r ww1 ww2 ww3 ww4 w1 }) -}
1c1e8ce1e115e6a21597702ffa3da42b
  $fBinaryTyCon_$cput :: GHC.Types.TyCon -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(A,A,U(U,U),U,U,U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.TyCon) ->
                 case Data.Binary.Class.$w$cput21 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
74dea62a5546b0796521d2cfe94ff2fb
  $fBinaryTyCon_$cputList :: [GHC.Types.TyCon] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryTypeLitSort ::
    Data.Binary.Class.Binary GHC.Types.TypeLitSort
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.TypeLitSort
                  Data.Binary.Class.$fBinaryTypeLitSort_$cput
                  Data.Binary.Class.$fBinaryTypeLitSort1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.TypeLitSort>_R))
                  Data.Binary.Class.$fBinaryTypeLitSort_$cputList -}
42d0a6e891a42ab1edece60f2fe2aa45
  $fBinaryTypeLitSort1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.TypeLitSort r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.TypeLitSort r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget25 @ r ww1 ww2 ww3 ww4 w1 }) -}
6a8bd8285801f0f9729ecbdae404b19e
  $fBinaryTypeLitSort2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Binary.Class.$fBinaryTypeLitSort3) -}
b9aa0740fc5ee24d7b84064182d86308
  $fBinaryTypeLitSort3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("GHCi.TH.Binary.putTypeLitSort: invalid tag"#) -}
d4736f9cbf3cc184db013b63b7f7dc6f
  $fBinaryTypeLitSort4 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Data.Binary.Class.$fBinaryTypeLitSort5
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
899fd72f61987af6ac4cb266a3ce7246
  $fBinaryTypeLitSort5 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Data.Binary.Class.$wlvl1 @ r w ww1 ww2 w2 }) -}
645f3b2aaf9632f36289ef4f258662e9
  $fBinaryTypeLitSort6 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   Data.Binary.Class.$fBinaryFirst4
                     `cast`
                   ((forall (r :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
bef62f034eecea313aff527880479a15
  $fBinaryTypeLitSort_$cput ::
    GHC.Types.TypeLitSort -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.TypeLitSort) ->
                 case ds of wild {
                   GHC.Types.TypeLitSymbol
                   -> Data.Binary.Class.$fBinaryTypeLitSort6
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                   GHC.Types.TypeLitNat
                   -> Data.Binary.Class.$fBinaryTypeLitSort4
                        `cast`
                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
b68cedeecaa336935ca30b991ee5a58a
  $fBinaryTypeLitSort_$cputList ::
    [GHC.Types.TypeLitSort] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryTypeRep ::
    forall k (a :: k).
    Data.Typeable.Internal.Typeable a =>
    Data.Binary.Class.Binary (Data.Typeable.Internal.TypeRep a)
  DFunId
  {- Arity: 1, Strictness: <L,U>m, Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ a :: k
                      (v :: Data.Typeable.Internal.Typeable a).
                  @ (Data.Typeable.Internal.TypeRep a)
                  (Data.Binary.Class.putTypeRep @ k @ a)
                  (Data.Binary.Class.$fBinaryTypeRep1 @ k @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Typeable.Internal.TypeRep a>_R))
                  (Data.Binary.Class.$fBinaryTypeRep_$cputList @ k @ a v) -}
cfa9390f658018b4dcfa9af4eaaa1be6
  $fBinaryTypeRep1 ::
    forall k (a :: k) r.
    Data.Typeable.Internal.Typeable a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Data.Typeable.Internal.TypeRep a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ a :: k
                   (w :: Data.Typeable.Internal.Typeable a)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success
                            (Data.Typeable.Internal.TypeRep a) r) ->
                 case w1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget26 @ k @ a w @ r ww1 ww2 ww3 ww4 w2 }) -}
39c82df3ff9bcca6512b782e2e47b237
  $fBinaryTypeRep2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("    Deserialized type: "#) -}
51574ccf7a27695dd846ac2494d1129e
  $fBinaryTypeRep3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.Binary.Class.$fBinaryTypeRep4) -}
13b135f8ea41502fbc1d43cf0125d1f3
  $fBinaryTypeRep4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GHCi.TH.Binary: Type mismatch"#) -}
ec99daf8f08913ac3840e2c50c88ba0b
  $fBinaryTypeRep5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("    Expected type:     "#) -}
5cf8e4695eca66ade88a0f1b218cacc9
  $fBinaryTypeRep_$cputList ::
    forall k (a :: k).
    Data.Typeable.Internal.Typeable a =>
    [Data.Typeable.Internal.TypeRep a] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryUArray ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e,
     Data.Array.Base.IArray Data.Array.Base.UArray e) =>
    Data.Binary.Class.Binary (Data.Array.Base.UArray i e)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(U,U,U,U,U,U,U)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(C1(U(U,U))),C(C1(U(U))),C(C1(C1(U))),C(C1(C1(U))),A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ i
                      @ e
                      (v :: Data.Binary.Class.Binary i)
                      (v1 :: GHC.Arr.Ix i)
                      (v2 :: Data.Binary.Class.Binary e)
                      (v3 :: Data.Array.Base.IArray Data.Array.Base.UArray e).
                  @ (Data.Array.Base.UArray i e)
                  (Data.Binary.Class.$fBinaryUArray2 @ i @ e v v1 v2 v3)
                    `cast`
                  (<Data.Array.Base.UArray i e>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  (Data.Binary.Class.$fBinaryUArray1 @ i @ e v v1 v2 v3)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Array.Base.UArray i e>_R))
                  (Data.Binary.Class.$fBinaryUArray_$cputList @ i @ e v v1 v2 v3) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryUArray1 ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e,
     Data.Array.Base.IArray Data.Array.Base.UArray e) =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Data.Array.Base.UArray i e) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <S(LC(C(S))L),1*U(A,C(C1(U)),A)><L,U(U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A)><L,U(A,A,C(C1(C1(U))),A,A,A,A)><L,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (6, True, False)
                (\ @ i
                   @ e
                   (w :: Data.Binary.Class.Binary i)
                   (w1 :: GHC.Arr.Ix i)
                   (w2 :: Data.Binary.Class.Binary e)
                   (w3 :: Data.Array.Base.IArray Data.Array.Base.UArray e)
                   @ r
                   (w4 :: Data.ByteString.Internal.ByteString)
                   (w5 :: Data.Binary.Get.Internal.Success
                            (Data.Array.Base.UArray i e) r) ->
                 case w of ww { Data.Binary.Class.C:Binary ww1 ww2 ww3 ->
                 Data.Binary.Class.$w$cget27 @ i @ e ww2 w1 w2 w3 @ r w4 w5 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryUArray2 ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e,
     Data.Array.Base.IArray Data.Array.Base.UArray e) =>
    Data.Array.Base.UArray i e -> Data.Binary.Put.PairS ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U(U,U,U,U,U,U,U)><L,U(C(U(A,C(U))),A,A)><L,U(C(C1(U(U,U))),C(C1(U(U))),A,C(C1(C1(U))),A,A,A)><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ i
                   @ e
                   (w :: Data.Binary.Class.Binary i)
                   (w1 :: GHC.Arr.Ix i)
                   (w2 :: Data.Binary.Class.Binary e)
                   (w3 :: Data.Array.Base.IArray Data.Array.Base.UArray e)
                   (w4 :: Data.Array.Base.UArray i e) ->
                 case Data.Binary.Class.$w$cput22
                        @ i
                        @ e
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryUArray_$cputList ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e,
     Data.Array.Base.IArray Data.Array.Base.UArray e) =>
    [Data.Array.Base.UArray i e] -> Data.Binary.Put.Put
  {- Arity: 4,
     Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(U,U,U,U,U,U,U)><L,U(C(U(A,C(U))),C(C1(U)),A)><L,U(C(C1(U(U,U))),C(C1(U(U))),C(C1(C1(U))),C(C1(C1(U))),A,A,A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryVecCount :: Data.Binary.Class.Binary GHC.Types.VecCount
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.VecCount
                  Data.Binary.Class.$fBinaryVecCount2
                    `cast`
                  (<GHC.Types.VecCount>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryVecCount1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.VecCount>_R))
                  Data.Binary.Class.$fBinaryVecCount_$cputList -}
0cf4eb56294e6b786f413657cab28ed8
  $fBinaryVecCount1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.VecCount r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.VecCount r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget28 @ r ww1 ww2 ww3 ww4 w1 }) -}
e91ff991affffbbf08c25d3bfe5f1ffb
  $fBinaryVecCount2 :: GHC.Types.VecCount -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.VecCount) ->
                 case Data.Binary.Class.$w$cput23 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
c17c8ce29557da04b474936a2af1a6c6
  $fBinaryVecCount_$cputList ::
    [GHC.Types.VecCount] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryVecElem :: Data.Binary.Class.Binary GHC.Types.VecElem
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.VecElem
                  Data.Binary.Class.$fBinaryVecElem2
                    `cast`
                  (<GHC.Types.VecElem>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryVecElem1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.VecElem>_R))
                  Data.Binary.Class.$fBinaryVecElem_$cputList -}
19abf8e969dce310d791dcd2682f33f7
  $fBinaryVecElem1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.VecElem r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.VecElem r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget29 @ r ww1 ww2 ww3 ww4 w1 }) -}
afb66ae0f5b0d415a3824c218f8d37a7
  $fBinaryVecElem2 :: GHC.Types.VecElem -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.VecElem) ->
                 case Data.Binary.Class.$w$cput24 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
b7c208d1fbc3e4406b35a1a125fd2932
  $fBinaryVecElem_$cputList ::
    [GHC.Types.VecElem] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryVersion :: Data.Binary.Class.Binary Data.Version.Version
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Version.Version
                  Data.Binary.Class.$fBinaryVersion_$cput
                  Data.Binary.Class.$fBinaryVersion1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <Data.Version.Version>_R))
                  Data.Binary.Class.$fBinaryVersion_$cputList -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryVersion1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Data.Version.Version r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Data.Version.Version r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget30 @ r ww1 ww2 ww3 ww4 w1 }) -}
5a8851b994e2d19a77c7a2c90916da7b
  $fBinaryVersion2 ::
    [GHC.Int.Int64]
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,U><L,U><S,U>, Inline: [2] -}
9a4201a53b2c7a21d0cadc90744c58b8
  $fBinaryVersion3 :: GHC.Types.Int -> GHC.Int.Int64
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild { GHC.Types.I# x# -> GHC.Int.I64# x# }) -}
b713b9eadfdba48a23f363c04372ddff
  $fBinaryVersion_$cput ::
    Data.Version.Version -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U,U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Version.Version) ->
                 case w of ww { Data.Version.Version ww1 ww2 ->
                 case Data.Binary.Class.$w$cput25 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
ac243fe00ba6f067a923c3923413cdb8
  $fBinaryVersion_$cputList ::
    [Data.Version.Version] -> Data.Binary.Put.Put
  {- Arity: 1 -}
5df9944357b71ccc437650a0b85f1d30
  $fBinaryVersion_$s$cget ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success [GHC.Types.Char] r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success [GHC.Types.Char] r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$s$cget2 @ r ww1 ww2 ww3 ww4 w1 }) -}
d2b7bdb45e3c808497667cbeeb828b8c
  $fBinaryVersion_$s$cputList ::
    [[GHC.Types.Char]] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryVersion_$s$fBinary[] ::
    Data.Binary.Class.Binary [GHC.Types.Char]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  Data.Binary.Class.$fBinaryChar1
                    `cast`
                  (<[GHC.Types.Char]>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryVersion_$s$cget
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <[GHC.Types.Char]>_R))
                  Data.Binary.Class.$fBinaryVersion_$s$cputList -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryVoid :: Data.Binary.Class.Binary Data.Void.Void
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Void.Void
                  (Data.Void.absurd @ Data.Binary.Put.Put)
                  (Data.Binary.Get.Internal.$fAlternativeGet_$cempty
                     @ Data.Void.Void)
                  Data.Binary.Class.$fBinaryVoid_$cputList -}
7b0ab0888f875dc6f921877b89bef50a
  $fBinaryVoid_$cputList :: [Data.Void.Void] -> Data.Binary.Put.Put
  {- Arity: 1 -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryWord :: Data.Binary.Class.Binary GHC.Types.Word
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Word
                  Data.Binary.Class.$fBinaryWord2
                    `cast`
                  (<GHC.Types.Word>_R ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  Data.Binary.Class.$fBinaryWord1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Types.Word>_R))
                  Data.Binary.Class.$fBinaryWord_$cputList -}
6dd8c65a38b8010269ad26dbb679e420
  $fBinaryWord1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Types.Word r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Types.Word r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget31 @ r ww1 ww2 ww3 ww4 w1 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryWord16 :: Data.Binary.Class.Binary GHC.Word.Word16
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word16
                  Data.Binary.Put.putWord16be
                  (Data.Binary.Get.Internal.readN
                     @ GHC.Word.Word16
                     (GHC.Types.I# 2#)
                     Data.Binary.Get.word16be)
                  Data.Binary.Class.$fBinaryWord16_$cputList -}
82fcc8f6b39ed7de3c6311099953a057
  $fBinaryWord16_$cputList ::
    [GHC.Word.Word16] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Word.Word16]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Word.Word16
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Word.Word16)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Word.Word16
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word16
                                  (GHC.Types.I# 2#)
                                  (\ (w1 :: GHC.Word.Word16)
                                     (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case p of wild { GHC.Ptr.Ptr a ->
                                   case w1 of wild1 { GHC.Word.W16# w2 ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          a
                                          0#
                                          (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                          s of s2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 1#)
                                          0#
                                          (GHC.Prim.narrow8Word# w2)
                                          s2 of s1 { DEFAULT ->
                                   (# s1, GHC.Tuple.() #) } } } })
                                    `cast`
                                  (<GHC.Word.Word16>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Word.Word16
                             (GHC.Types.I# dt)
                             (\ (x :: GHC.Word.Word16)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild1 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt) #) } })
                               `cast`
                             (<GHC.Word.Word16>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Word.Word16]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Word.Word16])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Word.Word16]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Word.Word16])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step xs)
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Word.Word16]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
aa45e49ab4d6fb8ef0f95e0e80e89ab2
  $fBinaryWord2 :: GHC.Types.Word -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Word) ->
                 case Data.Binary.Class.$w$cput26 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryWord32 :: Data.Binary.Class.Binary GHC.Word.Word32
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word32
                  Data.Binary.Put.putWord32be
                  (Data.Binary.Get.Internal.readN
                     @ GHC.Word.Word32
                     (GHC.Types.I# 4#)
                     Data.Binary.Get.word32be)
                  Data.Binary.Class.$fBinaryWord32_$cputList -}
865efb4a9942529170cb8e0031e5de22
  $fBinaryWord32_$cputList ::
    [GHC.Word.Word32] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Word.Word32]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Word.Word32
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Word.Word32)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Word.Word32
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word32
                                  (GHC.Types.I# 4#)
                                  (\ (w1 :: GHC.Word.Word32)
                                     (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case p of wild { GHC.Ptr.Ptr a ->
                                   case w1 of wild1 { GHC.Word.W32# w2 ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          a
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 24#))
                                          s of s2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 1#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 16#))
                                          s2 of s1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 2#)
                                          0#
                                          (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                          s1 of s3 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 3#)
                                          0#
                                          (GHC.Prim.narrow8Word# w2)
                                          s3 of s4 { DEFAULT ->
                                   (# s4, GHC.Tuple.() #) } } } } } })
                                    `cast`
                                  (<GHC.Word.Word32>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Word.Word32
                             (GHC.Types.I# dt)
                             (\ (x :: GHC.Word.Word32)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild1 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt) #) } })
                               `cast`
                             (<GHC.Word.Word32>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Word.Word32]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Word.Word32])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Word.Word32]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Word.Word32])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step xs)
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Word.Word32]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryWord64 :: Data.Binary.Class.Binary GHC.Word.Word64
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word64
                  Data.Binary.Put.putWord64be
                  (Data.Binary.Get.Internal.readN
                     @ GHC.Word.Word64
                     (GHC.Types.I# 8#)
                     Data.Binary.Get.word64be)
                  Data.Binary.Class.$fBinaryWord64_$cputList -}
44680986245779a42ddb4d34106cdea9
  $fBinaryWord64_$cputList ::
    [GHC.Word.Word64] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Word.Word64]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Word.Word64
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Word.Word64)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Word.Word64
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word64
                                  (GHC.Types.I# 8#)
                                  (\ (w1 :: GHC.Word.Word64)
                                     (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case p of wild { GHC.Ptr.Ptr a ->
                                   case w1 of wild1 { GHC.Word.W64# w2 ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          a
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 56#))
                                          s of s2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 1#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 48#))
                                          s2 of s1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 2#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 40#))
                                          s1 of s3 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 3#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 32#))
                                          s3 of s4 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 4#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 24#))
                                          s4 of s5 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 5#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 16#))
                                          s5 of s6 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 6#)
                                          0#
                                          (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                          s6 of s7 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 7#)
                                          0#
                                          (GHC.Prim.narrow8Word# w2)
                                          s7 of s8 { DEFAULT ->
                                   (# s8, GHC.Tuple.() #) } } } } } } } } } })
                                    `cast`
                                  (<GHC.Word.Word64>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Word.Word64
                             (GHC.Types.I# dt)
                             (\ (x :: GHC.Word.Word64)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild1 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt) #) } })
                               `cast`
                             (<GHC.Word.Word64>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Word.Word64]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Word.Word64])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Word.Word64]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Word.Word64])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step xs)
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Word.Word64]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryWord8 :: Data.Binary.Class.Binary GHC.Word.Word8
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word8
                  Data.Binary.Put.putWord8
                  (Data.Binary.Get.Internal.readN
                     @ GHC.Word.Word8
                     (GHC.Types.I# 1#)
                     Data.ByteString.Unsafe.unsafeHead)
                  Data.Binary.Class.$fBinaryWord8_$cputList -}
b44bef9dfb5a5146442872dae9441159
  $fBinaryWord8_$cputList :: [GHC.Word.Word8] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Word.Word8]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Word.Word8
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Word.Word8)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Word.Word8
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word8
                                  Foreign.Storable.$fStorable()7
                                  (\ (x :: GHC.Word.Word8) (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                   Foreign.Storable.$fStorableWord19 op x)
                                    `cast`
                                  (<GHC.Word.Word8>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Word.Word8
                             (GHC.Types.I# dt)
                             (\ (x :: GHC.Word.Word8)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild1 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt) #) } })
                               `cast`
                             (<GHC.Word.Word8>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Word.Word8]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Word.Word8])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Word.Word8]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Word.Word8])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step xs)
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Word.Word8]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
19657e38c06c574305e4c85e8cd71c99
  $fBinaryWord_$cputList :: [GHC.Types.Word] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [GHC.Types.Word]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ GHC.Types.Word
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ GHC.Types.Word)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (let {
                         w :: Data.ByteString.Builder.Prim.Internal.BoundedPrim
                                GHC.Word.Word64
                         = case Data.ByteString.Builder.Prim.Internal.$WFP
                                  @ GHC.Word.Word64
                                  (GHC.Types.I# 8#)
                                  (\ (w1 :: GHC.Word.Word64)
                                     (p :: GHC.Ptr.Ptr GHC.Word.Word8)
                                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case p of wild { GHC.Ptr.Ptr a ->
                                   case w1 of wild1 { GHC.Word.W64# w2 ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          a
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 56#))
                                          s of s2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 1#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 48#))
                                          s2 of s1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 2#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 40#))
                                          s1 of s3 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 3#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 32#))
                                          s3 of s4 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 4#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 24#))
                                          s4 of s5 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 5#)
                                          0#
                                          (GHC.Prim.narrow8Word#
                                             (GHC.Prim.uncheckedShiftRL# w2 16#))
                                          s5 of s6 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 6#)
                                          0#
                                          (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                          s6 of s7 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          (GHC.Prim.plusAddr# a 7#)
                                          0#
                                          (GHC.Prim.narrow8Word# w2)
                                          s7 of s8 { DEFAULT ->
                                   (# s8, GHC.Tuple.() #) } } } } } } } } } })
                                    `cast`
                                  (<GHC.Word.Word64>_R
                                   ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <()>_R)) of wild { Data.ByteString.Builder.Prim.Internal.FP dt io ->
                           Data.ByteString.Builder.Prim.Internal.$WBP
                             @ GHC.Word.Word64
                             (GHC.Types.I# dt)
                             (\ (x :: GHC.Word.Word64)
                                (op :: GHC.Ptr.Ptr GHC.Word.Word8)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case (io x op) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds1 { (#,#) ipv ipv1 ->
                              case op of wild1 { GHC.Ptr.Ptr addr ->
                              (# ipv,
                                 GHC.Ptr.Ptr @ GHC.Word.Word8 (GHC.Prim.plusAddr# addr dt) #) } })
                               `cast`
                             (<GHC.Word.Word64>_R
                              ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr GHC.Word.Word8>_R)) }
                       } in
                       let {
                         bound :: GHC.Types.Int
                         = case w of wild { Data.ByteString.Builder.Prim.Internal.BP dt ds1 ->
                           GHC.Types.I# dt }
                       } in
                       case Data.Binary.Put.$WPairS
                              @ ()
                              GHC.Tuple.()
                              (\ @ r ->
                               letrec {
                                 step :: [GHC.Word.Word64]
                                         -> (Data.ByteString.Builder.Internal.BufferRange
                                             -> GHC.Types.IO
                                                  (Data.ByteString.Builder.Internal.BuildSignal r))
                                         -> Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Types.IO
                                              (Data.ByteString.Builder.Internal.BuildSignal r)
                                   {- Arity: 3 -}
                                 = \ (xs1 :: [GHC.Word.Word64])
                                     (k :: Data.ByteString.Builder.Internal.BufferRange
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                     (ds :: Data.ByteString.Builder.Internal.BufferRange) ->
                                   case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                   let {
                                     ope0 :: GHC.Ptr.Ptr GHC.Word.Word8
                                     = GHC.Ptr.Ptr @ GHC.Word.Word8 dt1
                                   } in
                                   letrec {
                                     go :: [GHC.Word.Word64]
                                           -> GHC.Ptr.Ptr GHC.Word.Word8
                                           -> GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r)
                                       {- Arity: 2 -}
                                     = \ (ds1 :: [GHC.Word.Word64])
                                         (op :: GHC.Ptr.Ptr GHC.Word.Word8) ->
                                       case ds1 of wild1 {
                                         []
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            k (Data.ByteString.Builder.Internal.$WBufferRange
                                                 op1
                                                 ope0) }
                                         : x' xs'
                                         -> case op of op1 { GHC.Ptr.Ptr ipv ->
                                            case w of wild2 { Data.ByteString.Builder.Prim.Internal.BP dt2 ds2 ->
                                            case GHC.Prim.ltAddr#
                                                   dt1
                                                   (GHC.Prim.plusAddr# ipv dt2) of lwild {
                                              DEFAULT
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  case (ds2 x' op1)
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <GHC.Ptr.Ptr GHC.Word.Word8>_R)
                                                         s of ds3 { (#,#) ipv1 ipv2 ->
                                                  (go xs' ipv2)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    ipv1 })
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R))
                                              1#
                                              -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                  (# s,
                                                     Data.ByteString.Builder.Internal.$WBufferFull
                                                       @ r
                                                       bound
                                                       op1
                                                       (step wild1 k) #))
                                                   `cast`
                                                 (Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) } } } }
                                   } in
                                   go xs1 (GHC.Ptr.Ptr @ GHC.Word.Word8 dt) }
                               } in
                               step
                                 (GHC.Base.build
                                    @ GHC.Word.Word64
                                    (\ @ b1
                                       (c :: GHC.Word.Word64 -> b1 -> b1)[OneShot]
                                       (n :: b1)[OneShot] ->
                                     GHC.Base.foldr
                                       @ GHC.Types.Word
                                       @ b1
                                       (GHC.Base.mapFB
                                          @ GHC.Word.Word64
                                          @ b1
                                          @ GHC.Types.Word
                                          c
                                          (\ (x :: GHC.Types.Word) ->
                                           case x of wild { GHC.Types.W# x# -> GHC.Word.W64# x# }))
                                       n
                                       xs)))
                                `cast`
                              (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[GHC.Types.Word]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryWrappedMonoid ::
    Data.Binary.Class.Binary m =>
    Data.Binary.Class.Binary (Data.Semigroup.WrappedMonoid m)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ m (v :: Data.Binary.Class.Binary m).
                  @ (Data.Semigroup.WrappedMonoid m)
                  (\ (eta :: Data.Semigroup.WrappedMonoid m) ->
                   Data.Binary.Class.put
                     @ m
                     v
                     eta `cast` (Data.Semigroup.N:WrappedMonoid[0] <m>_R))
                  (Data.Binary.Class.$fBinaryWrappedMonoid1 @ m v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <Data.Semigroup.WrappedMonoid m>_R))
                  (Data.Binary.Class.$fBinaryWrappedMonoid_$cputList @ m v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryWrappedMonoid1 ::
    Data.Binary.Class.Binary m =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Data.Semigroup.WrappedMonoid m) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   ($dBinary :: Data.Binary.Class.Binary m)
                   @ r
                   (eta :: Data.ByteString.Internal.ByteString)
                   (eta1 :: Data.Binary.Get.Internal.Success
                              (Data.Semigroup.WrappedMonoid m) r) ->
                 (Data.Binary.Class.get @ m $dBinary)
                   `cast`
                 (Data.Binary.Get.Internal.N:Get[0] <m>_R)
                   @ r
                   eta
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: m) ->
                    eta1
                      i'
                      a1 `cast` (Sym (Data.Semigroup.N:WrappedMonoid[0] <m>_R)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinaryWrappedMonoid_$cputList ::
    Data.Binary.Class.Binary m =>
    [Data.Semigroup.WrappedMonoid m] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U),C(C1(U)),A)> -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary[] ::
    Data.Binary.Class.Binary a => Data.Binary.Class.Binary [a]
  DFunId
  {- Arity: 1, Strictness: <L,U(A,C(C1(U)),U)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Binary.Class.Binary a).
                  @ [a]
                  (Data.Binary.Class.putList @ a v)
                  (Data.Binary.Class.$fBinary[]1 @ a v)
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0] <[a]>_R))
                  (Data.Binary.Class.$fBinary[]_$cputList @ a v) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary[]1 ::
    Data.Binary.Class.Binary a =>
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success [a] r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A)><S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success [a] r) ->
                 case w1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Binary.Class.$w$cget13 @ a w @ r ww1 ww2 ww3 ww4 w2 }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $fBinary[]_$cputList ::
    Data.Binary.Class.Binary a => [[a]] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(A,C(C1(U)),U)> -}
4c6ccf185ae22b65c34c31d3a6d7d385
  $tc'C:Binary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7636682688939290726##
                   15337853862116006204##
                   Data.Binary.Class.$trModule
                   Data.Binary.Class.$tc'C:Binary2
                   1#
                   Data.Binary.Class.$tc'C:Binary1) -}
38a8dc6c39964c5cfb0f2ffa561c7ccc
  $tc'C:Binary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
39e4fa46a2a7a4e6e49ea746d33bd2ea
  $tc'C:Binary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Class.$tc'C:Binary3) -}
a75189a68508cc2e4273d1e55942c755
  $tc'C:Binary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Binary"#) -}
1f345c78c01ee0c9fabbcebd8c749919
  $tcBinary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7469488703365363485##
                   3339539826455474557##
                   Data.Binary.Class.$trModule
                   Data.Binary.Class.$tcBinary2
                   0#
                   Data.Binary.Class.$tcBinary1) -}
03477dd4d88e753506a9c3d6a3f2590e
  $tcBinary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5dc9bc99171db4e94ce7dcc2a99a00ed
  $tcBinary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Class.$tcBinary3) -}
96a608b478637633ed885e63b9c81a4f
  $tcBinary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Binary"#) -}
535c84676ec6df6de3878022340ff1b1
  $tcGBinaryGet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8920451686508929077##
                   3265625611560714395##
                   Data.Binary.Class.$trModule
                   Data.Binary.Class.$tcGBinaryGet2
                   1#
                   Data.Binary.Class.$tcGBinaryGet1) -}
822db58fa6feabedf9faff9e4e70c394
  $tcGBinaryGet1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3313301b2bbcf42cfe192d986597c213
  $tcGBinaryGet2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Class.$tcGBinaryGet3) -}
b726cdef00f0698c1b2b291255deb434
  $tcGBinaryGet3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GBinaryGet"#) -}
2cd57a011b5b9a377669582f8f9cdf6d
  $tcGBinaryPut :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14514049322265034899##
                   16205590683723846716##
                   Data.Binary.Class.$trModule
                   Data.Binary.Class.$tcGBinaryPut1
                   1#
                   Data.Binary.Class.$tcGBinaryGet1) -}
9f6094aa0e91f88c9bcf9c14e5685e7a
  $tcGBinaryPut1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Class.$tcGBinaryPut2) -}
5f4b2525910fb01055d35f119dca2f91
  $tcGBinaryPut2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GBinaryPut"#) -}
63ffe2297ed9542d9f966018964b50db
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Binary.Class.$trModule3
                   Data.Binary.Class.$trModule1) -}
bccc48f94c1dbd291ba9afe2cb4c929c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Class.$trModule2) -}
8fb908dc2fa94743c029f95ea6a47ddf
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data.Binary.Class"#) -}
1c55b17e4f2d97b26567a65355cfd84c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.Binary.Class.$trModule4) -}
70c8f48596af139d745961348b5e0f8e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("binary-0.8.7.0-BLOwEKiKlD84pHPCNhnRK5"#) -}
db1a1e7ac72d1d455ca1d671e85b7be6
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.Bool r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Types.Bool r) ->
                 let {
                   $s$wks :: GHC.Prim.Word#
                             -> GHC.Prim.Addr#
                             -> GHC.ForeignPtr.ForeignPtrContents
                             -> GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
                   = \ (sc :: GHC.Prim.Word#)
                       (sc1 :: GHC.Prim.Addr#)[OneShot]
                       (sc2 :: GHC.ForeignPtr.ForeignPtrContents)[OneShot]
                       (sc3 :: GHC.Prim.Int#)[OneShot]
                       (sc4 :: GHC.Prim.Int#)[OneShot] ->
                     case sc of wild {
                       DEFAULT
                       -> Data.Binary.Get.Internal.Fail
                            @ r
                            (Data.ByteString.Internal.PS sc1 sc2 sc3 sc4)
                            (GHC.CString.unpackAppendCString#
                               Data.Binary.Class.$fBinaryAll11
                               (case GHC.Show.$wshowSignedInt
                                       0#
                                       (GHC.Prim.word2Int# wild)
                                       (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                GHC.Base.++_$s++
                                  @ GHC.Types.Char
                                  Data.Binary.Class.$fBinaryAll9
                                  ww5
                                  ww6 }))
                       0##
                       -> w (Data.ByteString.Internal.PS sc1 sc2 sc3 sc4) GHC.Types.False
                       1##
                       -> w (Data.ByteString.Internal.PS sc1 sc2 sc3 sc4) GHC.Types.True }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryAll8
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         $s$wks ipv1 dt dt1 (GHC.Prim.+# dt2 1#) (GHC.Prim.-# dt3 1#) } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $s$wks
                        ipv1
                        ww
                        ww1
                        (GHC.Prim.+# ww2 1#)
                        (GHC.Prim.-# ww3 1#) } } }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget1 ::
    Data.Binary.Get.Internal.Get a
    -> forall r.
       Data.Binary.Class.Binary b =>
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success (Data.Semigroup.Arg a b) r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (ww :: Data.Binary.Get.Internal.Get a)
                   (w :: Data.Binary.Class.Binary b)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success
                            (Data.Semigroup.Arg a b) r) ->
                 ww `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   w1
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    (Data.Binary.Class.get @ b w)
                      `cast`
                    (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                      @ r
                      i'
                      (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: b) ->
                       w2 i'1 (Data.Semigroup.Arg @ a @ b a1 a2)))) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget10 ::
    Data.Binary.Class.Binary a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success (GHC.Maybe.Maybe a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <L,U(A,C(C1(U)),A)><L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: Data.Binary.Get.Internal.Success (GHC.Maybe.Maybe a) r) ->
                 let {
                   lvl59 :: Data.ByteString.Internal.ByteString
                            -> a -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     w1 i' (GHC.Maybe.Just @ a a1)
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryAll8
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> (Data.Binary.Class.get @ a w)
                                `cast`
                              (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                                @ r
                                (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                lvl59
                           0##
                           -> w1
                                (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                (GHC.Maybe.Nothing @ a) } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> (Data.Binary.Class.get @ a w)
                             `cast`
                           (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                             @ r
                             (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             lvl59
                        0##
                        -> w1
                             (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             (GHC.Maybe.Nothing @ a) } } } }) -}
4b6074c2f091147d6dfb7e97b5cfac85
  $w$cget11 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success (Data.Fixed.Fixed a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
ee6804f74e5f069c3ac6681689a45c94
  $w$cget12 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.Float r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget13 ::
    Data.Binary.Class.Binary a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success [a] r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <L,U(A,C(C1(U)),A)><S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: Data.Binary.Get.Internal.Success [a] r) ->
                 letrec {
                   $wgo2 :: [a]
                            -> GHC.Prim.Int#
                            -> forall r1.
                               Data.ByteString.Internal.ByteString
                               -> Data.Binary.Get.Internal.Success [a] r1
                               -> Data.Binary.Get.Internal.Decoder r1
                     {- Arity: 4, Strictness: <L,U><S,1*U><L,U><L,C(C1(U))>,
                        Inline: [2] -}
                   = \ (w2 :: [a])
                       (ww4 :: GHC.Prim.Int#)
                       @ r1
                       (w3 :: Data.ByteString.Internal.ByteString)
                       (w4 :: Data.Binary.Get.Internal.Success [a] r1) ->
                     case ww4 of wild {
                       DEFAULT
                       -> let {
                            lvl59 :: GHC.Prim.Int# = GHC.Prim.-# wild 1#
                          } in
                          (Data.Binary.Class.get @ a w)
                            `cast`
                          (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                            @ r1
                            w3
                            (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                             case a1 of x { DEFAULT ->
                             $wgo2 (GHC.Types.: @ a x w2) lvl59 @ r1 i' w4 })
                       0#
                       -> case GHC.List.reverse1
                                 @ a
                                 w2
                                 (GHC.Types.[] @ a) of vx { DEFAULT ->
                          w4 w3 vx } }
                 } in
                 Data.Binary.Class.$w$cget5
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Int)[OneShot] ->
                    case a1 of ww4 { GHC.Types.I# ww5 ->
                    $wgo2 (GHC.Types.[] @ a) ww5 @ r i' w1 })) -}
9cd6fa82c43ef555e0dc8f982618f71b
  $w$cget14 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Data.IntSet.Internal.IntSet r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           Data.IntSet.Internal.IntSet r) ->
                 Data.Binary.Class.$w$s$cget
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [Data.IntSet.Internal.Key])[OneShot] ->
                    w i' (Data.IntSet.Internal.fromDistinctAscList a1))) -}
6c030572f4c86ff255fd6aaa83671bbd
  $w$cget15 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.KindRep r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget16 ::
    Data.Binary.Class.Binary a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success (GHC.Base.NonEmpty a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <L,U(A,C(C1(U)),A)><S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: Data.Binary.Get.Internal.Success (GHC.Base.NonEmpty a) r) ->
                 Data.Binary.Class.$w$cget13
                   @ a
                   w
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [a])[OneShot] ->
                    case a1 of wild {
                      []
                      -> case i' of dt { Data.ByteString.Internal.PS ipv ipv1 ipv2 ipv3 ->
                         Data.Binary.Get.Internal.Fail
                           @ r
                           dt
                           Data.Binary.Class.$fBinaryNonEmpty2 }
                      : x xs -> w1 i' (GHC.Base.:| @ a x xs) })) -}
a0bad828fbb72f80db56d5741e6b39bd
  $w$cget17 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.Ordering r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Types.Ordering r) ->
                 let {
                   $s$wks :: GHC.Prim.Word#
                             -> GHC.Prim.Addr#
                             -> GHC.ForeignPtr.ForeignPtrContents
                             -> GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
                   = \ (sc :: GHC.Prim.Word#)
                       (sc1 :: GHC.Prim.Addr#)[OneShot]
                       (sc2 :: GHC.ForeignPtr.ForeignPtrContents)[OneShot]
                       (sc3 :: GHC.Prim.Int#)[OneShot]
                       (sc4 :: GHC.Prim.Int#)[OneShot] ->
                     case sc of wild {
                       DEFAULT
                       -> Data.Binary.Get.Internal.Fail
                            @ r
                            (Data.ByteString.Internal.PS sc1 sc2 sc3 sc4)
                            (GHC.CString.unpackAppendCString#
                               Data.Binary.Class.$fBinaryAll11
                               (case GHC.Show.$wshowSignedInt
                                       0#
                                       (GHC.Prim.word2Int# wild)
                                       (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                GHC.Base.++_$s++
                                  @ GHC.Types.Char
                                  Data.Binary.Class.$fBinaryOrdering2
                                  ww5
                                  ww6 }))
                       0## -> w (Data.ByteString.Internal.PS sc1 sc2 sc3 sc4) GHC.Types.LT
                       1## -> w (Data.ByteString.Internal.PS sc1 sc2 sc3 sc4) GHC.Types.EQ
                       2##
                       -> w (Data.ByteString.Internal.PS sc1 sc2 sc3 sc4) GHC.Types.GT }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryAll8
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         $s$wks ipv1 dt dt1 (GHC.Prim.+# dt2 1#) (GHC.Prim.-# dt3 1#) } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $s$wks
                        ipv1
                        ww
                        ww1
                        (GHC.Prim.+# ww2 1#)
                        (GHC.Prim.-# ww3 1#) } } }) -}
b8492549118386ef04b73007dc2aa755
  $w$cget18 ::
    Data.Binary.Get.Internal.Get a
    -> forall r.
       GHC.Real.Integral a =>
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success (GHC.Real.Ratio a) r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4,
     Strictness: <C(C(S)),C(C1(U))><L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ a
                   (ww :: Data.Binary.Get.Internal.Get a)
                   (w :: GHC.Real.Integral a)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success (GHC.Real.Ratio a) r) ->
                 ww `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                   @ r
                   w1
                   (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                    ww `cast` (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                      @ r
                      i'
                      (\ (i'1 :: Data.ByteString.Internal.ByteString) (a2 :: a) ->
                       w2 i'1 (GHC.Real.% @ a w a1 a2)))) -}
f59a1ce12ad6df8b9542b398e63de7f7
  $w$cget19 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.RuntimeRep r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget2 ::
    Data.Binary.Get.Internal.Get i
    -> forall r.
       (GHC.Arr.Ix i, Data.Binary.Class.Binary e) =>
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success (GHC.Arr.Array i e) r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5,
     Strictness: <C(C(S)),C(C1(U))><L,U(A,A,A,A,A,C(U(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,C(C1(U))>,
     Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget20 ::
    Data.Binary.Class.Binary e =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         (Data.Sequence.Internal.Seq e) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <L,1*U(A,1*C(C1(U)),A)><S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ e
                   (w :: Data.Binary.Class.Binary e)
                   @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: Data.Binary.Get.Internal.Success
                            (Data.Sequence.Internal.Seq e) r) ->
                 let {
                   lvl59 :: Data.Binary.Get.Internal.Get e
                   = Data.Binary.Class.get @ e w
                 } in
                 Data.Binary.Class.$w$cget5
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Int)[OneShot] ->
                    case a1 of ww4 { GHC.Types.I# ww5 ->
                    Data.Binary.Class.$fBinarySeq_$s$wpoly_rep
                      @ r
                      @ e
                      w1
                      i'
                      lvl59
                      ww5
                      @~ (Sym (Data.Sequence.Internal.N:Seq[0] <e>_R)) })) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget21 ::
    Data.Binary.Class.Binary a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success (Data.Set.Internal.Set a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <L,U(A,C(C1(U)),A)><S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: Data.Binary.Get.Internal.Success
                            (Data.Set.Internal.Set a) r) ->
                 Data.Binary.Class.$w$cget13
                   @ a
                   w
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [a])[OneShot] ->
                    w1 i' (Data.Set.Internal.fromDistinctAscList @ a a1))) -}
b61a16c888f410f474a8c0f08052957b
  $w$cget22 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         Data.ByteString.Short.Internal.ShortByteString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           Data.ByteString.Short.Internal.ShortByteString r) ->
                 Data.Binary.Class.$w$cget5
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Int)[OneShot] ->
                    case a1 of wild { GHC.Types.I# x ->
                    case GHC.Prim.># x 0# of lwild {
                      DEFAULT -> w i' Data.Binary.Class.$fBinaryShortByteString2
                      1#
                      -> case i' of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.>=# dt3 x of lwild1 {
                           DEFAULT
                           -> Data.Binary.Get.Internal.readN1
                                @ GHC.Types.Int
                                @ Data.ByteString.Internal.ByteString
                                wild
                                Data.Binary.Class.$fBinaryAll7
                                Data.Binary.Class.$fBinaryAll6
                                Data.Binary.Class.$fBinaryAll3
                                  `cast`
                                (<[Data.ByteString.Internal.ByteString]>_R
                                 ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                               <Data.ByteString.Internal.ByteString>_R))
                                @ r
                                wild1
                                (\ (i'1 :: Data.ByteString.Internal.ByteString)
                                   (a2 :: Data.ByteString.Internal.ByteString) ->
                                 case a2 of wild2 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                                 w (Data.ByteString.Internal.PS
                                      dt4
                                      dt5
                                      (GHC.Prim.+# dt6 x)
                                      (GHC.Prim.-# dt7 x))
                                   (case GHC.Magic.runRW#
                                           @ ('GHC.Types.TupleRep
                                                '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                Data.ByteString.Short.Internal.ShortByteString #)
                                           (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                            case GHC.Prim.newByteArray#
                                                   @ GHC.Prim.RealWorld
                                                   x
                                                   s of ds { (#,#) ipv4 ipv5 ->
                                            case GHC.Prim.copyAddrToByteArray#
                                                   @ GHC.Prim.RealWorld
                                                   (GHC.Prim.plusAddr# dt4 dt6)
                                                   ipv5
                                                   0#
                                                   x
                                                   ipv4 of s1 { DEFAULT ->
                                            case GHC.Prim.touch#
                                                   @ 'GHC.Types.LiftedRep
                                                   @ GHC.ForeignPtr.ForeignPtrContents
                                                   dt5
                                                   s1 of s' { DEFAULT ->
                                            case GHC.Prim.unsafeFreezeByteArray#
                                                   @ GHC.Prim.RealWorld
                                                   ipv5
                                                   s' of ds1 { (#,#) ipv6 ipv7 ->
                                            (# ipv6,
                                               Data.ByteString.Short.Internal.SBS
                                                 ipv7 #) } } } }) of ds1 { (#,#) ipv4 ipv5 ->
                                    ipv5 }) })
                           1#
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 x)
                                   (GHC.Prim.-# dt3 x))
                                (case GHC.Magic.runRW#
                                        @ ('GHC.Types.TupleRep
                                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.ByteString.Short.Internal.ShortByteString #)
                                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case GHC.Prim.newByteArray#
                                                @ GHC.Prim.RealWorld
                                                x
                                                s of ds { (#,#) ipv4 ipv5 ->
                                         case GHC.Prim.copyAddrToByteArray#
                                                @ GHC.Prim.RealWorld
                                                (GHC.Prim.plusAddr# dt dt2)
                                                ipv5
                                                0#
                                                x
                                                ipv4 of s1 { DEFAULT ->
                                         case GHC.Prim.touch#
                                                @ 'GHC.Types.LiftedRep
                                                @ GHC.ForeignPtr.ForeignPtrContents
                                                dt1
                                                s1 of s' { DEFAULT ->
                                         case GHC.Prim.unsafeFreezeByteArray#
                                                @ GHC.Prim.RealWorld
                                                ipv5
                                                s' of ds1 { (#,#) ipv6 ipv7 ->
                                         (# ipv6,
                                            Data.ByteString.Short.Internal.SBS
                                              ipv7 #) } } } }) of ds1 { (#,#) ipv4 ipv5 ->
                                 ipv5 }) } } } })) -}
9f0fe6c0e2cc7b8bac552567871f63e4
  $w$cget23 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.TyCon r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Types.TyCon r) ->
                 Data.Binary.Class.$w$cget24
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Int
                             -> GHC.Types.KindRep -> GHC.Types.TyCon)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget5
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: GHC.Types.Int)[OneShot] ->
                       case i'1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                       let {
                         a4 :: GHC.Types.KindRep -> GHC.Types.TyCon = a1 a2
                       } in
                       Data.Binary.Class.$w$cget15
                         @ r
                         ww10
                         ww11
                         ww12
                         ww13
                         (\ (i'2 :: Data.ByteString.Internal.ByteString)
                            (a5 :: GHC.Types.KindRep)[OneShot] ->
                          w i'2 (a4 a5)) }) })) -}
781cac41f7c0b8bead7b7ba5a6c70422
  $w$cget24 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         (GHC.Types.Int -> GHC.Types.KindRep -> GHC.Types.TyCon) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           (GHC.Types.Int -> GHC.Types.KindRep -> GHC.Types.TyCon) r) ->
                 Data.Binary.Class.$w$s$cget2
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Base.String)[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$s$cget2
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: GHC.Base.String)[OneShot] ->
                       case i'1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                       Data.Binary.Class.$w$s$cget2
                         @ r
                         ww10
                         ww11
                         ww12
                         ww13
                         (\ (i'2 :: Data.ByteString.Internal.ByteString)
                            (a4 :: GHC.Base.String)[OneShot] ->
                          w i'2 (Data.Typeable.Internal.mkTyCon a1 a2 a4)) }) })) -}
4eac0eb9620752a6c869a5f77cd43b17
  $w$cget25 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.TypeLitSort r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Types.TypeLitSort r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryAll8
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case ipv1 of wild1 {
                           DEFAULT
                           -> Data.Binary.Get.Internal.Fail
                                @ r
                                (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                Data.Binary.Class.$fBinaryTypeLitSort2
                           0##
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                GHC.Types.TypeLitSymbol
                           1##
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 1#)
                                   (GHC.Prim.-# dt3 1#))
                                GHC.Types.TypeLitNat } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case ipv1 of wild {
                        DEFAULT
                        -> Data.Binary.Get.Internal.Fail
                             @ r
                             (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             Data.Binary.Class.$fBinaryTypeLitSort2
                        0##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             GHC.Types.TypeLitSymbol
                        1##
                        -> w (Data.ByteString.Internal.PS
                                ww
                                ww1
                                (GHC.Prim.+# ww2 1#)
                                (GHC.Prim.-# ww3 1#))
                             GHC.Types.TypeLitNat } } } }) -}
372a053aeee01ed9b22be74ba52329b0
  $w$cget26 ::
    forall k (a :: k) r.
    Data.Typeable.Internal.Typeable a =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         (Data.Typeable.Internal.TypeRep a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6, Strictness: <L,U><S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ k
                   @ a :: k
                   (w :: Data.Typeable.Internal.Typeable a)
                   @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: Data.Binary.Get.Internal.Success
                            (Data.Typeable.Internal.TypeRep a) r) ->
                 let {
                   lvl59 :: [GHC.Types.Char]
                   = GHC.CString.unpackAppendCString#
                       Data.Binary.Class.$fBinaryTypeRep5
                       (Data.Typeable.Internal.showTypeable
                          @ k
                          @ a
                          Data.Typeable.Internal.$fShowSomeTypeRep2
                          w `cast` (Data.Typeable.Internal.N:Typeable[0] <k>_N <a>_N)
                          (GHC.Types.[] @ GHC.Types.Char))
                 } in
                 let {
                   lvl60 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       lvl59
                       (GHC.Types.[] @ GHC.Base.String)
                 } in
                 Data.Binary.Class.$wgetSomeTypeRep
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: Data.Typeable.Internal.SomeTypeRep)[OneShot] ->
                    case a1 of wild { Data.Typeable.Internal.SomeTypeRep k1 a2 rep ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ k1
                           @ k
                           @ a2
                           @ a
                           rep
                           w `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <k>_N <a>_N) of wild1 {
                      GHC.Types.False
                      -> case i' of dt { Data.ByteString.Internal.PS ipv ipv1 ipv2 ipv3 ->
                         Data.Binary.Get.Internal.Fail
                           @ r
                           dt
                           (Data.OldList.unlines
                              (GHC.Types.:
                                 @ GHC.Base.String
                                 Data.Binary.Class.$fBinaryTypeRep3
                                 (GHC.Types.:
                                    @ GHC.Base.String
                                    (GHC.CString.unpackAppendCString#
                                       Data.Binary.Class.$fBinaryTypeRep2
                                       (Data.Typeable.Internal.showTypeable
                                          @ k1
                                          @ a2
                                          Data.Typeable.Internal.$fShowSomeTypeRep2
                                          rep
                                          (GHC.Types.[] @ GHC.Types.Char)))
                                    lvl60))) }
                      GHC.Types.True
                      -> w1
                           i'
                           rep
                             `cast`
                           (Data.Typeable.Internal.TypeRep
                              (UnsafeCo nominal k1 k) (UnsafeCo nominal a2 a))_R } })) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget27 ::
    Data.Binary.Get.Internal.Get i
    -> forall r.
       (GHC.Arr.Ix i, Data.Binary.Class.Binary e,
        Data.Array.Base.IArray Data.Array.Base.UArray e) =>
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success (Data.Array.Base.UArray i e) r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,U(U,U,U,U,U,U,U)><L,U(A,C(C1(U)),A)><L,U(A,A,C(C1(C1(U))),A,A,A,A)><L,U><L,C(C1(U))>,
     Inline: [2] -}
0ddaa1d494481677d1157ed787d4c1bf
  $w$cget28 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.VecCount r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Types.VecCount r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryAll8
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         w (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 1#)
                              (GHC.Prim.-# dt3 1#))
                           (let {
                              ww4 :: GHC.Prim.Int# = GHC.Prim.word2Int# ipv1
                            } in
                            case GHC.Prim.>=# ww4 0# of lwild1 {
                              DEFAULT -> GHC.Enum.$wlvl ww4
                              1#
                              -> case GHC.Prim.<=# ww4 5# of lwild2 {
                                   DEFAULT -> GHC.Enum.$wlvl ww4
                                   1# -> GHC.Prim.tagToEnum# @ GHC.Types.VecCount ww4 } }) } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      w (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        (let {
                           ww4 :: GHC.Prim.Int# = GHC.Prim.word2Int# ipv1
                         } in
                         case GHC.Prim.>=# ww4 0# of lwild1 {
                           DEFAULT -> GHC.Enum.$wlvl ww4
                           1#
                           -> case GHC.Prim.<=# ww4 5# of lwild2 {
                                DEFAULT -> GHC.Enum.$wlvl ww4
                                1# -> GHC.Prim.tagToEnum# @ GHC.Types.VecCount ww4 } }) } } }) -}
b6686c189e322a2e0fc18d35de991892
  $w$cget29 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.VecElem r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Types.VecElem r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryAll8
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         w (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 1#)
                              (GHC.Prim.-# dt3 1#))
                           (let {
                              ww4 :: GHC.Prim.Int# = GHC.Prim.word2Int# ipv1
                            } in
                            case GHC.Prim.>=# ww4 0# of lwild1 {
                              DEFAULT -> GHC.Enum.$wlvl1 ww4
                              1#
                              -> case GHC.Prim.<=# ww4 9# of lwild2 {
                                   DEFAULT -> GHC.Enum.$wlvl1 ww4
                                   1# -> GHC.Prim.tagToEnum# @ GHC.Types.VecElem ww4 } }) } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      w (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        (let {
                           ww4 :: GHC.Prim.Int# = GHC.Prim.word2Int# ipv1
                         } in
                         case GHC.Prim.>=# ww4 0# of lwild1 {
                           DEFAULT -> GHC.Enum.$wlvl1 ww4
                           1#
                           -> case GHC.Prim.<=# ww4 9# of lwild2 {
                                DEFAULT -> GHC.Enum.$wlvl1 ww4
                                1# -> GHC.Prim.tagToEnum# @ GHC.Types.VecElem ww4 } }) } } }) -}
70e33785ca5dfacaffe2973c3268b718
  $w$cget3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         Data.ByteString.Lazy.Internal.ByteString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,U>, Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           Data.ByteString.Lazy.Internal.ByteString r) ->
                 case GHC.Prim.>=# ww3 8# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryByteString2
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                                0#
                                GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv2 of s'1 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                                0#
                                GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv4 of s'2 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                                0#
                                GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv6 of s'3 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 4#))
                                0#
                                GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv8 of s'4 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 5#))
                                0#
                                GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv10 of s'5 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 6#))
                                0#
                                GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv12 of s'6 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 7#))
                                0#
                                GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv14 of s'7 { DEFAULT ->
                         Data.Binary.Get.Internal.readN1
                           @ GHC.Int.Int64
                           @ Data.ByteString.Lazy.Internal.ByteString
                           (GHC.Int.I64#
                              (GHC.Prim.word2Int#
                                 (GHC.Prim.or#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.or#
                                                   (GHC.Prim.or#
                                                      (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                      (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                                   (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                                (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                             (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                          (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                       (GHC.Prim.uncheckedShiftL# ipv13 8#))
                                    ipv15)))
                           Data.Binary.Get.consumeBytes
                           Data.ByteString.Lazy.fromChunks
                           (Data.Binary.Get.Internal.failOnEOF1
                              @ Data.ByteString.Lazy.Internal.ByteString)
                             `cast`
                           (<[Data.ByteString.Internal.ByteString]>_R
                            ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                          <Data.ByteString.Lazy.Internal.ByteString>_R))
                           @ r
                           (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 8#)
                              (GHC.Prim.-# dt3 8#))
                           w } } } } } } } } } } } } } } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 4#))
                             0#
                             GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv8 of s'4 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 5#))
                             0#
                             GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv10 of s'5 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 6#))
                             0#
                             GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv12 of s'6 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 7#))
                             0#
                             GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv14 of s'7 { DEFAULT ->
                      Data.Binary.Get.Internal.readN1
                        @ GHC.Int.Int64
                        @ Data.ByteString.Lazy.Internal.ByteString
                        (GHC.Int.I64#
                           (GHC.Prim.word2Int#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.or#
                                                   (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                   (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                                (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                             (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                          (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                       (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                    (GHC.Prim.uncheckedShiftL# ipv13 8#))
                                 ipv15)))
                        Data.Binary.Get.consumeBytes
                        Data.ByteString.Lazy.fromChunks
                        (Data.Binary.Get.Internal.failOnEOF1
                           @ Data.ByteString.Lazy.Internal.ByteString)
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Lazy.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 8#)
                           (GHC.Prim.-# ww3 8#))
                        w } } } } } } } } } } } } } } } } }) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget30 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Data.Version.Version r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Data.Version.Version r) ->
                 Data.Binary.Class.$w$s$cget
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [GHC.Types.Int])[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget13
                      @ [GHC.Types.Char]
                      Data.Binary.Class.$fBinaryVersion_$s$fBinary[]
                      @ r
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: [GHC.Base.String])[OneShot] ->
                       w i'1 (Data.Version.Version a1 a2)) })) -}
578d67d4980a1c5cc58d533f41454534
  $w$cget31 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.Word r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Types.Word r) ->
                 case GHC.Prim.>=# ww3 8# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryByteString2
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                                0#
                                GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv2 of s'1 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                                0#
                                GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv4 of s'2 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                                0#
                                GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv6 of s'3 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 4#))
                                0#
                                GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv8 of s'4 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 5#))
                                0#
                                GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv10 of s'5 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 6#))
                                0#
                                GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv12 of s'6 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 7#))
                                0#
                                GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv14 of s'7 { DEFAULT ->
                         w (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 8#)
                              (GHC.Prim.-# dt3 8#))
                           (GHC.Types.W#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.or#
                                                   (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                   (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                                (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                             (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                          (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                       (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                    (GHC.Prim.uncheckedShiftL# ipv13 8#))
                                 ipv15)) } } } } } } } } } } } } } } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 4#))
                             0#
                             GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv8 of s'4 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 5#))
                             0#
                             GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv10 of s'5 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 6#))
                             0#
                             GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv12 of s'6 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 7#))
                             0#
                             GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv14 of s'7 { DEFAULT ->
                      w (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 8#)
                           (GHC.Prim.-# ww3 8#))
                        (GHC.Types.W#
                           (GHC.Prim.or#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                             (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                          (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                       (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                    (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                 (GHC.Prim.uncheckedShiftL# ipv13 8#))
                              ipv15)) } } } } } } } } } } } } } } } } }) -}
f6c343dd2ddfab8df461693e0db286e4
  $w$cget4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         Data.ByteString.Internal.ByteString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           Data.ByteString.Internal.ByteString r) ->
                 Data.Binary.Class.$w$cget5
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Int)[OneShot] ->
                    case a1 of wild { GHC.Types.I# x ->
                    case GHC.Prim.># x 0# of lwild {
                      DEFAULT -> w i' Data.ByteString.empty
                      1#
                      -> case i' of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.>=# dt3 x of lwild1 {
                           DEFAULT
                           -> Data.Binary.Get.Internal.readN1
                                @ GHC.Types.Int
                                @ Data.ByteString.Internal.ByteString
                                wild
                                Data.Binary.Class.$fBinaryAll7
                                Data.Binary.Class.$fBinaryAll6
                                Data.Binary.Class.$fBinaryAll3
                                  `cast`
                                (<[Data.ByteString.Internal.ByteString]>_R
                                 ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                               <Data.ByteString.Internal.ByteString>_R))
                                @ r
                                wild1
                                (\ (i'1 :: Data.ByteString.Internal.ByteString)
                                   (a2 :: Data.ByteString.Internal.ByteString) ->
                                 case a2 of wild2 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                                 w (Data.ByteString.Internal.PS
                                      dt4
                                      dt5
                                      (GHC.Prim.+# dt6 x)
                                      (GHC.Prim.-# dt7 x))
                                   (Data.ByteString.Internal.PS dt4 dt5 dt6 x) })
                           1#
                           -> w (Data.ByteString.Internal.PS
                                   dt
                                   dt1
                                   (GHC.Prim.+# dt2 x)
                                   (GHC.Prim.-# dt3 x))
                                (Data.ByteString.Internal.PS dt dt1 dt2 x) } } } })) -}
64bc2a630a804df7570c02dd87fdaaf3
  $w$cget5 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.Int r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Types.Int r) ->
                 case GHC.Prim.>=# ww3 8# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryByteString2
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                                0#
                                GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv2 of s'1 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                                0#
                                GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv4 of s'2 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                                0#
                                GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv6 of s'3 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 4#))
                                0#
                                GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv8 of s'4 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 5#))
                                0#
                                GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv10 of s'5 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 6#))
                                0#
                                GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv12 of s'6 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 7#))
                                0#
                                GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv14 of s'7 { DEFAULT ->
                         w (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 8#)
                              (GHC.Prim.-# dt3 8#))
                           (GHC.Types.I#
                              (GHC.Prim.word2Int#
                                 (GHC.Prim.or#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.or#
                                                   (GHC.Prim.or#
                                                      (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                      (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                                   (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                                (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                             (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                          (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                       (GHC.Prim.uncheckedShiftL# ipv13 8#))
                                    ipv15))) } } } } } } } } } } } } } } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 4#))
                             0#
                             GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv8 of s'4 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 5#))
                             0#
                             GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv10 of s'5 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 6#))
                             0#
                             GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv12 of s'6 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 7#))
                             0#
                             GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv14 of s'7 { DEFAULT ->
                      w (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 8#)
                           (GHC.Prim.-# ww3 8#))
                        (GHC.Types.I#
                           (GHC.Prim.word2Int#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.or#
                                                   (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                   (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                                (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                             (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                          (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                       (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                    (GHC.Prim.uncheckedShiftL# ipv13 8#))
                                 ipv15))) } } } } } } } } } } } } } } } } }) -}
5586750b2c69bd7fc7a221d080d48e6f
  $w$cget6 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.Char r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
54fb1cc790b5e00cad1b79817513b17e
  $w$cget7 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Types.Double r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cget8 ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success (Data.Either.Either a b) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 7,
     Strictness: <L,U(A,C(C1(U)),A)><L,U(A,C(C1(U)),A)><L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: Data.Binary.Class.Binary b)
                   @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: Data.Binary.Get.Internal.Success
                            (Data.Either.Either a b) r) ->
                 let {
                   lvl59 :: Data.ByteString.Internal.ByteString
                            -> a -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString) (a1 :: a) ->
                     w2 i' (Data.Either.Left @ a @ b a1)
                 } in
                 let {
                   lvl60 :: Data.ByteString.Internal.ByteString
                            -> b -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString) (a1 :: b) ->
                     w2 i' (Data.Either.Right @ a @ b a1)
                 } in
                 let {
                   $wks :: Data.ByteString.Internal.ByteString
                           -> GHC.Prim.Word# -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [2] -}
                   = \ (w3 :: Data.ByteString.Internal.ByteString)
                       (ww4 :: GHC.Prim.Word#)[OneShot] ->
                     case ww4 of wild {
                       DEFAULT
                       -> (Data.Binary.Class.get @ b w1)
                            `cast`
                          (Data.Binary.Get.Internal.N:Get[0] <b>_R)
                            @ r
                            w3
                            lvl60
                       0##
                       -> (Data.Binary.Class.get @ a w)
                            `cast`
                          (Data.Binary.Get.Internal.N:Get[0] <a>_R)
                            @ r
                            w3
                            lvl59 }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryAll8
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         $wks
                           (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 1#)
                              (GHC.Prim.-# dt3 1#))
                           ipv1 } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        ipv1 } } }) -}
4d953f8fb8a9004c18ad0d3586af9c1d
  $w$cget9 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         GHC.Fingerprint.Type.Fingerprint r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           GHC.Fingerprint.Type.Fingerprint r) ->
                 let {
                   $s$wks :: GHC.Prim.Word#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.ForeignPtr.ForeignPtrContents
                             -> GHC.Prim.Addr#
                             -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 5, Strictness: <L,U><S,U><L,U><L,U><L,U> -}
                   = \ (sc :: GHC.Prim.Word#)
                       (sc1 :: GHC.Prim.Int#)[OneShot]
                       (sc2 :: GHC.Prim.Int#)[OneShot]
                       (sc3 :: GHC.ForeignPtr.ForeignPtrContents)[OneShot]
                       (sc4 :: GHC.Prim.Addr#)[OneShot] ->
                     case GHC.Prim.>=# sc1 8# of lwild {
                       DEFAULT
                       -> Data.Binary.Get.Internal.readN1
                            @ GHC.Types.Int
                            @ Data.ByteString.Internal.ByteString
                            Data.Binary.Class.$fBinaryByteString2
                            Data.Binary.Class.$fBinaryAll7
                            Data.Binary.Class.$fBinaryAll6
                            Data.Binary.Class.$fBinaryAll3
                              `cast`
                            (<[Data.ByteString.Internal.ByteString]>_R
                             ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                           <Data.ByteString.Internal.ByteString>_R))
                            @ r
                            (Data.ByteString.Internal.PS sc4 sc3 sc2 sc1)
                            (\ (i' :: Data.ByteString.Internal.ByteString)
                               (a1 :: Data.ByteString.Internal.ByteString) ->
                             case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt dt2)
                                    0#
                                    GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    ipv of s' { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                                    0#
                                    GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    ipv2 of s'1 { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                                    0#
                                    GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    ipv4 of s'2 { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                                    0#
                                    GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    ipv6 of s'3 { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 4#))
                                    0#
                                    GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    ipv8 of s'4 { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 5#))
                                    0#
                                    GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    ipv10 of s'5 { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 6#))
                                    0#
                                    GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    ipv12 of s'6 { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 7#))
                                    0#
                                    GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt1
                                    ipv14 of s'7 { DEFAULT ->
                             w (Data.ByteString.Internal.PS
                                  dt
                                  dt1
                                  (GHC.Prim.+# dt2 8#)
                                  (GHC.Prim.-# dt3 8#))
                               (GHC.Fingerprint.Type.Fingerprint
                                  sc
                                  (GHC.Prim.or#
                                     (GHC.Prim.or#
                                        (GHC.Prim.or#
                                           (GHC.Prim.or#
                                              (GHC.Prim.or#
                                                 (GHC.Prim.or#
                                                    (GHC.Prim.or#
                                                       (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                       (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                                    (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                                 (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                              (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                           (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                        (GHC.Prim.uncheckedShiftL# ipv13 8#))
                                     ipv15)) } } } } } } } } } } } } } } } } })
                       1#
                       -> case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# sc4 sc2)
                                 0#
                                 GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 sc3
                                 ipv of s' { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# sc4 (GHC.Prim.+# sc2 1#))
                                 0#
                                 GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 sc3
                                 ipv2 of s'1 { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# sc4 (GHC.Prim.+# sc2 2#))
                                 0#
                                 GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 sc3
                                 ipv4 of s'2 { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# sc4 (GHC.Prim.+# sc2 3#))
                                 0#
                                 GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 sc3
                                 ipv6 of s'3 { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# sc4 (GHC.Prim.+# sc2 4#))
                                 0#
                                 GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 sc3
                                 ipv8 of s'4 { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# sc4 (GHC.Prim.+# sc2 5#))
                                 0#
                                 GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 sc3
                                 ipv10 of s'5 { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# sc4 (GHC.Prim.+# sc2 6#))
                                 0#
                                 GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 sc3
                                 ipv12 of s'6 { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# sc4 (GHC.Prim.+# sc2 7#))
                                 0#
                                 GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 sc3
                                 ipv14 of s'7 { DEFAULT ->
                          w (Data.ByteString.Internal.PS
                               sc4
                               sc3
                               (GHC.Prim.+# sc2 8#)
                               (GHC.Prim.-# sc1 8#))
                            (GHC.Fingerprint.Type.Fingerprint
                               sc
                               (GHC.Prim.or#
                                  (GHC.Prim.or#
                                     (GHC.Prim.or#
                                        (GHC.Prim.or#
                                           (GHC.Prim.or#
                                              (GHC.Prim.or#
                                                 (GHC.Prim.or#
                                                    (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                    (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                                 (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                              (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                           (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                        (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                     (GHC.Prim.uncheckedShiftL# ipv13 8#))
                                  ipv15)) } } } } } } } } } } } } } } } } }
                 } in
                 case GHC.Prim.>=# ww3 8# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.Binary.Class.$fBinaryByteString2
                        Data.Binary.Class.$fBinaryAll7
                        Data.Binary.Class.$fBinaryAll6
                        Data.Binary.Class.$fBinaryAll3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                                0#
                                GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv2 of s'1 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                                0#
                                GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv4 of s'2 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                                0#
                                GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv6 of s'3 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 4#))
                                0#
                                GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv8 of s'4 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 5#))
                                0#
                                GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv10 of s'5 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 6#))
                                0#
                                GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv12 of s'6 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 7#))
                                0#
                                GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv14 of s'7 { DEFAULT ->
                         $s$wks
                           (GHC.Prim.or#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                                (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                             (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                          (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                       (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                    (GHC.Prim.uncheckedShiftL# ipv11 16#))
                                 (GHC.Prim.uncheckedShiftL# ipv13 8#))
                              ipv15)
                           (GHC.Prim.-# dt3 8#)
                           (GHC.Prim.+# dt2 8#)
                           dt1
                           dt } } } } } } } } } } } } } } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 4#))
                             0#
                             GHC.Prim.realWorld# of ds5 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv8 of s'4 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 5#))
                             0#
                             GHC.Prim.realWorld# of ds6 { (#,#) ipv10 ipv11 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv10 of s'5 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 6#))
                             0#
                             GHC.Prim.realWorld# of ds7 { (#,#) ipv12 ipv13 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv12 of s'6 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 7#))
                             0#
                             GHC.Prim.realWorld# of ds8 { (#,#) ipv14 ipv15 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv14 of s'7 { DEFAULT ->
                      $s$wks
                        (GHC.Prim.or#
                           (GHC.Prim.or#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.uncheckedShiftL# ipv1 56#)
                                             (GHC.Prim.uncheckedShiftL# ipv3 48#))
                                          (GHC.Prim.uncheckedShiftL# ipv5 40#))
                                       (GHC.Prim.uncheckedShiftL# ipv7 32#))
                                    (GHC.Prim.uncheckedShiftL# ipv9 24#))
                                 (GHC.Prim.uncheckedShiftL# ipv11 16#))
                              (GHC.Prim.uncheckedShiftL# ipv13 8#))
                           ipv15)
                        (GHC.Prim.-# ww3 8#)
                        (GHC.Prim.+# ww2 8#)
                        ww1
                        ww } } } } } } } } } } } } } } } } }) -}
8525594fbb3a1e5c6dba2327819ad333
  $w$cput ::
    GHC.Types.Bool
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Bool) ->
                 (# GHC.Tuple.(),
                    (\ @ r
                       (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                       DEFAULT
                       -> case w of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      0##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            GHC.Types.True
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      1##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               1#
                               dt
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                case w of wild2 {
                                  GHC.Types.False
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            0##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 }
                                  GHC.Types.True
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            1##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput1 ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e) =>
    GHC.Arr.Array i e
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,1*U(A,A,A,A,A,1*C1(U(U)),A)><L,U(C(U(A,C(U))),A,A)><L,U(U,U,U,U)>,
     Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput10 ::
    Data.Binary.Class.Binary e =>
    Data.IntMap.Internal.IntMap e
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(C(C1(U(U,U)))))),A,A)><L,U>,
     Inline: [2] -}
8369058918fde8bba82c29d2bb1d040f
  $w$cput11 ::
    Data.IntSet.Internal.IntSet
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: Data.IntSet.Internal.IntSet) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       x :: GHC.Int.Int64
                       = case Data.IntSet.Internal.$wgo3 0# w of ww { DEFAULT ->
                         GHC.Int.I64# ww }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case w of wild {
                           DEFAULT
                           -> case (Data.Binary.Class.$fBinaryIntSet_go1
                                      Data.Binary.Class.$fBinaryIntSet3
                                        `cast`
                                      (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                                      wild)
                                     `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                           Data.IntSet.Internal.Bin dt dt1 l r1
                           -> case GHC.Prim.<# dt1 0# of lwild {
                                DEFAULT
                                -> case (Data.Binary.Class.$fBinaryIntSet_go1
                                           (Data.Binary.Class.$fBinaryIntSet_go1
                                              Data.Binary.Class.$fBinaryIntSet3
                                                `cast`
                                              (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                                              r1)
                                           l)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds w' ->
                                   w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                                1#
                                -> case (Data.Binary.Class.$fBinaryIntSet_go1
                                           (Data.Binary.Class.$fBinaryIntSet_go1
                                              Data.Binary.Class.$fBinaryIntSet3
                                                `cast`
                                              (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                                              l)
                                           r1)
                                          `cast`
                                        (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds w' ->
                                   w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                                     @ r } } }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     let {
                       x2 :: Data.ByteString.Builder.Internal.BuildStep r = g x1
                     } in
                     let {
                       lvl59 :: Data.ByteString.Builder.Internal.BufferRange
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                         {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                       = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                         case x of wild1 { GHC.Int.I64# x# ->
                         let {
                           w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                         } in
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                dt
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                eta of s2 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 1#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                s2 of s1 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 2#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                s1 of s3 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 3#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                s3 of s4 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 4#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                s4 of s5 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 5#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                s5 of s6 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 6#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                s6 of s7 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 7#)
                                0#
                                (GHC.Prim.narrow8Word# w1)
                                s7 of s8 { DEFAULT ->
                         (x2
                            (Data.ByteString.Builder.Internal.BufferRange
                               (GHC.Prim.plusAddr# dt 8#)
                               dt1))
                           `cast`
                         (GHC.Types.N:IO[0]
                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                           s8 } } } } } } } } } }
                     } in
                     (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Int.I64# x# ->
                           let {
                             w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                           } in
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                  s3 of s4 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 4#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  s4 of s5 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 5#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s5 of s6 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 6#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s6 of s7 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 7#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s7 of s8 { DEFAULT ->
                           (x2
                              (Data.ByteString.Builder.Internal.BufferRange
                                 (GHC.Prim.plusAddr# dt 8#)
                                 dt1))
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                             s8 } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt
                                lvl59
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
13b8ff541b7c980cd20e587b15e23291
  $w$cput12 ::
    GHC.Types.KindRep
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput13 ::
    (Data.Binary.Class.Binary k, Data.Binary.Class.Binary e) =>
    Data.Map.Internal.Map k e
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U(C(U(A,C(U))),A,A)><L,U>,
     Inline: [2],
     Unfolding: (\ @ k
                   @ e
                   (w :: Data.Binary.Class.Binary k)
                   (w1 :: Data.Binary.Class.Binary e)
                   (w2 :: Data.Map.Internal.Map k e) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = letrec {
                           go13 :: Data.Binary.Put.PutM ()
                                   -> Data.Map.Internal.Map k e -> Data.Binary.Put.PutM ()
                             {- Arity: 2, Strictness: <L,1*U(U,U)><S,1*U> -}
                           = \ (z' :: Data.Binary.Put.PutM ())
                               (ds :: Data.Map.Internal.Map k e) ->
                             case ds of wild {
                               Data.Map.Internal.Bin dt kx x l r1
                               -> go13
                                    (let {
                                       xs :: Data.Binary.Put.PutM () = go13 z' r1
                                     } in
                                     (Data.Binary.Put.PairS
                                        @ ()
                                        (case xs
                                                `cast`
                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                                         b1 })
                                        (\ @ r2 ->
                                         let {
                                           f :: Data.ByteString.Builder.Internal.BuildStep r2
                                                -> Data.ByteString.Builder.Internal.BuildStep r2
                                           = case (Data.Binary.Class.put @ k w kx)
                                                    `cast`
                                                  (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w3 ->
                                             w3
                                               `cast`
                                             (Data.ByteString.Builder.Internal.N:Builder[0])
                                               @ r2 }
                                         } in
                                         let {
                                           g1 :: Data.ByteString.Builder.Internal.BuildStep r2
                                                 -> Data.ByteString.Builder.Internal.BuildStep r2
                                           = case (Data.Binary.Class.put @ e w1 x)
                                                    `cast`
                                                  (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w' ->
                                             w'
                                               `cast`
                                             (Data.ByteString.Builder.Internal.N:Builder[0])
                                               @ r2 }
                                         } in
                                         \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r2) ->
                                         f (g1
                                              (case xs
                                                      `cast`
                                                    (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                                               w'
                                                 `cast`
                                               (Data.ByteString.Builder.Internal.N:Builder[0])
                                                 @ r2
                                                 x1 })))
                                          `cast`
                                        (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))
                                       `cast`
                                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N))
                                    l
                               Data.Map.Internal.Tip -> z' }
                         } in
                         case (go13
                                 Data.Binary.Class.$fBinaryIntSet3
                                   `cast`
                                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                                 w2)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     let {
                       x1 :: Data.ByteString.Builder.Internal.BuildStep r = g x
                     } in
                     let {
                       lvl59 :: Data.ByteString.Builder.Internal.BufferRange
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                         {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                       = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                         case w2 of wild1 {
                           Data.Map.Internal.Bin dt2 ds1 ds2 ds3 ds4
                           -> let {
                                w3 :: GHC.Prim.Word# = GHC.Prim.int2Word# dt2
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 56#))
                                     eta of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 48#))
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 40#))
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 32#))
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 24#))
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 16#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 8#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w3)
                                     s7 of s8 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 8#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } }
                           Data.Map.Internal.Tip
                           -> case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 1#)
                                     0#
                                     0##
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 2#)
                                     0#
                                     0##
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 3#)
                                     0#
                                     0##
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 4#)
                                     0#
                                     0##
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 5#)
                                     0#
                                     0##
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 6#)
                                     0#
                                     0##
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 7#)
                                     0#
                                     0##
                                     s7 of s8 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 8#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } } } }
                     } in
                     (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                        DEFAULT
                        -> case w2 of wild1 {
                             Data.Map.Internal.Bin dt2 ds1 ds2 ds3 ds4
                             -> let {
                                  w3 :: GHC.Prim.Word# = GHC.Prim.int2Word# dt2
                                } in
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 56#))
                                       eta1 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 48#))
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 40#))
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 32#))
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 4#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 24#))
                                       s4 of s5 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 5#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 16#))
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 6#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 8#))
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 7#)
                                       0#
                                       (GHC.Prim.narrow8Word# w3)
                                       s7 of s8 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 8#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s8 } } } } } } } }
                             Data.Map.Internal.Tip
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 1#)
                                       0#
                                       0##
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 2#)
                                       0#
                                       0##
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 3#)
                                       0#
                                       0##
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 4#)
                                       0#
                                       0##
                                       s4 of s5 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 5#)
                                       0#
                                       0##
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 6#)
                                       0#
                                       0##
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 7#)
                                       0#
                                       0##
                                       s7 of s8 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 8#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s8 } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt
                                lvl59
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
e686f5e9bffcedcb5bb78281c0d3048d
  $w$cput14 ::
    GHC.Types.Ordering
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Ordering) ->
                 (# GHC.Tuple.(),
                    (\ @ r
                       (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                       DEFAULT
                       -> case w of wild1 {
                            GHC.Types.LT
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      0##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            GHC.Types.EQ
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      1##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            GHC.Types.GT
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      2##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               1#
                               dt
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                case w of wild2 {
                                  GHC.Types.LT
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            0##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 }
                                  GHC.Types.EQ
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            1##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 }
                                  GHC.Types.GT
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            2##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput15 ::
    Data.Binary.Class.Binary a =>
    GHC.Real.Ratio a
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U(U,U)>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: GHC.Real.Ratio a) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       f :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.put
                                 @ a
                                 w
                                 (case w1 of wild { GHC.Real.:% x ds1 -> x }))
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w2 ->
                         w2 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.put
                                 @ a
                                 w
                                 (case w1 of wild { GHC.Real.:% ds1 y -> y }))
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) -> f (g x))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
5804436f57a1c108ca8f3233094e5082
  $w$cput16 ::
    GHC.Types.RuntimeRep
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput17 ::
    Data.Binary.Class.Binary e =>
    Data.Sequence.Internal.Seq e
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U>, Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput18 ::
    Data.Binary.Class.Binary a =>
    Data.Set.Internal.Set a
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: Data.Set.Internal.Set a) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = letrec {
                           go3 :: Data.Binary.Put.PutM ()
                                  -> Data.Set.Internal.Set a -> Data.Binary.Put.PutM ()
                             {- Arity: 2, Strictness: <L,1*U(U,U)><S,1*U> -}
                           = \ (z' :: Data.Binary.Put.PutM ())
                               (ds :: Data.Set.Internal.Set a) ->
                             case ds of wild {
                               Data.Set.Internal.Bin dt x l r1
                               -> go3
                                    (let {
                                       k :: Data.Binary.Put.PutM () = go3 z' r1
                                     } in
                                     (Data.Binary.Put.PairS
                                        @ ()
                                        (case k `cast`
                                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                                         b1 })
                                        (\ @ r2 ->
                                         let {
                                           f :: Data.ByteString.Builder.Internal.BuildStep r2
                                                -> Data.ByteString.Builder.Internal.BuildStep r2
                                           = case (Data.Binary.Class.put @ a w x)
                                                    `cast`
                                                  (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds1 w2 ->
                                             w2
                                               `cast`
                                             (Data.ByteString.Builder.Internal.N:Builder[0])
                                               @ r2 }
                                         } in
                                         \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r2) ->
                                         f (case k `cast`
                                                 (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                                            w'
                                              `cast`
                                            (Data.ByteString.Builder.Internal.N:Builder[0])
                                              @ r2
                                              x1 }))
                                          `cast`
                                        (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))
                                       `cast`
                                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N))
                                    l
                               Data.Set.Internal.Tip -> z' }
                         } in
                         case (go3
                                 Data.Binary.Class.$fBinaryIntSet3
                                   `cast`
                                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                                 w1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     let {
                       x1 :: Data.ByteString.Builder.Internal.BuildStep r = g x
                     } in
                     let {
                       lvl59 :: Data.ByteString.Builder.Internal.BufferRange
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                         {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                       = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                         case w1 of wild1 {
                           Data.Set.Internal.Bin dt2 ds1 ds2 ds3
                           -> let {
                                w2 :: GHC.Prim.Word# = GHC.Prim.int2Word# dt2
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 56#))
                                     eta of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 48#))
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 40#))
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 32#))
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 24#))
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 16#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w2)
                                     s7 of s8 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 8#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } }
                           Data.Set.Internal.Tip
                           -> case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 1#)
                                     0#
                                     0##
                                     s2 of s1 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 2#)
                                     0#
                                     0##
                                     s1 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 3#)
                                     0#
                                     0##
                                     s3 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 4#)
                                     0#
                                     0##
                                     s4 of s5 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 5#)
                                     0#
                                     0##
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 6#)
                                     0#
                                     0##
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 7#)
                                     0#
                                     0##
                                     s7 of s8 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 8#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s8 } } } } } } } } } }
                     } in
                     (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                        DEFAULT
                        -> case w1 of wild1 {
                             Data.Set.Internal.Bin dt2 ds1 ds2 ds3
                             -> let {
                                  w2 :: GHC.Prim.Word# = GHC.Prim.int2Word# dt2
                                } in
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 56#))
                                       eta1 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 48#))
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 40#))
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 32#))
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 4#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 24#))
                                       s4 of s5 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 5#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 16#))
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 6#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 7#)
                                       0#
                                       (GHC.Prim.narrow8Word# w2)
                                       s7 of s8 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 8#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s8 } } } } } } } }
                             Data.Set.Internal.Tip
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 1#)
                                       0#
                                       0##
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 2#)
                                       0#
                                       0##
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 3#)
                                       0#
                                       0##
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 4#)
                                       0#
                                       0##
                                       s4 of s5 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 5#)
                                       0#
                                       0##
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 6#)
                                       0#
                                       0##
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 7#)
                                       0#
                                       0##
                                       s7 of s8 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 8#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s8 } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt
                                lvl59
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
aeedc63b898a68d7f13dbcf9892440d8
  $w$cput19 ::
    Data.ByteString.Short.Internal.ShortByteString
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>, Inline: [2],
     Unfolding: (\ (w :: Data.ByteString.Short.Internal.ShortByteString) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       x :: GHC.Int.Int64
                       = case w of wild { Data.ByteString.Short.Internal.SBS barr# ->
                         GHC.Int.I64# (GHC.Prim.sizeofByteArray# barr#) }
                     } in
                     (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                        (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                      let {
                        $wx1 :: GHC.Prim.Addr#
                                -> GHC.Prim.Addr#
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                          {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [2] -}
                        = \ (ww :: GHC.Prim.Addr#)
                            (ww1 :: GHC.Prim.Addr#)[OneShot]
                            (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case w of sbs1 { Data.ByteString.Short.Internal.SBS ipv ->
                          letrec {
                            $wgo4 :: GHC.Prim.Int#
                                     -> GHC.Prim.Int#
                                     -> GHC.Prim.Addr#
                                     -> GHC.Prim.Addr#
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 5, Strictness: <S,U><S,U><S,U><S,U><S,U>, Inline: [2] -}
                            = \ (ww2 :: GHC.Prim.Int#)
                                (ww3 :: GHC.Prim.Int#)
                                (ww4 :: GHC.Prim.Addr#)
                                (ww5 :: GHC.Prim.Addr#)
                                (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              let {
                                inpRemaining :: GHC.Prim.Int# = GHC.Prim.-# ww3 ww2
                              } in
                              let {
                                outRemaining :: GHC.Prim.Int# = GHC.Prim.minusAddr# ww5 ww4
                              } in
                              case GHC.Prim.<=# inpRemaining outRemaining of lwild {
                                DEFAULT
                                -> case GHC.Prim.copyByteArrayToAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv
                                          ww2
                                          ww4
                                          outRemaining
                                          w2 of s1 { DEFAULT ->
                                   (# s1,
                                      Data.ByteString.Builder.Internal.BufferFull
                                        @ r
                                        1#
                                        ww5
                                        (let {
                                           w3 :: GHC.Prim.Int# = GHC.Prim.+# ww2 outRemaining
                                         } in
                                         (\ (w4 :: Data.ByteString.Builder.Internal.BufferRange)
                                            (w5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                          case w4 of ww6 { Data.ByteString.Builder.Internal.BufferRange ww7 ww8 ->
                                          $wgo4 w3 ww3 ww7 ww8 w5 })
                                           `cast`
                                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R))) #) }
                                1#
                                -> case GHC.Prim.copyByteArrayToAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv
                                          ww2
                                          ww4
                                          inpRemaining
                                          w2 of s1 { DEFAULT ->
                                   (x1
                                      (Data.ByteString.Builder.Internal.BufferRange
                                         (GHC.Prim.plusAddr# ww4 inpRemaining)
                                         ww5))
                                     `cast`
                                   (GHC.Types.N:IO[0]
                                        <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                     s1 } }
                          } in
                          $wgo4 0# (GHC.Prim.sizeofByteArray# ipv) ww ww1 w1 }
                      } in
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Int.I64# x# ->
                           let {
                             w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                           } in
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                  s3 of s4 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 4#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  s4 of s5 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 5#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s5 of s6 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 6#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s6 of s7 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 7#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s7 of s8 { DEFAULT ->
                           $wx1 (GHC.Prim.plusAddr# dt 8#) dt1 s8 } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt
                                (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                 case x of wild2 { GHC.Int.I64# x# ->
                                 let {
                                   w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                                 } in
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        dt2
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                        eta2 of s2 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 1#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                        s2 of s1 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 2#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                        s1 of s3 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 3#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                        s3 of s4 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 4#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                        s4 of s5 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 5#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                        s5 of s6 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 6#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                        s6 of s7 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 7#)
                                        0#
                                        (GHC.Prim.narrow8Word# w1)
                                        s7 of s8 { DEFAULT ->
                                 $wx1 (GHC.Prim.plusAddr# dt2 8#) dt3 s8 } } } } } } } } } })
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
3d82756e9e5cbacaec141fea50a1fbb7
  $w$cput2 ::
    Data.ByteString.Lazy.Internal.ByteString
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: Data.ByteString.Lazy.Internal.ByteString) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       x :: GHC.Int.Int64 = Data.Binary.Class.$wgo3 0# w
                     } in
                     (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                        (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Int.I64# x# ->
                           let {
                             w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                           } in
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                  s3 of s4 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 4#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  s4 of s5 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 5#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s5 of s6 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 6#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s6 of s7 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 7#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s7 of s8 { DEFAULT ->
                           Data.Binary.Class.$fBinaryByteString_$sgo1
                             @ r
                             s8
                             (GHC.Prim.plusAddr# dt 8#)
                             dt1
                             x1
                             w } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt
                                (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                 case x of wild2 { GHC.Int.I64# x# ->
                                 let {
                                   w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                                 } in
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        dt2
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                        eta2 of s2 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 1#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                        s2 of s1 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 2#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                        s1 of s3 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 3#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                        s3 of s4 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 4#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                        s4 of s5 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 5#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                        s5 of s6 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 6#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                        s6 of s7 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 7#)
                                        0#
                                        (GHC.Prim.narrow8Word# w1)
                                        s7 of s8 { DEFAULT ->
                                 Data.Binary.Class.$fBinaryByteString_$sgo1
                                   @ r
                                   s8
                                   (GHC.Prim.plusAddr# dt2 8#)
                                   dt3
                                   x1
                                   w } } } } } } } } } })
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput20 ::
    Data.Binary.Class.Binary e =>
    e
    -> Data.Tree.Forest e
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, Strictness: <L,U(C(U(A,C(U))),C(C1(U)),A)><L,U><L,U>,
     Inline: [2],
     Unfolding: (\ @ e
                   (w :: Data.Binary.Class.Binary e)
                   (ww :: e)
                   (ww1 :: Data.Tree.Forest e) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       f :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.put @ e w ww)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w1 ->
                         w1 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       g :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.$fBinaryTree_$cputList @ e w ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) -> f (g x))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
dbf7ddcd81bff3b6aed124b8cd5ce6c5
  $w$cput21 ::
    GHC.Types.TyCon
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <L,U(A,A,U(1*U,1*U),1*U,U,1*U)>,
     Inline: [2],
     Unfolding: (\ (w :: GHC.Types.TyCon) ->
                 let {
                   k :: Data.Binary.Put.PutM ()
                   = case w of wild { GHC.Types.TyCon ds1 ds2 ds3 ds4 ds5 k1 ->
                     case Data.Binary.Class.$w$cput12 k1 of ww { (#,#) ww1 ww2 ->
                     (Data.Binary.Put.PairS @ () ww1 ww2)
                       `cast`
                     (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }
                 } in
                 (# case k `cast`
                         (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                    b1 },
                    (\ @ r ->
                     let {
                       f :: Data.ByteString.Builder.Internal.BuildStep r
                            -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList
                                (Data.Typeable.Internal.tyConPackage w) of ww { (#,#) ww1 ww2 ->
                         ww2 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f1 :: Data.ByteString.Builder.Internal.BuildStep r
                             -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList
                                (Data.Typeable.Internal.tyConModule w) of ww { (#,#) ww1 ww2 ->
                         ww2 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     let {
                       f2 :: Data.ByteString.Builder.Internal.BuildStep r
                             -> Data.ByteString.Builder.Internal.BuildStep r
                       = case Data.Binary.Class.$w$cputList
                                (Data.Typeable.Internal.tyConName w) of ww { (#,#) ww1 ww2 ->
                         ww2 `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     f (f1
                          (f2
                             (let {
                                x1 :: Data.ByteString.Builder.Internal.BuildStep r
                                = case k `cast`
                                       (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS b1 w' ->
                                  w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                              } in
                              let {
                                lvl59 :: Data.ByteString.Builder.Internal.BufferRange
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Data.ByteString.Builder.Internal.BuildSignal r #)
                                  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                                = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                    (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                  case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                  case w of wild1 { GHC.Types.TyCon ds1 ds2 ds3 ds4 n ds5 ->
                                  let {
                                    w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# n
                                  } in
                                  case GHC.Prim.writeWord8OffAddr#
                                         @ GHC.Prim.RealWorld
                                         dt
                                         0#
                                         (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                         eta of s2 { DEFAULT ->
                                  case GHC.Prim.writeWord8OffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr# dt 1#)
                                         0#
                                         (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                         s2 of s1 { DEFAULT ->
                                  case GHC.Prim.writeWord8OffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr# dt 2#)
                                         0#
                                         (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                         s1 of s3 { DEFAULT ->
                                  case GHC.Prim.writeWord8OffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr# dt 3#)
                                         0#
                                         (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                         s3 of s4 { DEFAULT ->
                                  case GHC.Prim.writeWord8OffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr# dt 4#)
                                         0#
                                         (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                         s4 of s5 { DEFAULT ->
                                  case GHC.Prim.writeWord8OffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr# dt 5#)
                                         0#
                                         (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                         s5 of s6 { DEFAULT ->
                                  case GHC.Prim.writeWord8OffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr# dt 6#)
                                         0#
                                         (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                         s6 of s7 { DEFAULT ->
                                  case GHC.Prim.writeWord8OffAddr#
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.plusAddr# dt 7#)
                                         0#
                                         (GHC.Prim.narrow8Word# w1)
                                         s7 of s8 { DEFAULT ->
                                  (x1
                                     (Data.ByteString.Builder.Internal.BufferRange
                                        (GHC.Prim.plusAddr# dt 8#)
                                        dt1))
                                    `cast`
                                  (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                    s8 } } } } } } } } } }
                              } in
                              (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                                 (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                               case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                               case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                                 DEFAULT
                                 -> case w of wild1 { GHC.Types.TyCon ds1 ds2 ds3 ds4 n ds5 ->
                                    let {
                                      w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# n
                                    } in
                                    case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           dt
                                           0#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.uncheckedShiftRL# w1 56#))
                                           eta1 of s2 { DEFAULT ->
                                    case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           (GHC.Prim.plusAddr# dt 1#)
                                           0#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.uncheckedShiftRL# w1 48#))
                                           s2 of s1 { DEFAULT ->
                                    case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           (GHC.Prim.plusAddr# dt 2#)
                                           0#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.uncheckedShiftRL# w1 40#))
                                           s1 of s3 { DEFAULT ->
                                    case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           (GHC.Prim.plusAddr# dt 3#)
                                           0#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.uncheckedShiftRL# w1 32#))
                                           s3 of s4 { DEFAULT ->
                                    case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           (GHC.Prim.plusAddr# dt 4#)
                                           0#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.uncheckedShiftRL# w1 24#))
                                           s4 of s5 { DEFAULT ->
                                    case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           (GHC.Prim.plusAddr# dt 5#)
                                           0#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.uncheckedShiftRL# w1 16#))
                                           s5 of s6 { DEFAULT ->
                                    case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           (GHC.Prim.plusAddr# dt 6#)
                                           0#
                                           (GHC.Prim.narrow8Word#
                                              (GHC.Prim.uncheckedShiftRL# w1 8#))
                                           s6 of s7 { DEFAULT ->
                                    case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           (GHC.Prim.plusAddr# dt 7#)
                                           0#
                                           (GHC.Prim.narrow8Word# w1)
                                           s7 of s8 { DEFAULT ->
                                    (x1
                                       (Data.ByteString.Builder.Internal.BufferRange
                                          (GHC.Prim.plusAddr# dt 8#)
                                          dt1))
                                      `cast`
                                    (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                      s8 } } } } } } } } }
                                 1#
                                 -> (# eta1,
                                       Data.ByteString.Builder.Internal.BufferFull
                                         @ r
                                         8#
                                         dt
                                         lvl59
                                           `cast`
                                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)) #) } })
                                `cast`
                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                r>_R))))))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput22 ::
    (Data.Binary.Class.Binary i, GHC.Arr.Ix i,
     Data.Binary.Class.Binary e,
     Data.Array.Base.IArray Data.Array.Base.UArray e) =>
    Data.Array.Base.UArray i e
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U(U,U,U,U,U,U,U)><L,U(C(U(A,C(U))),A,A)><L,U(C(C1(U(U,U))),1*C1(C1(U(U))),A,C(C1(C1(U))),A,A,A)><L,U>,
     Inline: [2] -}
0c9b34b9b691a9c0883410fa272a9d46
  $w$cput23 ::
    GHC.Types.VecCount
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.VecCount) ->
                 (# GHC.Tuple.(),
                    (\ @ r
                       (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                       DEFAULT
                       -> case w of wild1 {
                            GHC.Types.Vec2
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      0##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            GHC.Types.Vec4
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      1##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            GHC.Types.Vec8
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      2##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            GHC.Types.Vec16
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      3##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            GHC.Types.Vec32
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      4##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            GHC.Types.Vec64
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      5##
                                      eta1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# dt 1#)
                                     dt1))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               1#
                               dt
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                case w of wild2 {
                                  GHC.Types.Vec2
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            0##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 }
                                  GHC.Types.Vec4
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            1##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 }
                                  GHC.Types.Vec8
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            2##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 }
                                  GHC.Types.Vec16
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            3##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 }
                                  GHC.Types.Vec32
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            4##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 }
                                  GHC.Types.Vec64
                                  -> case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            5##
                                            eta2 of s2 { DEFAULT ->
                                     (x1
                                        (Data.ByteString.Builder.Internal.BufferRange
                                           (GHC.Prim.plusAddr# dt2 1#)
                                           dt3))
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                       s2 } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
30bf85a9dd87e1b5946816f7c20a424b
  $w$cput24 ::
    GHC.Types.VecElem
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.VecElem) ->
                 (# GHC.Tuple.(),
                    let {
                      x :: GHC.Word.Word8
                      = case GHC.Prim.dataToTag# @ GHC.Types.VecElem w of a# { DEFAULT ->
                        GHC.Word.W8# (GHC.Prim.narrow8Word# (GHC.Prim.int2Word# a#)) }
                    } in
                    (\ @ r
                       (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                       DEFAULT
                       -> case x of wild2 { GHC.Word.W8# x2 ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 dt
                                 0#
                                 x2
                                 eta1 of s2 { DEFAULT ->
                          (x1
                             (Data.ByteString.Builder.Internal.BufferRange
                                (GHC.Prim.plusAddr# dt 1#)
                                dt1))
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                            s2 } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               1#
                               dt
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                case x of wild2 { GHC.Word.W8# x2 ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       x2
                                       eta2 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 1#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
dff0685888f5fa7aa4a030fcd6aba0ce
  $w$cput25 ::
    [GHC.Types.Int]
    -> [GHC.Base.String]
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: [GHC.Types.Int]) (ww1 :: [GHC.Base.String]) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc @ GHC.Types.Int ww 0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     let {
                       g :: [GHC.Int.Int64]
                       = GHC.Base.map
                           @ GHC.Types.Int
                           @ GHC.Int.Int64
                           Data.Binary.Class.$fBinaryVersion3
                           ww
                     } in
                     let {
                       g1 :: Data.ByteString.Builder.Internal.BuildStep r
                             -> Data.ByteString.Builder.Internal.BuildStep r
                       = case (Data.Binary.Class.$fBinaryVersion_$s$cputList ww1)
                                `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                         w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                     } in
                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                     let {
                       x2 :: Data.ByteString.Builder.Internal.BuildStep r = g1 x1
                     } in
                     let {
                       lvl59 :: Data.ByteString.Builder.Internal.BufferRange
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                         {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                       = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                           (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                         case x of wild1 { GHC.Int.I64# x# ->
                         let {
                           w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                         } in
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                dt
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                eta of s2 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 1#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                s2 of s1 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 2#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                s1 of s3 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 3#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                s3 of s4 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 4#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                s4 of s5 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 5#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                s5 of s6 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 6#)
                                0#
                                (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                s6 of s7 { DEFAULT ->
                         case GHC.Prim.writeWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt 7#)
                                0#
                                (GHC.Prim.narrow8Word# w1)
                                s7 of s8 { DEFAULT ->
                         Data.Binary.Class.$fBinaryVersion2
                           @ r
                           g
                           x2
                           (GHC.Prim.plusAddr# dt 8#)
                           dt1
                           s8 } } } } } } } } } }
                     } in
                     (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Int.I64# x# ->
                           let {
                             w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                           } in
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                  s3 of s4 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 4#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  s4 of s5 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 5#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s5 of s6 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 6#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s6 of s7 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 7#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s7 of s8 { DEFAULT ->
                           Data.Binary.Class.$fBinaryVersion2
                             @ r
                             g
                             x2
                             (GHC.Prim.plusAddr# dt 8#)
                             dt1
                             s8 } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt
                                lvl59
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
9a1ec69890f1c7035a78752d02a890c1
  $w$cput26 ::
    GHC.Types.Word
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Word) ->
                 (# GHC.Tuple.(),
                    (\ @ r
                       (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                       DEFAULT
                       -> case w of wild1 { GHC.Types.W# x# ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 dt
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 56#))
                                 eta1 of s2 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 1#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 48#))
                                 s2 of s1 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 2#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 40#))
                                 s1 of s3 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 3#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 32#))
                                 s3 of s4 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 4#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 24#))
                                 s4 of s5 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 5#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 16#))
                                 s5 of s6 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 6#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 8#))
                                 s6 of s7 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 7#)
                                 0#
                                 (GHC.Prim.narrow8Word# x#)
                                 s7 of s8 { DEFAULT ->
                          (x1
                             (Data.ByteString.Builder.Internal.BufferRange
                                (GHC.Prim.plusAddr# dt 8#)
                                dt1))
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                            s8 } } } } } } } } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               8#
                               dt
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                case w of wild2 { GHC.Types.W# x# ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 56#))
                                       eta2 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 48#))
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 40#))
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 32#))
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 4#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 24#))
                                       s4 of s5 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 5#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 16#))
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 6#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# x# 8#))
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 7#)
                                       0#
                                       (GHC.Prim.narrow8Word# x#)
                                       s7 of s8 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 8#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s8 } } } } } } } } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
9457d92a0e4ee16bb51de3f791c833e8
  $w$cput3 ::
    Data.ByteString.Internal.ByteString
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U,U)>, Inline: [2],
     Unfolding: (\ (w :: Data.ByteString.Internal.ByteString) ->
                 (# GHC.Tuple.(),
                    (\ @ r
                       (x :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     let {
                       $wx1 :: GHC.Prim.Addr#
                               -> GHC.Prim.Addr#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.ByteString.Builder.Internal.BuildSignal r #)
                         {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [2] -}
                       = \ (ww :: GHC.Prim.Addr#)
                           (ww1 :: GHC.Prim.Addr#)[OneShot]
                           (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case w of wild1 { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case x of k1 { DEFAULT ->
                         case GHC.Prim.<=# dt5 8160# of lwild {
                           DEFAULT
                           -> (# w1,
                                 Data.ByteString.Builder.Internal.InsertChunk @ r ww wild1 k1 #)
                           1#
                           -> let {
                                op' :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ww dt5
                              } in
                              let {
                                ip :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt2 dt4
                              } in
                              case GHC.Prim.ltAddr# ww1 op' of lwild1 {
                                DEFAULT
                                -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.Addr#
                                                                   -> GHC.Prim.Addr#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Addr# #)}
                                          ww
                                          ip
                                          (GHC.Prim.int2Word# dt5)
                                          w1 of wild3 { (#,#) ds4 ds5 ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.LiftedRep
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          dt3
                                          ds4 of s' { DEFAULT ->
                                   (k1 (Data.ByteString.Builder.Internal.BufferRange op' ww1))
                                     `cast`
                                   (GHC.Types.N:IO[0]
                                        <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                     s' } }
                                1#
                                -> Data.ByteString.Builder.Internal.$wwrappedBytesCopyStep
                                     @ r
                                     ip
                                     (GHC.Prim.plusAddr# ip dt5)
                                     (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                        (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case GHC.Prim.touch#
                                             @ 'GHC.Types.LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             dt3
                                             s of s' { DEFAULT ->
                                      (k1 br1)
                                        `cast`
                                      (GHC.Types.N:IO[0]
                                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                        s' })
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R))
                                     ww
                                     ww1
                                     w1 } } } }
                     } in
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                       DEFAULT
                       -> case w of wild1 { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                          let {
                            w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# dt5
                          } in
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 dt
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                 eta1 of s2 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 1#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                 s2 of s1 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 2#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                 s1 of s3 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 3#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                 s3 of s4 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 4#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                 s4 of s5 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 5#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                 s5 of s6 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 6#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                 s6 of s7 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 7#)
                                 0#
                                 (GHC.Prim.narrow8Word# w1)
                                 s7 of s8 { DEFAULT ->
                          $wx1 (GHC.Prim.plusAddr# dt 8#) dt1 s8 } } } } } } } } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               8#
                               dt
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                case w of wild2 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                                let {
                                  w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# dt7
                                } in
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                       eta2 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 4#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                       s4 of s5 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 5#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 6#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 7#)
                                       0#
                                       (GHC.Prim.narrow8Word# w1)
                                       s7 of s8 { DEFAULT ->
                                $wx1 (GHC.Prim.plusAddr# dt2 8#) dt3 s8 } } } } } } } } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
61595940bd3461f87fa941632af3f5d3
  $w$cput4 ::
    GHC.Prim.Double#
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput5 ::
    (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) =>
    Data.Either.Either a b
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(C(C1(U(U,U)))))),A,A)><L,1*U(1*C1(U(A,C(C(C1(U(U,U)))))),A,A)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: Data.Binary.Class.Binary b)
                   (w2 :: Data.Either.Either a b) ->
                 case w2 of wild {
                   Data.Either.Left a1
                   -> (# GHC.Tuple.(),
                         (\ @ r ->
                          let {
                            g :: Data.ByteString.Builder.Internal.BuildStep r
                                 -> Data.ByteString.Builder.Internal.BuildStep r
                            = case (Data.Binary.Class.put @ a w a1)
                                     `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                          } in
                          \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r = g x
                          } in
                          let {
                            lvl59 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     0##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       0##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl59
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   Data.Either.Right b1
                   -> (# GHC.Tuple.(),
                         (\ @ r ->
                          let {
                            g :: Data.ByteString.Builder.Internal.BuildStep r
                                 -> Data.ByteString.Builder.Internal.BuildStep r
                            = case (Data.Binary.Class.put @ b w1 b1)
                                     `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                          } in
                          \ (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r = g x
                          } in
                          let {
                            lvl59 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl59
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
538b884e1d0f0ba8b1f3cd38340a6e43
  $w$cput6 ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Word#) (ww1 :: GHC.Prim.Word#) ->
                 (# GHC.Tuple.(),
                    (\ @ r
                       (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 16# of lwild {
                       DEFAULT
                       -> case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 dt
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 56#))
                                 eta1 of s2 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 1#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 48#))
                                 s2 of s1 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 2#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 40#))
                                 s1 of s3 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 3#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 32#))
                                 s3 of s4 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 4#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 24#))
                                 s4 of s5 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 5#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 16#))
                                 s5 of s6 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 6#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 8#))
                                 s6 of s7 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 7#)
                                 0#
                                 (GHC.Prim.narrow8Word# ww)
                                 s7 of s8 { DEFAULT ->
                          let {
                            ipv1 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt 8#
                          } in
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 ipv1
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 56#))
                                 s8 of s11 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 1#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 48#))
                                 s11 of s12 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 2#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 40#))
                                 s12 of s13 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 3#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 32#))
                                 s13 of s14 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 4#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 24#))
                                 s14 of s15 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 5#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 16#))
                                 s15 of s16 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 6#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 8#))
                                 s16 of s17 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 7#)
                                 0#
                                 (GHC.Prim.narrow8Word# ww1)
                                 s17 of s18 { DEFAULT ->
                          (x1
                             (Data.ByteString.Builder.Internal.BufferRange
                                (GHC.Prim.plusAddr# ipv1 8#)
                                dt1))
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                            s18 } } } } } } } } } } } } } } } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               16#
                               dt
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 56#))
                                       eta2 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 48#))
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 40#))
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 32#))
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 4#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 24#))
                                       s4 of s5 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 5#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 16#))
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 6#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww 8#))
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 7#)
                                       0#
                                       (GHC.Prim.narrow8Word# ww)
                                       s7 of s8 { DEFAULT ->
                                let {
                                  ipv1 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt2 8#
                                } in
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       ipv1
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 56#))
                                       s8 of s11 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 48#))
                                       s11 of s12 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 40#))
                                       s12 of s13 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 32#))
                                       s13 of s14 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 4#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 24#))
                                       s14 of s15 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 5#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 16#))
                                       s15 of s16 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 6#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# ww1 8#))
                                       s16 of s17 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 7#)
                                       0#
                                       (GHC.Prim.narrow8Word# ww1)
                                       s17 of s18 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# ipv1 8#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s18 } } } } } } } } } } } } } } } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  $w$cput7 ::
    Data.Binary.Class.Binary a =>
    GHC.Maybe.Maybe a
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,C(C(C1(U(U,U)))))),A,A)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: Data.Binary.Class.Binary a)
                   (w1 :: GHC.Maybe.Maybe a) ->
                 case w1 of wild {
                   GHC.Maybe.Nothing
                   -> (# GHC.Tuple.(),
                         Data.Binary.Class.$fBinaryFirst4
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   GHC.Maybe.Just x
                   -> (# GHC.Tuple.(),
                         (\ @ r ->
                          let {
                            g :: Data.ByteString.Builder.Internal.BuildStep r
                                 -> Data.ByteString.Builder.Internal.BuildStep r
                            = case (Data.Binary.Class.put @ a w x)
                                     `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS ds w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r }
                          } in
                          \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x2 :: Data.ByteString.Builder.Internal.BuildStep r = g x1
                          } in
                          let {
                            lvl59 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     1##
                                     eta of s2 { DEFAULT ->
                              (x2
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# dt 1#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s2 } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       1##
                                       eta1 of s2 { DEFAULT ->
                                (x2
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt 1#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt
                                     lvl59
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
53c3996031c08c7baa90a8fea3b83c6e
  $w$cput8 ::
    GHC.Prim.Float#
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
24cdfa2e5fdf93f7a4905d5e0410087f
  $w$cput9 ::
    GHC.Types.Int -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Int) ->
                 (# GHC.Tuple.(),
                    (\ @ r
                       (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                       DEFAULT
                       -> case w of wild1 { GHC.Types.I# x# ->
                          let {
                            w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                          } in
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 dt
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                 eta1 of s2 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 1#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                 s2 of s1 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 2#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                 s1 of s3 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 3#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                 s3 of s4 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 4#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                 s4 of s5 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 5#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                 s5 of s6 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 6#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                 s6 of s7 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# dt 7#)
                                 0#
                                 (GHC.Prim.narrow8Word# w1)
                                 s7 of s8 { DEFAULT ->
                          (x1
                             (Data.ByteString.Builder.Internal.BufferRange
                                (GHC.Prim.plusAddr# dt 8#)
                                dt1))
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                            s8 } } } } } } } } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               8#
                               dt
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                case w of wild2 { GHC.Types.I# x# ->
                                let {
                                  w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                                } in
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt2
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                       eta2 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 4#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                       s4 of s5 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 5#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 6#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt2 7#)
                                       0#
                                       (GHC.Prim.narrow8Word# w1)
                                       s7 of s8 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt2 8#)
                                      dt3))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s8 } } } } } } } } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
4fd316dd431dc7c5a391f47836137661
  $w$cputList ::
    [GHC.Types.Char]
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: [GHC.Types.Char]) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       x :: GHC.Int.Int64
                       = case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                         GHC.Int.I64# ww2 }
                     } in
                     (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                        (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 8# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Int.I64# x# ->
                           let {
                             w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                           } in
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                  s3 of s4 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 4#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  s4 of s5 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 5#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s5 of s6 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 6#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s6 of s7 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt 7#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s7 of s8 { DEFAULT ->
                           Data.Binary.Class.$wpoly_step
                             @ r
                             w
                             x1
                             (GHC.Prim.plusAddr# dt 8#)
                             dt1
                             s8 } } } } } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                8#
                                dt
                                (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                 case x of wild2 { GHC.Int.I64# x# ->
                                 let {
                                   w1 :: GHC.Prim.Word# = GHC.Prim.int2Word# x#
                                 } in
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        dt2
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 56#))
                                        eta2 of s2 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 1#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 48#))
                                        s2 of s1 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 2#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 40#))
                                        s1 of s3 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 3#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 32#))
                                        s3 of s4 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 4#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                        s4 of s5 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 5#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                        s5 of s6 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 6#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                        s6 of s7 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt2 7#)
                                        0#
                                        (GHC.Prim.narrow8Word# w1)
                                        s7 of s8 { DEFAULT ->
                                 Data.Binary.Class.$wpoly_step
                                   @ r
                                   w
                                   x1
                                   (GHC.Prim.plusAddr# dt2 8#)
                                   dt3
                                   s8 } } } } } } } } } })
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
b1e52f4c33107b5468f61862e672d30f
  $w$s$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success [GHC.Types.Int] r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success [GHC.Types.Int] r) ->
                 Data.Binary.Class.$w$cget5
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Int)[OneShot] ->
                    case a1 of ww4 { GHC.Types.I# ww5 ->
                    Data.Binary.Class.$wgo
                      (GHC.Types.[] @ GHC.Types.Int)
                      ww5
                      @ r
                      i'
                      w })) -}
27489cae08d44ad25e3a6d3958db26e2
  $w$s$cget1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success [GHC.Word.Word8] r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success [GHC.Word.Word8] r) ->
                 Data.Binary.Class.$w$cget5
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Int)[OneShot] ->
                    case a1 of ww4 { GHC.Types.I# ww5 ->
                    case ww5 of wild {
                      DEFAULT
                      -> case i' of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         let {
                           lvl59 :: GHC.Prim.Int# = GHC.Prim.-# wild 1#
                         } in
                         case GHC.Prim.>=# dt3 1# of lwild {
                           DEFAULT
                           -> Data.Binary.Get.Internal.readN1
                                @ GHC.Types.Int
                                @ Data.ByteString.Internal.ByteString
                                Data.Binary.Class.$fBinaryAll8
                                Data.Binary.Class.$fBinaryAll7
                                Data.Binary.Class.$fBinaryAll6
                                Data.Binary.Class.$fBinaryAll3
                                  `cast`
                                (<[Data.ByteString.Internal.ByteString]>_R
                                 ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                               <Data.ByteString.Internal.ByteString>_R))
                                @ r
                                wild1
                                (\ (i'1 :: Data.ByteString.Internal.ByteString)
                                   (a2 :: Data.ByteString.Internal.ByteString) ->
                                 case a2 of wild2 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                                 case GHC.Prim.readWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt4 dt6)
                                        0#
                                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                                 case GHC.Prim.touch#
                                        @ 'GHC.Types.LiftedRep
                                        @ GHC.ForeignPtr.ForeignPtrContents
                                        dt5
                                        ipv of s' { DEFAULT ->
                                 Data.Binary.Class.$fBinaryInteger_$s$wgo
                                   @ r
                                   w
                                   dt4
                                   dt5
                                   (GHC.Prim.+# dt6 1#)
                                   (GHC.Prim.-# dt7 1#)
                                   lvl59
                                   (GHC.Types.:
                                      @ GHC.Word.Word8
                                      (GHC.Word.W8# ipv1)
                                      (GHC.Types.[] @ GHC.Word.Word8)) } } })
                           1#
                           -> case GHC.Prim.readWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt dt2)
                                     0#
                                     GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                              case GHC.Prim.touch#
                                     @ 'GHC.Types.LiftedRep
                                     @ GHC.ForeignPtr.ForeignPtrContents
                                     dt1
                                     ipv of s' { DEFAULT ->
                              Data.Binary.Class.$fBinaryInteger_$s$wgo
                                @ r
                                w
                                dt
                                dt1
                                (GHC.Prim.+# dt2 1#)
                                (GHC.Prim.-# dt3 1#)
                                lvl59
                                (GHC.Types.:
                                   @ GHC.Word.Word8
                                   (GHC.Word.W8# ipv1)
                                   (GHC.Types.[] @ GHC.Word.Word8)) } } } }
                      0#
                      -> case GHC.List.reverse1
                                @ GHC.Word.Word8
                                (GHC.Types.[] @ GHC.Word.Word8)
                                (GHC.Types.[] @ GHC.Word.Word8) of vx { DEFAULT ->
                         w i' vx } } })) -}
b7c89d49f6481e7578f964a66e7c41d6
  $w$s$cget2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success [GHC.Types.Char] r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [2],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success [GHC.Types.Char] r) ->
                 Data.Binary.Class.$w$cget5
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: GHC.Types.Int)[OneShot] ->
                    case a1 of ww4 { GHC.Types.I# ww5 ->
                    Data.Binary.Class.$wgo1
                      (GHC.Types.[] @ GHC.Types.Char)
                      ww5
                      @ r
                      i'
                      w })) -}
b49c7f3602cd483b6a96d558c639ab7c
  $wgetSomeTypeRep ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         Data.Typeable.Internal.SomeTypeRep r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [2] -}
095122a8833808c8b8e88748447cec6d
  $wgo ::
    [GHC.Types.Int]
    -> GHC.Prim.Int#
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success [GHC.Types.Int] r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2] -}
10eab027e7749a0f4ba68490a71e0186
  $wgo1 ::
    [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success [GHC.Types.Char] r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U(U,U,U,U)><L,C(C1(U))>,
     Inline: [2] -}
cd62f0b2a05fcbab853aac39acb7dd51
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.ByteString.Lazy.Internal.ByteString -> GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>m,
     Inline: [2] -}
bc629d9e6e45b3cb20198a119c83f659
  $wlvl ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             0##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   0##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
06efd357588f60d9eebf3f15774eacfe
  $wlvl1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww1 ww) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww
                             0#
                             1##
                             w1 of s2 { DEFAULT ->
                      (w (Data.ByteString.Builder.Internal.BufferRange
                            (GHC.Prim.plusAddr# ww 1#)
                            ww1))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                        s2 }
                   1#
                   -> (# w1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   1##
                                   eta of s2 { DEFAULT ->
                            (w (Data.ByteString.Builder.Internal.BufferRange
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1))
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) }) -}
afbea4b59429349b87f924c75f309b6c
  $wpoly_step ::
    [GHC.Types.Char]
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,U><L,U><S,U>, Inline: [2] -}
b520eb0e4b3b9a803de0641002f7c19e
  $wputTypeRep ::
    forall k (a :: k).
    Data.Typeable.Internal.TypeRep a
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
1e74ce561dbc2ee6a089ac9a6874bdf4
  class Binary t where
    put :: t -> Data.Binary.Put.Put
    default put :: (GHC.Generics.Generic t,
                    Data.Binary.Class.GBinaryPut (GHC.Generics.Rep t)) =>
                   t -> Data.Binary.Put.Put
    get :: Data.Binary.Get.Internal.Get t
    default get :: (GHC.Generics.Generic t,
                    Data.Binary.Class.GBinaryGet (GHC.Generics.Rep t)) =>
                   Data.Binary.Get.Internal.Get t
    putList :: [t] -> Data.Binary.Put.Put
b5ef20ff2c01a09036d7b8fd896a0d17
  class GBinaryGet (f :: k -> *) where
    gget :: forall (t :: k). Data.Binary.Get.Internal.Get (f t)
    {-# MINIMAL gget #-}
f6d7ccb833dfe75ee08b778ac5c1a3b5
  class GBinaryPut (f :: k -> *) where
    gput :: forall (t :: k). f t -> Data.Binary.Put.Put
    {-# MINIMAL gput #-}
059612d8b7f5b72b01ec571bbf7c22b7
  type NaturalWord = GHC.Word.Word64
086fe23b5edf7c8d6eebf69f501b92c4
  type SmallInt = GHC.Int.Int32
1e74ce561dbc2ee6a089ac9a6874bdf4
  defaultPutList ::
    Data.Binary.Class.Binary a => [a] -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(U(A,C(U))),A,A)><L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dBinary :: Data.Binary.Class.Binary a) (xs :: [a]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ a
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ a)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (Data.Foldable.mapM_
                               @ []
                               @ Data.Binary.Put.PutM
                               @ a
                               @ ()
                               Data.Foldable.$fFoldable[]
                               Data.Binary.Put.$fMonadPutM
                               (Data.Binary.Class.put @ a $dBinary)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Binary.Class.Binary a>_R
                 ->_R <[a]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
21e064f24c9f51aa44811fdebb06a7b9
  putTypeRep ::
    forall k (a :: k).
    Data.Typeable.Internal.TypeRep a -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ k @ a :: k (w :: Data.Typeable.Internal.TypeRep a) ->
                 case Data.Binary.Class.$wputTypeRep
                        @ k
                        @ a
                        w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
instance Data.Binary.Class.Binary [()]
  = Data.Binary.Class.$fBinary()
instance Data.Binary.Class.Binary [(,)]
  = Data.Binary.Class.$fBinary(,)
instance Data.Binary.Class.Binary [(,,)]
  = Data.Binary.Class.$fBinary(,,)
instance Data.Binary.Class.Binary [(,,,)]
  = Data.Binary.Class.$fBinary(,,,)
instance Data.Binary.Class.Binary [(,,,,)]
  = Data.Binary.Class.$fBinary(,,,,)
instance Data.Binary.Class.Binary [(,,,,,)]
  = Data.Binary.Class.$fBinary(,,,,,)
instance Data.Binary.Class.Binary [(,,,,,,)]
  = Data.Binary.Class.$fBinary(,,,,,,)
instance Data.Binary.Class.Binary [(,,,,,,,)]
  = Data.Binary.Class.$fBinary(,,,,,,,)
instance Data.Binary.Class.Binary [(,,,,,,,,)]
  = Data.Binary.Class.$fBinary(,,,,,,,,)
instance Data.Binary.Class.Binary [(,,,,,,,,,)]
  = Data.Binary.Class.$fBinary(,,,,,,,,,)
instance Data.Binary.Class.Binary [Data.Semigroup.Internal.All]
  = Data.Binary.Class.$fBinaryAll
instance Data.Binary.Class.Binary [Data.Semigroup.Internal.Alt]
  = Data.Binary.Class.$fBinaryAlt
instance Data.Binary.Class.Binary [Data.Semigroup.Internal.Any]
  = Data.Binary.Class.$fBinaryAny
instance Data.Binary.Class.Binary [Data.Semigroup.Arg]
  = Data.Binary.Class.$fBinaryArg
instance Data.Binary.Class.Binary [GHC.Arr.Array]
  = Data.Binary.Class.$fBinaryArray
instance Data.Binary.Class.Binary [GHC.Types.Bool]
  = Data.Binary.Class.$fBinaryBool
instance Data.Binary.Class.Binary [Data.ByteString.Lazy.Internal.ByteString]
  = Data.Binary.Class.$fBinaryByteString
instance Data.Binary.Class.Binary [Data.ByteString.Internal.ByteString]
  = Data.Binary.Class.$fBinaryByteString0
instance Data.Binary.Class.Binary [GHC.Types.Char]
  = Data.Binary.Class.$fBinaryChar
instance Data.Binary.Class.Binary [Data.Complex.Complex]
  = Data.Binary.Class.$fBinaryComplex
instance Data.Binary.Class.Binary [GHC.Types.Double]
  = Data.Binary.Class.$fBinaryDouble
instance Data.Binary.Class.Binary [Data.Semigroup.Internal.Dual]
  = Data.Binary.Class.$fBinaryDual
instance Data.Binary.Class.Binary [Data.Either.Either]
  = Data.Binary.Class.$fBinaryEither
instance Data.Binary.Class.Binary [GHC.Fingerprint.Type.Fingerprint]
  = Data.Binary.Class.$fBinaryFingerprint
instance Data.Binary.Class.Binary [Data.Semigroup.First]
  = Data.Binary.Class.$fBinaryFirst
instance Data.Binary.Class.Binary [Data.Monoid.First]
  = Data.Binary.Class.$fBinaryFirst0
instance Data.Binary.Class.Binary [Data.Fixed.Fixed]
  = Data.Binary.Class.$fBinaryFixed
instance Data.Binary.Class.Binary [GHC.Types.Float]
  = Data.Binary.Class.$fBinaryFloat
instance Data.Binary.Class.Binary [Data.Functor.Identity.Identity]
  = Data.Binary.Class.$fBinaryIdentity
instance Data.Binary.Class.Binary [GHC.Types.Int]
  = Data.Binary.Class.$fBinaryInt
instance Data.Binary.Class.Binary [GHC.Int.Int16]
  = Data.Binary.Class.$fBinaryInt16
instance Data.Binary.Class.Binary [GHC.Int.Int32]
  = Data.Binary.Class.$fBinaryInt32
instance Data.Binary.Class.Binary [GHC.Int.Int64]
  = Data.Binary.Class.$fBinaryInt64
instance Data.Binary.Class.Binary [GHC.Int.Int8]
  = Data.Binary.Class.$fBinaryInt8
instance Data.Binary.Class.Binary [Data.IntMap.Internal.IntMap]
  = Data.Binary.Class.$fBinaryIntMap
instance Data.Binary.Class.Binary [Data.IntSet.Internal.IntSet]
  = Data.Binary.Class.$fBinaryIntSet
instance Data.Binary.Class.Binary [GHC.Integer.Type.Integer]
  = Data.Binary.Class.$fBinaryInteger
instance Data.Binary.Class.Binary [GHC.Types.KindRep]
  = Data.Binary.Class.$fBinaryKindRep
instance Data.Binary.Class.Binary [Data.Semigroup.Last]
  = Data.Binary.Class.$fBinaryLast
instance Data.Binary.Class.Binary [Data.Monoid.Last]
  = Data.Binary.Class.$fBinaryLast0
instance Data.Binary.Class.Binary [Data.Map.Internal.Map]
  = Data.Binary.Class.$fBinaryMap
instance Data.Binary.Class.Binary [Data.Semigroup.Max]
  = Data.Binary.Class.$fBinaryMax
instance Data.Binary.Class.Binary [GHC.Maybe.Maybe]
  = Data.Binary.Class.$fBinaryMaybe
instance Data.Binary.Class.Binary [Data.Semigroup.Min]
  = Data.Binary.Class.$fBinaryMin
instance Data.Binary.Class.Binary [GHC.Natural.Natural]
  = Data.Binary.Class.$fBinaryNatural
instance Data.Binary.Class.Binary [GHC.Base.NonEmpty]
  = Data.Binary.Class.$fBinaryNonEmpty
instance Data.Binary.Class.Binary [Data.Semigroup.Option]
  = Data.Binary.Class.$fBinaryOption
instance Data.Binary.Class.Binary [GHC.Types.Ordering]
  = Data.Binary.Class.$fBinaryOrdering
instance Data.Binary.Class.Binary [Data.Semigroup.Internal.Product]
  = Data.Binary.Class.$fBinaryProduct
instance Data.Binary.Class.Binary [GHC.Real.Ratio]
  = Data.Binary.Class.$fBinaryRatio
instance Data.Binary.Class.Binary [GHC.Types.RuntimeRep]
  = Data.Binary.Class.$fBinaryRuntimeRep
instance Data.Binary.Class.Binary [Data.Sequence.Internal.Seq]
  = Data.Binary.Class.$fBinarySeq
instance Data.Binary.Class.Binary [Data.Set.Internal.Set]
  = Data.Binary.Class.$fBinarySet
instance Data.Binary.Class.Binary [Data.ByteString.Short.Internal.ShortByteString]
  = Data.Binary.Class.$fBinaryShortByteString
instance Data.Binary.Class.Binary [Data.Typeable.Internal.SomeTypeRep]
  = Data.Binary.Class.$fBinarySomeTypeRep
instance Data.Binary.Class.Binary [Data.Semigroup.Internal.Sum]
  = Data.Binary.Class.$fBinarySum
instance Data.Binary.Class.Binary [Data.Tree.Tree]
  = Data.Binary.Class.$fBinaryTree
instance Data.Binary.Class.Binary [GHC.Types.TyCon]
  = Data.Binary.Class.$fBinaryTyCon
instance Data.Binary.Class.Binary [GHC.Types.TypeLitSort]
  = Data.Binary.Class.$fBinaryTypeLitSort
instance Data.Binary.Class.Binary [Data.Typeable.Internal.TypeRep]
  = Data.Binary.Class.$fBinaryTypeRep
instance Data.Binary.Class.Binary [Data.Array.Base.UArray]
  = Data.Binary.Class.$fBinaryUArray
instance Data.Binary.Class.Binary [GHC.Types.VecCount]
  = Data.Binary.Class.$fBinaryVecCount
instance Data.Binary.Class.Binary [GHC.Types.VecElem]
  = Data.Binary.Class.$fBinaryVecElem
instance Data.Binary.Class.Binary [Data.Version.Version]
  = Data.Binary.Class.$fBinaryVersion
instance Data.Binary.Class.Binary [Data.Void.Void]
  = Data.Binary.Class.$fBinaryVoid
instance Data.Binary.Class.Binary [GHC.Types.Word]
  = Data.Binary.Class.$fBinaryWord
instance Data.Binary.Class.Binary [GHC.Word.Word16]
  = Data.Binary.Class.$fBinaryWord16
instance Data.Binary.Class.Binary [GHC.Word.Word32]
  = Data.Binary.Class.$fBinaryWord32
instance Data.Binary.Class.Binary [GHC.Word.Word64]
  = Data.Binary.Class.$fBinaryWord64
instance Data.Binary.Class.Binary [GHC.Word.Word8]
  = Data.Binary.Class.$fBinaryWord8
instance Data.Binary.Class.Binary [Data.Semigroup.WrappedMonoid]
  = Data.Binary.Class.$fBinaryWrappedMonoid
instance Data.Binary.Class.Binary [[]]
  = Data.Binary.Class.$fBinary[]
"SC:go0" forall (sc :: GHC.Prim.Word#)
  Data.Binary.Class.$fBinaryNatural_go (GHC.Natural.NatS# sc)
  = Data.Binary.Class.$fBinaryNatural_$sgo1 sc
"SC:go1" forall (sc :: GHC.Prim.ByteArray#)
  Data.Binary.Class.$fBinaryNatural_go (GHC.Natural.NatJ# sc)
  = Data.Binary.Class.$fBinaryNatural_$sgo sc
"SPEC $cget @ Char" forall ($dBinary :: Data.Binary.Class.Binary
                                          GHC.Types.Char)
  Data.Binary.Class.$fBinary[]1 @ GHC.Types.Char $dBinary
  = Data.Binary.Class.$fBinaryVersion_$s$cget
"SPEC $cget @ Word8" forall ($dBinary :: Data.Binary.Class.Binary
                                           GHC.Word.Word8)
  Data.Binary.Class.$fBinary[]1 @ GHC.Word.Word8 $dBinary
  = Data.Binary.Class.$fBinaryInteger_$s$cget
"SPEC $cputList @ Char" forall ($dBinary :: Data.Binary.Class.Binary
                                              GHC.Types.Char)
  Data.Binary.Class.$fBinary[]_$cputList @ GHC.Types.Char $dBinary
  = Data.Binary.Class.$fBinaryVersion_$s$cputList
"SPEC $fBinary[] @ Char" forall ($dBinary :: Data.Binary.Class.Binary
                                               GHC.Types.Char)
  Data.Binary.Class.$fBinary[] @ GHC.Types.Char $dBinary
  = Data.Binary.Class.$fBinaryVersion_$s$fBinary[]
trusted: trustworthy
require own pkg trusted: True
module header:
  Nothing
declaration docs:
arg docs:

